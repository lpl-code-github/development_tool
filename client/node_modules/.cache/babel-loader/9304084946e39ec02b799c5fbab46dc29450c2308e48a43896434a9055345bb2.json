{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode } from \"vue\";\nimport { defineComponent } from 'vue';\nimport classNames from '../_util/classNames';\nimport { initDefaultProps } from '../_util/props-util';\nimport Title from './Title';\nimport Paragraph from './Paragraph';\nimport useConfigInject from '../config-provider/hooks/useConfigInject';\nimport Element from './Element';\nimport useStyle from './style';\nexport const skeletonProps = () => ({\n  active: {\n    type: Boolean,\n    default: undefined\n  },\n  loading: {\n    type: Boolean,\n    default: undefined\n  },\n  prefixCls: String,\n  avatar: {\n    type: [Boolean, Object],\n    default: undefined\n  },\n  title: {\n    type: [Boolean, Object],\n    default: undefined\n  },\n  paragraph: {\n    type: [Boolean, Object],\n    default: undefined\n  },\n  round: {\n    type: Boolean,\n    default: undefined\n  }\n});\nfunction getComponentProps(prop) {\n  if (prop && typeof prop === 'object') {\n    return prop;\n  }\n  return {};\n}\nfunction getAvatarBasicProps(hasTitle, hasParagraph) {\n  if (hasTitle && !hasParagraph) {\n    // Square avatar\n    return {\n      size: 'large',\n      shape: 'square'\n    };\n  }\n  return {\n    size: 'large',\n    shape: 'circle'\n  };\n}\nfunction getTitleBasicProps(hasAvatar, hasParagraph) {\n  if (!hasAvatar && hasParagraph) {\n    return {\n      width: '38%'\n    };\n  }\n  if (hasAvatar && hasParagraph) {\n    return {\n      width: '50%'\n    };\n  }\n  return {};\n}\nfunction getParagraphBasicProps(hasAvatar, hasTitle) {\n  const basicProps = {};\n  // Width\n  if (!hasAvatar || !hasTitle) {\n    basicProps.width = '61%';\n  }\n  // Rows\n  if (!hasAvatar && hasTitle) {\n    basicProps.rows = 3;\n  } else {\n    basicProps.rows = 2;\n  }\n  return basicProps;\n}\nconst Skeleton = defineComponent({\n  compatConfig: {\n    MODE: 3\n  },\n  name: 'ASkeleton',\n  props: initDefaultProps(skeletonProps(), {\n    avatar: false,\n    title: true,\n    paragraph: true\n  }),\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const {\n      prefixCls,\n      direction\n    } = useConfigInject('skeleton', props);\n    const [wrapSSR, hashId] = useStyle(prefixCls);\n    return () => {\n      var _a;\n      const {\n        loading,\n        avatar,\n        title,\n        paragraph,\n        active,\n        round\n      } = props;\n      const pre = prefixCls.value;\n      if (loading || props.loading === undefined) {\n        const hasAvatar = !!avatar || avatar === '';\n        const hasTitle = !!title || title === '';\n        const hasParagraph = !!paragraph || paragraph === '';\n        // Avatar\n        let avatarNode;\n        if (hasAvatar) {\n          const avatarProps = _extends(_extends({\n            prefixCls: `${pre}-avatar`\n          }, getAvatarBasicProps(hasTitle, hasParagraph)), getComponentProps(avatar));\n          avatarNode = _createVNode(\"div\", {\n            \"class\": `${pre}-header`\n          }, [_createVNode(Element, avatarProps, null)]);\n        }\n        let contentNode;\n        if (hasTitle || hasParagraph) {\n          // Title\n          let $title;\n          if (hasTitle) {\n            const titleProps = _extends(_extends({\n              prefixCls: `${pre}-title`\n            }, getTitleBasicProps(hasAvatar, hasParagraph)), getComponentProps(title));\n            $title = _createVNode(Title, titleProps, null);\n          }\n          // Paragraph\n          let paragraphNode;\n          if (hasParagraph) {\n            const paragraphProps = _extends(_extends({\n              prefixCls: `${pre}-paragraph`\n            }, getParagraphBasicProps(hasAvatar, hasTitle)), getComponentProps(paragraph));\n            paragraphNode = _createVNode(Paragraph, paragraphProps, null);\n          }\n          contentNode = _createVNode(\"div\", {\n            \"class\": `${pre}-content`\n          }, [$title, paragraphNode]);\n        }\n        const cls = classNames(pre, {\n          [`${pre}-with-avatar`]: hasAvatar,\n          [`${pre}-active`]: active,\n          [`${pre}-rtl`]: direction.value === 'rtl',\n          [`${pre}-round`]: round,\n          [hashId.value]: true\n        });\n        return wrapSSR(_createVNode(\"div\", {\n          \"class\": cls\n        }, [avatarNode, contentNode]));\n      }\n      return (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots);\n    };\n  }\n});\nexport default Skeleton;","map":{"version":3,"names":["_extends","createVNode","_createVNode","defineComponent","classNames","initDefaultProps","Title","Paragraph","useConfigInject","Element","useStyle","skeletonProps","active","type","Boolean","default","undefined","loading","prefixCls","String","avatar","Object","title","paragraph","round","getComponentProps","prop","getAvatarBasicProps","hasTitle","hasParagraph","size","shape","getTitleBasicProps","hasAvatar","width","getParagraphBasicProps","basicProps","rows","Skeleton","compatConfig","MODE","name","props","setup","_ref","slots","direction","wrapSSR","hashId","_a","pre","value","avatarNode","avatarProps","contentNode","$title","titleProps","paragraphNode","paragraphProps","cls","call"],"sources":["/Users/lpl/工作/Teamsupport/develop_help/node_modules/ant-design-vue/es/skeleton/Skeleton.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode } from \"vue\";\nimport { defineComponent } from 'vue';\nimport classNames from '../_util/classNames';\nimport { initDefaultProps } from '../_util/props-util';\nimport Title from './Title';\nimport Paragraph from './Paragraph';\nimport useConfigInject from '../config-provider/hooks/useConfigInject';\nimport Element from './Element';\nimport useStyle from './style';\nexport const skeletonProps = () => ({\n  active: {\n    type: Boolean,\n    default: undefined\n  },\n  loading: {\n    type: Boolean,\n    default: undefined\n  },\n  prefixCls: String,\n  avatar: {\n    type: [Boolean, Object],\n    default: undefined\n  },\n  title: {\n    type: [Boolean, Object],\n    default: undefined\n  },\n  paragraph: {\n    type: [Boolean, Object],\n    default: undefined\n  },\n  round: {\n    type: Boolean,\n    default: undefined\n  }\n});\nfunction getComponentProps(prop) {\n  if (prop && typeof prop === 'object') {\n    return prop;\n  }\n  return {};\n}\nfunction getAvatarBasicProps(hasTitle, hasParagraph) {\n  if (hasTitle && !hasParagraph) {\n    // Square avatar\n    return {\n      size: 'large',\n      shape: 'square'\n    };\n  }\n  return {\n    size: 'large',\n    shape: 'circle'\n  };\n}\nfunction getTitleBasicProps(hasAvatar, hasParagraph) {\n  if (!hasAvatar && hasParagraph) {\n    return {\n      width: '38%'\n    };\n  }\n  if (hasAvatar && hasParagraph) {\n    return {\n      width: '50%'\n    };\n  }\n  return {};\n}\nfunction getParagraphBasicProps(hasAvatar, hasTitle) {\n  const basicProps = {};\n  // Width\n  if (!hasAvatar || !hasTitle) {\n    basicProps.width = '61%';\n  }\n  // Rows\n  if (!hasAvatar && hasTitle) {\n    basicProps.rows = 3;\n  } else {\n    basicProps.rows = 2;\n  }\n  return basicProps;\n}\nconst Skeleton = defineComponent({\n  compatConfig: {\n    MODE: 3\n  },\n  name: 'ASkeleton',\n  props: initDefaultProps(skeletonProps(), {\n    avatar: false,\n    title: true,\n    paragraph: true\n  }),\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const {\n      prefixCls,\n      direction\n    } = useConfigInject('skeleton', props);\n    const [wrapSSR, hashId] = useStyle(prefixCls);\n    return () => {\n      var _a;\n      const {\n        loading,\n        avatar,\n        title,\n        paragraph,\n        active,\n        round\n      } = props;\n      const pre = prefixCls.value;\n      if (loading || props.loading === undefined) {\n        const hasAvatar = !!avatar || avatar === '';\n        const hasTitle = !!title || title === '';\n        const hasParagraph = !!paragraph || paragraph === '';\n        // Avatar\n        let avatarNode;\n        if (hasAvatar) {\n          const avatarProps = _extends(_extends({\n            prefixCls: `${pre}-avatar`\n          }, getAvatarBasicProps(hasTitle, hasParagraph)), getComponentProps(avatar));\n          avatarNode = _createVNode(\"div\", {\n            \"class\": `${pre}-header`\n          }, [_createVNode(Element, avatarProps, null)]);\n        }\n        let contentNode;\n        if (hasTitle || hasParagraph) {\n          // Title\n          let $title;\n          if (hasTitle) {\n            const titleProps = _extends(_extends({\n              prefixCls: `${pre}-title`\n            }, getTitleBasicProps(hasAvatar, hasParagraph)), getComponentProps(title));\n            $title = _createVNode(Title, titleProps, null);\n          }\n          // Paragraph\n          let paragraphNode;\n          if (hasParagraph) {\n            const paragraphProps = _extends(_extends({\n              prefixCls: `${pre}-paragraph`\n            }, getParagraphBasicProps(hasAvatar, hasTitle)), getComponentProps(paragraph));\n            paragraphNode = _createVNode(Paragraph, paragraphProps, null);\n          }\n          contentNode = _createVNode(\"div\", {\n            \"class\": `${pre}-content`\n          }, [$title, paragraphNode]);\n        }\n        const cls = classNames(pre, {\n          [`${pre}-with-avatar`]: hasAvatar,\n          [`${pre}-active`]: active,\n          [`${pre}-rtl`]: direction.value === 'rtl',\n          [`${pre}-round`]: round,\n          [hashId.value]: true\n        });\n        return wrapSSR(_createVNode(\"div\", {\n          \"class\": cls\n        }, [avatarNode, contentNode]));\n      }\n      return (_a = slots.default) === null || _a === void 0 ? void 0 : _a.call(slots);\n    };\n  }\n});\nexport default Skeleton;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}