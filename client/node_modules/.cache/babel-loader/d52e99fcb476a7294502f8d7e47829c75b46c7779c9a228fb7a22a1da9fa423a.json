{"ast":null,"code":"import { lintWarning } from './utils';\nfunction isConcatSelector(selector) {\n  var _a;\n  const notContent = ((_a = selector.match(/:not\\(([^)]*)\\)/)) === null || _a === void 0 ? void 0 : _a[1]) || '';\n  // split selector. e.g.\n  // `h1#a.b` => ['h1', #a', '.b']\n  const splitCells = notContent.split(/(\\[[^[]*])|(?=[.#])/).filter(str => str);\n  return splitCells.length > 1;\n}\nfunction parsePath(info) {\n  return info.parentSelectors.reduce((prev, cur) => {\n    if (!prev) {\n      return cur;\n    }\n    return cur.includes('&') ? cur.replace(/&/g, prev) : `${prev} ${cur}`;\n  }, '');\n}\nconst linter = (_key, _value, info) => {\n  const parentSelectorPath = parsePath(info);\n  const notList = parentSelectorPath.match(/:not\\([^)]*\\)/g) || [];\n  if (notList.length > 0 && notList.some(isConcatSelector)) {\n    lintWarning(`Concat ':not' selector not support in legacy browsers.`, info);\n  }\n};\nexport default linter;","map":{"version":3,"names":["lintWarning","isConcatSelector","selector","_a","notContent","match","splitCells","split","filter","str","length","parsePath","info","parentSelectors","reduce","prev","cur","includes","replace","linter","_key","_value","parentSelectorPath","notList","some"],"sources":["/Users/lpl/工作/Teamsupport/develop_help/node_modules/ant-design-vue/es/_util/cssinjs/linters/legacyNotSelectorLinter.js"],"sourcesContent":["import { lintWarning } from './utils';\nfunction isConcatSelector(selector) {\n  var _a;\n  const notContent = ((_a = selector.match(/:not\\(([^)]*)\\)/)) === null || _a === void 0 ? void 0 : _a[1]) || '';\n  // split selector. e.g.\n  // `h1#a.b` => ['h1', #a', '.b']\n  const splitCells = notContent.split(/(\\[[^[]*])|(?=[.#])/).filter(str => str);\n  return splitCells.length > 1;\n}\nfunction parsePath(info) {\n  return info.parentSelectors.reduce((prev, cur) => {\n    if (!prev) {\n      return cur;\n    }\n    return cur.includes('&') ? cur.replace(/&/g, prev) : `${prev} ${cur}`;\n  }, '');\n}\nconst linter = (_key, _value, info) => {\n  const parentSelectorPath = parsePath(info);\n  const notList = parentSelectorPath.match(/:not\\([^)]*\\)/g) || [];\n  if (notList.length > 0 && notList.some(isConcatSelector)) {\n    lintWarning(`Concat ':not' selector not support in legacy browsers.`, info);\n  }\n};\nexport default linter;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,SAAS;AACrC,SAASC,gBAAgBA,CAACC,QAAQ,EAAE;EAClC,IAAIC,EAAE;EACN,MAAMC,UAAU,GAAG,CAAC,CAACD,EAAE,GAAGD,QAAQ,CAACG,KAAK,CAAC,iBAAiB,CAAC,MAAM,IAAI,IAAIF,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE;EAC9G;EACA;EACA,MAAMG,UAAU,GAAGF,UAAU,CAACG,KAAK,CAAC,qBAAqB,CAAC,CAACC,MAAM,CAACC,GAAG,IAAIA,GAAG,CAAC;EAC7E,OAAOH,UAAU,CAACI,MAAM,GAAG,CAAC;AAC9B;AACA,SAASC,SAASA,CAACC,IAAI,EAAE;EACvB,OAAOA,IAAI,CAACC,eAAe,CAACC,MAAM,CAAC,CAACC,IAAI,EAAEC,GAAG,KAAK;IAChD,IAAI,CAACD,IAAI,EAAE;MACT,OAAOC,GAAG;IACZ;IACA,OAAOA,GAAG,CAACC,QAAQ,CAAC,GAAG,CAAC,GAAGD,GAAG,CAACE,OAAO,CAAC,IAAI,EAAEH,IAAI,CAAC,GAAI,GAAEA,IAAK,IAAGC,GAAI,EAAC;EACvE,CAAC,EAAE,EAAE,CAAC;AACR;AACA,MAAMG,MAAM,GAAGA,CAACC,IAAI,EAAEC,MAAM,EAAET,IAAI,KAAK;EACrC,MAAMU,kBAAkB,GAAGX,SAAS,CAACC,IAAI,CAAC;EAC1C,MAAMW,OAAO,GAAGD,kBAAkB,CAACjB,KAAK,CAAC,gBAAgB,CAAC,IAAI,EAAE;EAChE,IAAIkB,OAAO,CAACb,MAAM,GAAG,CAAC,IAAIa,OAAO,CAACC,IAAI,CAACvB,gBAAgB,CAAC,EAAE;IACxDD,WAAW,CAAE,wDAAuD,EAAEY,IAAI,CAAC;EAC7E;AACF,CAAC;AACD,eAAeO,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}