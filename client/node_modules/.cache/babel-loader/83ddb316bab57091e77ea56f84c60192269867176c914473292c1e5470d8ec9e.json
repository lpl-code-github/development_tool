{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { initZoomMotion } from '../../style/motion';\nimport { genComponentStyleHook, mergeToken } from '../../theme/internal';\nimport { genPresetColor, resetComponent } from '../../style';\nimport getArrowStyle, { MAX_VERTICAL_CONTENT_RADIUS } from '../../style/placementArrow';\nimport 'vue';\nconst genTooltipStyle = token => {\n  const {\n    componentCls,\n    // ant-tooltip\n    tooltipMaxWidth,\n    tooltipColor,\n    tooltipBg,\n    tooltipBorderRadius,\n    zIndexPopup,\n    controlHeight,\n    boxShadowSecondary,\n    paddingSM,\n    paddingXS,\n    tooltipRadiusOuter\n  } = token;\n  return [{\n    [componentCls]: _extends(_extends(_extends(_extends({}, resetComponent(token)), {\n      position: 'absolute',\n      zIndex: zIndexPopup,\n      display: 'block',\n      '&': [{\n        width: 'max-content'\n      }, {\n        width: 'intrinsic'\n      }],\n      maxWidth: tooltipMaxWidth,\n      visibility: 'visible',\n      '&-hidden': {\n        display: 'none'\n      },\n      '--antd-arrow-background-color': tooltipBg,\n      // Wrapper for the tooltip content\n      [`${componentCls}-inner`]: {\n        minWidth: controlHeight,\n        minHeight: controlHeight,\n        padding: `${paddingSM / 2}px ${paddingXS}px`,\n        color: tooltipColor,\n        textAlign: 'start',\n        textDecoration: 'none',\n        wordWrap: 'break-word',\n        backgroundColor: tooltipBg,\n        borderRadius: tooltipBorderRadius,\n        boxShadow: boxShadowSecondary\n      },\n      // Limit left and right placement radius\n      [[`&-placement-left`, `&-placement-leftTop`, `&-placement-leftBottom`, `&-placement-right`, `&-placement-rightTop`, `&-placement-rightBottom`].join(',')]: {\n        [`${componentCls}-inner`]: {\n          borderRadius: Math.min(tooltipBorderRadius, MAX_VERTICAL_CONTENT_RADIUS)\n        }\n      },\n      [`${componentCls}-content`]: {\n        position: 'relative'\n      }\n    }), genPresetColor(token, (colorKey, _ref) => {\n      let {\n        darkColor\n      } = _ref;\n      return {\n        [`&${componentCls}-${colorKey}`]: {\n          [`${componentCls}-inner`]: {\n            backgroundColor: darkColor\n          },\n          [`${componentCls}-arrow`]: {\n            '--antd-arrow-background-color': darkColor\n          }\n        }\n      };\n    })), {\n      // RTL\n      '&-rtl': {\n        direction: 'rtl'\n      }\n    })\n  },\n  // Arrow Style\n  getArrowStyle(mergeToken(token, {\n    borderRadiusOuter: tooltipRadiusOuter\n  }), {\n    colorBg: 'var(--antd-arrow-background-color)',\n    showArrowCls: '',\n    contentRadius: tooltipBorderRadius,\n    limitVerticalRadius: true\n  }),\n  // Pure Render\n  {\n    [`${componentCls}-pure`]: {\n      position: 'relative',\n      maxWidth: 'none'\n    }\n  }];\n};\n// ============================== Export ==============================\nexport default ((prefixCls, injectStyle) => {\n  const useOriginHook = genComponentStyleHook('Tooltip', token => {\n    // Popover use Tooltip as internal component. We do not need to handle this.\n    if ((injectStyle === null || injectStyle === void 0 ? void 0 : injectStyle.value) === false) {\n      return [];\n    }\n    const {\n      borderRadius,\n      colorTextLightSolid,\n      colorBgDefault,\n      borderRadiusOuter\n    } = token;\n    const TooltipToken = mergeToken(token, {\n      // default variables\n      tooltipMaxWidth: 250,\n      tooltipColor: colorTextLightSolid,\n      tooltipBorderRadius: borderRadius,\n      tooltipBg: colorBgDefault,\n      tooltipRadiusOuter: borderRadiusOuter > 4 ? 4 : borderRadiusOuter\n    });\n    return [genTooltipStyle(TooltipToken), initZoomMotion(token, 'zoom-big-fast')];\n  }, _ref2 => {\n    let {\n      zIndexPopupBase,\n      colorBgSpotlight\n    } = _ref2;\n    return {\n      zIndexPopup: zIndexPopupBase + 70,\n      colorBgDefault: colorBgSpotlight\n    };\n  });\n  return useOriginHook(prefixCls);\n});","map":{"version":3,"names":["_extends","initZoomMotion","genComponentStyleHook","mergeToken","genPresetColor","resetComponent","getArrowStyle","MAX_VERTICAL_CONTENT_RADIUS","genTooltipStyle","token","componentCls","tooltipMaxWidth","tooltipColor","tooltipBg","tooltipBorderRadius","zIndexPopup","controlHeight","boxShadowSecondary","paddingSM","paddingXS","tooltipRadiusOuter","position","zIndex","display","width","maxWidth","visibility","minWidth","minHeight","padding","color","textAlign","textDecoration","wordWrap","backgroundColor","borderRadius","boxShadow","join","Math","min","colorKey","_ref","darkColor","direction","borderRadiusOuter","colorBg","showArrowCls","contentRadius","limitVerticalRadius","prefixCls","injectStyle","useOriginHook","value","colorTextLightSolid","colorBgDefault","TooltipToken","_ref2","zIndexPopupBase","colorBgSpotlight"],"sources":["/Users/lpl/工作/Teamsupport/develop_help/node_modules/ant-design-vue/es/tooltip/style/index.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { initZoomMotion } from '../../style/motion';\nimport { genComponentStyleHook, mergeToken } from '../../theme/internal';\nimport { genPresetColor, resetComponent } from '../../style';\nimport getArrowStyle, { MAX_VERTICAL_CONTENT_RADIUS } from '../../style/placementArrow';\nimport 'vue';\nconst genTooltipStyle = token => {\n  const {\n    componentCls,\n    // ant-tooltip\n    tooltipMaxWidth,\n    tooltipColor,\n    tooltipBg,\n    tooltipBorderRadius,\n    zIndexPopup,\n    controlHeight,\n    boxShadowSecondary,\n    paddingSM,\n    paddingXS,\n    tooltipRadiusOuter\n  } = token;\n  return [{\n    [componentCls]: _extends(_extends(_extends(_extends({}, resetComponent(token)), {\n      position: 'absolute',\n      zIndex: zIndexPopup,\n      display: 'block',\n      '&': [{\n        width: 'max-content'\n      }, {\n        width: 'intrinsic'\n      }],\n      maxWidth: tooltipMaxWidth,\n      visibility: 'visible',\n      '&-hidden': {\n        display: 'none'\n      },\n      '--antd-arrow-background-color': tooltipBg,\n      // Wrapper for the tooltip content\n      [`${componentCls}-inner`]: {\n        minWidth: controlHeight,\n        minHeight: controlHeight,\n        padding: `${paddingSM / 2}px ${paddingXS}px`,\n        color: tooltipColor,\n        textAlign: 'start',\n        textDecoration: 'none',\n        wordWrap: 'break-word',\n        backgroundColor: tooltipBg,\n        borderRadius: tooltipBorderRadius,\n        boxShadow: boxShadowSecondary\n      },\n      // Limit left and right placement radius\n      [[`&-placement-left`, `&-placement-leftTop`, `&-placement-leftBottom`, `&-placement-right`, `&-placement-rightTop`, `&-placement-rightBottom`].join(',')]: {\n        [`${componentCls}-inner`]: {\n          borderRadius: Math.min(tooltipBorderRadius, MAX_VERTICAL_CONTENT_RADIUS)\n        }\n      },\n      [`${componentCls}-content`]: {\n        position: 'relative'\n      }\n    }), genPresetColor(token, (colorKey, _ref) => {\n      let {\n        darkColor\n      } = _ref;\n      return {\n        [`&${componentCls}-${colorKey}`]: {\n          [`${componentCls}-inner`]: {\n            backgroundColor: darkColor\n          },\n          [`${componentCls}-arrow`]: {\n            '--antd-arrow-background-color': darkColor\n          }\n        }\n      };\n    })), {\n      // RTL\n      '&-rtl': {\n        direction: 'rtl'\n      }\n    })\n  },\n  // Arrow Style\n  getArrowStyle(mergeToken(token, {\n    borderRadiusOuter: tooltipRadiusOuter\n  }), {\n    colorBg: 'var(--antd-arrow-background-color)',\n    showArrowCls: '',\n    contentRadius: tooltipBorderRadius,\n    limitVerticalRadius: true\n  }),\n  // Pure Render\n  {\n    [`${componentCls}-pure`]: {\n      position: 'relative',\n      maxWidth: 'none'\n    }\n  }];\n};\n// ============================== Export ==============================\nexport default ((prefixCls, injectStyle) => {\n  const useOriginHook = genComponentStyleHook('Tooltip', token => {\n    // Popover use Tooltip as internal component. We do not need to handle this.\n    if ((injectStyle === null || injectStyle === void 0 ? void 0 : injectStyle.value) === false) {\n      return [];\n    }\n    const {\n      borderRadius,\n      colorTextLightSolid,\n      colorBgDefault,\n      borderRadiusOuter\n    } = token;\n    const TooltipToken = mergeToken(token, {\n      // default variables\n      tooltipMaxWidth: 250,\n      tooltipColor: colorTextLightSolid,\n      tooltipBorderRadius: borderRadius,\n      tooltipBg: colorBgDefault,\n      tooltipRadiusOuter: borderRadiusOuter > 4 ? 4 : borderRadiusOuter\n    });\n    return [genTooltipStyle(TooltipToken), initZoomMotion(token, 'zoom-big-fast')];\n  }, _ref2 => {\n    let {\n      zIndexPopupBase,\n      colorBgSpotlight\n    } = _ref2;\n    return {\n      zIndexPopup: zIndexPopupBase + 70,\n      colorBgDefault: colorBgSpotlight\n    };\n  });\n  return useOriginHook(prefixCls);\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}