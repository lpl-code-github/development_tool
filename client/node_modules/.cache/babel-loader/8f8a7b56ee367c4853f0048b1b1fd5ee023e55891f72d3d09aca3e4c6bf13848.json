{"ast":null,"code":"import SwitchComponent from \"@/components/switch/SwitchComponent\";\nimport Statistics from \"@/components/preview/Statistics\";\nexport default {\n  // eslint-disable-next-line vue/multi-word-component-names\n  name: 'MyHeader',\n  components: {\n    Statistics,\n    SwitchComponent\n  },\n  props: {\n    msg: String\n  },\n  data() {\n    return {\n      openDrawer: false,\n      buttonSize: \"small\",\n      loadingUpdateSystem: false,\n      popoverIsShow: false,\n      switchComponentData: [{\n        tooltipText: \"此开关打开，开发环境下，后端API将返回Symfony的报错信息，否则返回json的报错信息\",\n        switchText: \"开发报错信息\",\n        type: \"dev_env_error_message\",\n        checked: false\n      }, {\n        tooltipText: \"此开关打开，测试环境下，后端API将返回Symfony的报错信息，否则返回json的报错信息\",\n        switchText: \"测试报错信息\",\n        type: \"test_env_error_message\",\n        checked: false\n      }, {\n        tooltipText: \"此开关打开，后端代码的.env文件中将修改环境遍历APP_ENV=test，否则为dev\",\n        switchText: \"切换测试模式\",\n        type: \"test_env\",\n        checked: false\n      }, {\n        tooltipText: \"此开关打开，后端将增加供postman使用的/backup和/reduction端点\",\n        switchText: \"导入备份端点\",\n        type: \"back_api\",\n        checked: false\n      }],\n      systemStatus: {\n        \"cpu_usage\": 0,\n        \"memory_usage\": 0\n      },\n      psInfo: \"\",\n      timer: null\n    };\n  },\n  watch: {\n    openDrawer: {\n      handler: function (newVal, oldVal) {\n        if (oldVal === true && newVal === false) {\n          // 关闭Drawer\n          if (this.timer) {\n            //如果定时器还在运行\n            clearInterval(this.timer); //关闭\n          }\n        } else {\n          // 打开Drawer\n          // 轮询请求\n          this.timer = setInterval(this.handleGetDockerInfo, 2000); //2秒去获取一次容器信息\n        }\n      },\n\n      // 深度观察监听\n      deep: true\n    }\n  },\n  mounted() {\n    document.addEventListener('click', this.handleOutsideClick);\n  },\n  beforeDestroy() {\n    if (this.timer) {\n      //如果定时器还在运行\n      clearInterval(this.timer); //关闭\n    }\n\n    document.removeEventListener('click', this.handleOutsideClick);\n  },\n  methods: {\n    /*\n      一些请求事件\n     */\n    // 初始化switch开关的状态\n    async handleQuickSwitch() {\n      await this.$request.switchStatus().then(res => {\n        if (res.status !== 200) {\n          this.popoverIsShow = false;\n        } else {\n          this.popoverIsShow = true;\n          var data = res.data.data;\n          var temp = this.switchComponentData;\n          temp.forEach(componentDataItem => {\n            const responseItem = data.find(item => item.type === componentDataItem.type);\n            if (responseItem) {\n              componentDataItem.checked = responseItem.checked;\n            }\n          });\n          this.switchComponentData = temp;\n        }\n      });\n    },\n    // 清除缓存\n    handleClearCache() {\n      var message = this.$message;\n      var loadingMessage = message.loading('RISKID环境中正在执行php bin/console cache:clear，您可以继续进行其他操作', 0);\n      this.$request.clearR1Cache().then(res => {\n        if (res.status !== 200) {\n          this.popoverIsShow = false;\n        } else {\n          if (res.data.data.handle === true) {\n            setTimeout(loadingMessage, 0);\n            message.success('清除缓存执行成功', 2.5);\n          } else {\n            setTimeout(loadingMessage, 0);\n            message.error('执行失败，请去手动执行命令php bin/console cache:clear', 2.5);\n          }\n        }\n        this.$bus.$emit('requestCompleted');\n      });\n    },\n    // 获取容器信息\n    handleGetDockerInfo() {\n      this.$request.getDockerSystemStatus().then(res => {\n        if (res.status !== 200) {\n          this.$message.error(\"获取容器硬件信息失败\");\n          this.openDrawer = false;\n        } else {\n          this.systemStatus = res.data;\n          this.$request.getPs().then(res => {\n            if (res.status !== 200) {\n              this.$message.error(\"获取容器硬件信息失败\");\n              this.openDrawer = false;\n            } else {\n              this.psInfo = res.data;\n              this.openDrawer = true;\n            }\n          });\n        }\n      });\n    },\n    // 打开抽屉\n    handleOpenDrawer() {\n      this.handleGetDockerInfo();\n    },\n    // 获取抽屉状态\n    getDrawerStatus(status) {\n      this.openDrawer = status;\n    },\n    // 监听手动关闭popover\n    handleOutsideClick(event) {\n      if (this.popoverIsShow && !this.$refs.popover.$el.contains(event.target)) {\n        this.popoverIsShow = false;\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}