{"ast":null,"code":"import { toPathOptions } from '../utils/treeUtil';\nimport { toPathKey } from '../utils/commonUtil';\nimport { computed } from 'vue';\nimport { isValidElement } from '../../_util/props-util';\nimport { cloneElement } from '../../_util/vnode';\nexport default ((rawValues, options, fieldNames, multiple, displayRender) => {\n  return computed(() => {\n    const mergedDisplayRender = displayRender.value || (\n    // Default displayRender\n    _ref => {\n      let {\n        labels\n      } = _ref;\n      const mergedLabels = multiple.value ? labels.slice(-1) : labels;\n      const SPLIT = ' / ';\n      if (mergedLabels.every(label => ['string', 'number'].includes(typeof label))) {\n        return mergedLabels.join(SPLIT);\n      }\n      // If exist non-string value, use VueNode instead\n      return mergedLabels.reduce((list, label, index) => {\n        const keyedLabel = isValidElement(label) ? cloneElement(label, {\n          key: index\n        }) : label;\n        if (index === 0) {\n          return [keyedLabel];\n        }\n        return [...list, SPLIT, keyedLabel];\n      }, []);\n    });\n    return rawValues.value.map(valueCells => {\n      const valueOptions = toPathOptions(valueCells, options.value, fieldNames.value);\n      const label = mergedDisplayRender({\n        labels: valueOptions.map(_ref2 => {\n          let {\n            option,\n            value\n          } = _ref2;\n          var _a;\n          return (_a = option === null || option === void 0 ? void 0 : option[fieldNames.value.label]) !== null && _a !== void 0 ? _a : value;\n        }),\n        selectedOptions: valueOptions.map(_ref3 => {\n          let {\n            option\n          } = _ref3;\n          return option;\n        })\n      });\n      const value = toPathKey(valueCells);\n      return {\n        label,\n        value,\n        key: value,\n        valueCells\n      };\n    });\n  });\n});","map":{"version":3,"names":["toPathOptions","toPathKey","computed","isValidElement","cloneElement","rawValues","options","fieldNames","multiple","displayRender","mergedDisplayRender","value","_ref","labels","mergedLabels","slice","SPLIT","every","label","includes","join","reduce","list","index","keyedLabel","key","map","valueCells","valueOptions","_ref2","option","_a","selectedOptions","_ref3"],"sources":["/Users/lpl/工作/Teamsupport/develop_help/node_modules/ant-design-vue/es/vc-cascader/hooks/useDisplayValues.js"],"sourcesContent":["import { toPathOptions } from '../utils/treeUtil';\nimport { toPathKey } from '../utils/commonUtil';\nimport { computed } from 'vue';\nimport { isValidElement } from '../../_util/props-util';\nimport { cloneElement } from '../../_util/vnode';\nexport default ((rawValues, options, fieldNames, multiple, displayRender) => {\n  return computed(() => {\n    const mergedDisplayRender = displayRender.value || (\n    // Default displayRender\n    _ref => {\n      let {\n        labels\n      } = _ref;\n      const mergedLabels = multiple.value ? labels.slice(-1) : labels;\n      const SPLIT = ' / ';\n      if (mergedLabels.every(label => ['string', 'number'].includes(typeof label))) {\n        return mergedLabels.join(SPLIT);\n      }\n      // If exist non-string value, use VueNode instead\n      return mergedLabels.reduce((list, label, index) => {\n        const keyedLabel = isValidElement(label) ? cloneElement(label, {\n          key: index\n        }) : label;\n        if (index === 0) {\n          return [keyedLabel];\n        }\n        return [...list, SPLIT, keyedLabel];\n      }, []);\n    });\n    return rawValues.value.map(valueCells => {\n      const valueOptions = toPathOptions(valueCells, options.value, fieldNames.value);\n      const label = mergedDisplayRender({\n        labels: valueOptions.map(_ref2 => {\n          let {\n            option,\n            value\n          } = _ref2;\n          var _a;\n          return (_a = option === null || option === void 0 ? void 0 : option[fieldNames.value.label]) !== null && _a !== void 0 ? _a : value;\n        }),\n        selectedOptions: valueOptions.map(_ref3 => {\n          let {\n            option\n          } = _ref3;\n          return option;\n        })\n      });\n      const value = toPathKey(valueCells);\n      return {\n        label,\n        value,\n        key: value,\n        valueCells\n      };\n    });\n  });\n});"],"mappings":"AAAA,SAASA,aAAa,QAAQ,mBAAmB;AACjD,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,QAAQ,QAAQ,KAAK;AAC9B,SAASC,cAAc,QAAQ,wBAAwB;AACvD,SAASC,YAAY,QAAQ,mBAAmB;AAChD,gBAAgB,CAACC,SAAS,EAAEC,OAAO,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,aAAa,KAAK;EAC3E,OAAOP,QAAQ,CAAC,MAAM;IACpB,MAAMQ,mBAAmB,GAAGD,aAAa,CAACE,KAAK;IAC/C;IACAC,IAAI,IAAI;MACN,IAAI;QACFC;MACF,CAAC,GAAGD,IAAI;MACR,MAAME,YAAY,GAAGN,QAAQ,CAACG,KAAK,GAAGE,MAAM,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC,GAAGF,MAAM;MAC/D,MAAMG,KAAK,GAAG,KAAK;MACnB,IAAIF,YAAY,CAACG,KAAK,CAACC,KAAK,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAACC,QAAQ,CAAC,OAAOD,KAAK,CAAC,CAAC,EAAE;QAC5E,OAAOJ,YAAY,CAACM,IAAI,CAACJ,KAAK,CAAC;MACjC;MACA;MACA,OAAOF,YAAY,CAACO,MAAM,CAAC,CAACC,IAAI,EAAEJ,KAAK,EAAEK,KAAK,KAAK;QACjD,MAAMC,UAAU,GAAGrB,cAAc,CAACe,KAAK,CAAC,GAAGd,YAAY,CAACc,KAAK,EAAE;UAC7DO,GAAG,EAAEF;QACP,CAAC,CAAC,GAAGL,KAAK;QACV,IAAIK,KAAK,KAAK,CAAC,EAAE;UACf,OAAO,CAACC,UAAU,CAAC;QACrB;QACA,OAAO,CAAC,GAAGF,IAAI,EAAEN,KAAK,EAAEQ,UAAU,CAAC;MACrC,CAAC,EAAE,EAAE,CAAC;IACR,CAAC,CAAC;IACF,OAAOnB,SAAS,CAACM,KAAK,CAACe,GAAG,CAACC,UAAU,IAAI;MACvC,MAAMC,YAAY,GAAG5B,aAAa,CAAC2B,UAAU,EAAErB,OAAO,CAACK,KAAK,EAAEJ,UAAU,CAACI,KAAK,CAAC;MAC/E,MAAMO,KAAK,GAAGR,mBAAmB,CAAC;QAChCG,MAAM,EAAEe,YAAY,CAACF,GAAG,CAACG,KAAK,IAAI;UAChC,IAAI;YACFC,MAAM;YACNnB;UACF,CAAC,GAAGkB,KAAK;UACT,IAAIE,EAAE;UACN,OAAO,CAACA,EAAE,GAAGD,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACvB,UAAU,CAACI,KAAK,CAACO,KAAK,CAAC,MAAM,IAAI,IAAIa,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGpB,KAAK;QACrI,CAAC,CAAC;QACFqB,eAAe,EAAEJ,YAAY,CAACF,GAAG,CAACO,KAAK,IAAI;UACzC,IAAI;YACFH;UACF,CAAC,GAAGG,KAAK;UACT,OAAOH,MAAM;QACf,CAAC;MACH,CAAC,CAAC;MACF,MAAMnB,KAAK,GAAGV,SAAS,CAAC0B,UAAU,CAAC;MACnC,OAAO;QACLT,KAAK;QACLP,KAAK;QACLc,GAAG,EAAEd,KAAK;QACVgB;MACF,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}