{"ast":null,"code":"import { warning } from '../../vc-util/warning';\nimport { toArray } from './valueUtil';\nfunction warningProps(props) {\n  const {\n    searchPlaceholder,\n    treeCheckStrictly,\n    treeCheckable,\n    labelInValue,\n    value,\n    multiple\n  } = props;\n  warning(!searchPlaceholder, '`searchPlaceholder` has been removed, please use `placeholder` instead');\n  if (treeCheckStrictly && labelInValue === false) {\n    warning(false, '`treeCheckStrictly` will force set `labelInValue` to `true`.');\n  }\n  if (labelInValue || treeCheckStrictly) {\n    warning(toArray(value).every(val => val && typeof val === 'object' && 'value' in val), 'Invalid prop `value` supplied to `TreeSelect`. You should use { label: string, value: string | number } or [{ label: string, value: string | number }] instead.');\n  }\n  if (treeCheckStrictly || multiple || treeCheckable) {\n    warning(!value || Array.isArray(value), '`value` should be an array when `TreeSelect` is checkable or multiple.');\n  } else {\n    warning(!Array.isArray(value), '`value` should not be array when `TreeSelect` is single mode.');\n  }\n}\nexport default warningProps;","map":{"version":3,"names":["warning","toArray","warningProps","props","searchPlaceholder","treeCheckStrictly","treeCheckable","labelInValue","value","multiple","every","val","Array","isArray"],"sources":["/Users/lpl/工作/Teamsupport/develop_help/node_modules/ant-design-vue/es/vc-tree-select/utils/warningPropsUtil.js"],"sourcesContent":["import { warning } from '../../vc-util/warning';\nimport { toArray } from './valueUtil';\nfunction warningProps(props) {\n  const {\n    searchPlaceholder,\n    treeCheckStrictly,\n    treeCheckable,\n    labelInValue,\n    value,\n    multiple\n  } = props;\n  warning(!searchPlaceholder, '`searchPlaceholder` has been removed, please use `placeholder` instead');\n  if (treeCheckStrictly && labelInValue === false) {\n    warning(false, '`treeCheckStrictly` will force set `labelInValue` to `true`.');\n  }\n  if (labelInValue || treeCheckStrictly) {\n    warning(toArray(value).every(val => val && typeof val === 'object' && 'value' in val), 'Invalid prop `value` supplied to `TreeSelect`. You should use { label: string, value: string | number } or [{ label: string, value: string | number }] instead.');\n  }\n  if (treeCheckStrictly || multiple || treeCheckable) {\n    warning(!value || Array.isArray(value), '`value` should be an array when `TreeSelect` is checkable or multiple.');\n  } else {\n    warning(!Array.isArray(value), '`value` should not be array when `TreeSelect` is single mode.');\n  }\n}\nexport default warningProps;"],"mappings":"AAAA,SAASA,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,YAAYA,CAACC,KAAK,EAAE;EAC3B,MAAM;IACJC,iBAAiB;IACjBC,iBAAiB;IACjBC,aAAa;IACbC,YAAY;IACZC,KAAK;IACLC;EACF,CAAC,GAAGN,KAAK;EACTH,OAAO,CAAC,CAACI,iBAAiB,EAAE,wEAAwE,CAAC;EACrG,IAAIC,iBAAiB,IAAIE,YAAY,KAAK,KAAK,EAAE;IAC/CP,OAAO,CAAC,KAAK,EAAE,8DAA8D,CAAC;EAChF;EACA,IAAIO,YAAY,IAAIF,iBAAiB,EAAE;IACrCL,OAAO,CAACC,OAAO,CAACO,KAAK,CAAC,CAACE,KAAK,CAACC,GAAG,IAAIA,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,IAAI,OAAO,IAAIA,GAAG,CAAC,EAAE,iKAAiK,CAAC;EAC3P;EACA,IAAIN,iBAAiB,IAAII,QAAQ,IAAIH,aAAa,EAAE;IAClDN,OAAO,CAAC,CAACQ,KAAK,IAAII,KAAK,CAACC,OAAO,CAACL,KAAK,CAAC,EAAE,wEAAwE,CAAC;EACnH,CAAC,MAAM;IACLR,OAAO,CAAC,CAACY,KAAK,CAACC,OAAO,CAACL,KAAK,CAAC,EAAE,+DAA+D,CAAC;EACjG;AACF;AACA,eAAeN,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}