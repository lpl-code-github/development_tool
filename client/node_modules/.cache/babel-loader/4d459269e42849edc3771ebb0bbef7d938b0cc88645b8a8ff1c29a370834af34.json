{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport _mergeJSXProps from 'babel-helper-vue-jsx-merge-props';\nimport _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';\nimport _extends from 'babel-runtime/helpers/extends';\n/**\n * ARIA: https://www.w3.org/TR/wai-aria/#combobox\n * Sample 1: https://www.w3.org/TR/2017/NOTE-wai-aria-practices-1.1-20171214/examples/combobox/aria1.1pattern/listbox-combo.html\n * Sample 2: https://www.w3.org/blog/wai-components-gallery/widget/combobox-with-aria-autocompleteinline/\n *\n * Tab logic:\n * Popup is close\n * 1. Focus input (mark component as focused)\n * 2. Press enter to show the popup\n * 3. If popup has input, focus it\n *\n * Popup is open\n * 1. press tab to close the popup\n * 2. Focus back to the selection input box\n * 3. Let the native tab going on\n *\n * TreeSelect use 2 design type.\n * In single mode, we should focus on the `span`\n * In multiple mode, we should focus on the `input`\n */\n\nimport shallowEqual from 'shallowequal';\nimport raf from 'raf';\nimport scrollIntoView from 'dom-scroll-into-view';\nimport warning from 'warning';\nimport PropTypes from '../../_util/vue-types';\nimport KeyCode from '../../_util/KeyCode';\nimport SelectTrigger from './SelectTrigger';\nimport SingleSelector from './Selector/SingleSelector';\nimport MultipleSelector from './Selector/MultipleSelector';\nimport SinglePopup from './Popup/SinglePopup';\nimport MultiplePopup from './Popup/MultiplePopup';\nimport { SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from './strategies';\nimport BaseMixin from '../../_util/BaseMixin';\nimport { createRef, generateAriaId, formatInternalValue, formatSelectorValue, parseSimpleTreeData, convertDataToTree, convertTreeToEntities, conductCheck, getHalfCheckedKeys, flatToHierarchy, isPosRelated, isLabelInValue as _isLabelInValue, getFilterTree, cleanEntity, findPopupContainer } from './util';\nimport SelectNode from './SelectNode';\nimport { initDefaultProps, getOptionProps, mergeProps, getPropsData, filterEmpty, getListeners } from '../../_util/props-util';\nfunction getWatch() {\n  var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var watch = {};\n  keys.forEach(function (k) {\n    watch[k] = function () {\n      this.needSyncKeys[k] = true;\n    };\n  });\n  return watch;\n}\nvar Select = {\n  name: 'Select',\n  mixins: [BaseMixin],\n  props: initDefaultProps({\n    prefixCls: PropTypes.string,\n    prefixAria: PropTypes.string,\n    multiple: PropTypes.bool,\n    showArrow: PropTypes.bool,\n    open: PropTypes.bool,\n    value: PropTypes.any,\n    autoFocus: PropTypes.bool,\n    defaultOpen: PropTypes.bool,\n    defaultValue: PropTypes.any,\n    showSearch: PropTypes.bool,\n    placeholder: PropTypes.any,\n    inputValue: PropTypes.string,\n    // [Legacy] Deprecated. Use `searchValue` instead.\n    searchValue: PropTypes.string,\n    autoClearSearchValue: PropTypes.bool,\n    searchPlaceholder: PropTypes.any,\n    // [Legacy] Confuse with placeholder\n    disabled: PropTypes.bool,\n    children: PropTypes.any,\n    labelInValue: PropTypes.bool,\n    maxTagCount: PropTypes.number,\n    maxTagPlaceholder: PropTypes.oneOfType([PropTypes.any, PropTypes.func]),\n    maxTagTextLength: PropTypes.number,\n    showCheckedStrategy: PropTypes.oneOf([SHOW_ALL, SHOW_PARENT, SHOW_CHILD]),\n    dropdownClassName: PropTypes.string,\n    dropdownStyle: PropTypes.object,\n    dropdownVisibleChange: PropTypes.func,\n    dropdownMatchSelectWidth: PropTypes.bool,\n    treeData: PropTypes.array,\n    treeDataSimpleMode: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n    treeNodeFilterProp: PropTypes.string,\n    treeNodeLabelProp: PropTypes.string,\n    treeCheckable: PropTypes.oneOfType([PropTypes.any, PropTypes.object, PropTypes.bool]),\n    // treeCheckable: PropTypes.any,\n    treeCheckStrictly: PropTypes.bool,\n    treeIcon: PropTypes.bool,\n    treeLine: PropTypes.bool,\n    treeDefaultExpandAll: PropTypes.bool,\n    treeDefaultExpandedKeys: PropTypes.array,\n    treeExpandedKeys: PropTypes.array,\n    loadData: PropTypes.func,\n    filterTreeNode: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n    notFoundContent: PropTypes.any,\n    getPopupContainer: PropTypes.func,\n    // onSearch: PropTypes.func,\n    // onSelect: PropTypes.func,\n    // onDeselect: PropTypes.func,\n    // onChange: PropTypes.func,\n    // onDropdownVisibleChange: PropTypes.func,\n\n    // onTreeExpand: PropTypes.func,\n    allowClear: PropTypes.bool,\n    transitionName: PropTypes.string,\n    animation: PropTypes.string,\n    choiceTransitionName: PropTypes.string,\n    inputIcon: PropTypes.any,\n    clearIcon: PropTypes.any,\n    removeIcon: PropTypes.any,\n    switcherIcon: PropTypes.any,\n    __propsSymbol__: PropTypes.any\n  }, {\n    prefixCls: 'rc-tree-select',\n    prefixAria: 'rc-tree-select',\n    showSearch: true,\n    autoClearSearchValue: true,\n    showCheckedStrategy: SHOW_CHILD,\n    // dropdownMatchSelectWidth change the origin design, set to false now\n    // ref: https://github.com/react-component/select/blob/4cad95e098a341a09de239ad6981067188842020/src/Select.jsx#L344\n    // ref: https://github.com/react-component/select/pull/71\n    treeNodeFilterProp: 'value',\n    treeNodeLabelProp: 'title',\n    treeIcon: false,\n    notFoundContent: 'Not Found',\n    dropdownStyle: {},\n    dropdownVisibleChange: function dropdownVisibleChange() {\n      return true;\n    }\n  }),\n  data: function data() {\n    warning(this.$props.__propsSymbol__, 'must pass __propsSymbol__');\n    var _$props = this.$props,\n      prefixAria = _$props.prefixAria,\n      defaultOpen = _$props.defaultOpen,\n      open = _$props.open;\n    this.needSyncKeys = {};\n    this.selectorRef = createRef();\n    this.selectTriggerRef = createRef();\n\n    // ARIA need `aria-controls` props mapping\n    // Since this need user input. Let's generate ourselves\n    this.ariaId = generateAriaId(prefixAria + '-list');\n    var state = {\n      _open: open || defaultOpen,\n      _valueList: [],\n      _searchHalfCheckedKeys: [],\n      _missValueList: [],\n      // Contains the value not in the tree\n      _selectorValueList: [],\n      // Used for multiple selector\n      _valueEntities: {},\n      _posEntities: new Map(),\n      _keyEntities: new Map(),\n      _searchValue: '',\n      _prevProps: {},\n      _init: true,\n      _focused: undefined,\n      _treeNodes: undefined,\n      _filteredTreeNodes: undefined\n    };\n    var newState = this.getDerivedState(this.$props, state);\n    return _extends({}, state, newState);\n  },\n  provide: function provide() {\n    return {\n      vcTreeSelect: {\n        onSelectorFocus: this.onSelectorFocus,\n        onSelectorBlur: this.onSelectorBlur,\n        onSelectorKeyDown: this.onComponentKeyDown,\n        onSelectorClear: this.onSelectorClear,\n        onMultipleSelectorRemove: this.onMultipleSelectorRemove,\n        onTreeNodeSelect: this.onTreeNodeSelect,\n        onTreeNodeCheck: this.onTreeNodeCheck,\n        onPopupKeyDown: this.onComponentKeyDown,\n        onSearchInputChange: this.onSearchInputChange,\n        onSearchInputKeyDown: this.onSearchInputKeyDown\n      }\n    };\n  },\n  watch: _extends({}, getWatch(['treeData', 'defaultValue', 'value']), {\n    __propsSymbol__: function __propsSymbol__() {\n      var state = this.getDerivedState(this.$props, this.$data);\n      this.setState(state);\n      this.needSyncKeys = {};\n    },\n    '$data._valueList': function $data_valueList() {\n      var _this = this;\n      this.$nextTick(function () {\n        _this.forcePopupAlign();\n      });\n    },\n    '$data._open': function $data_open(open) {\n      var _this2 = this;\n      setTimeout(function () {\n        var prefixCls = _this2.$props.prefixCls;\n        var _$data = _this2.$data,\n          selectorValueList = _$data._selectorValueList,\n          valueEntities = _$data._valueEntities;\n        var isMultiple = _this2.isMultiple();\n\n        // Scroll to value position, only need sync on single mode\n        if (!isMultiple && selectorValueList.length && open && _this2.popup) {\n          var value = selectorValueList[0].value;\n          var _popup$getTree = _this2.popup.getTree(),\n            domTreeNodes = _popup$getTree.domTreeNodes;\n          var _ref = valueEntities[value] || {},\n            key = _ref.key;\n          var treeNode = domTreeNodes[key];\n          if (treeNode) {\n            var domNode = treeNode.$el;\n            raf(function () {\n              var popupNode = _this2.popup.$el;\n              var triggerContainer = findPopupContainer(popupNode, prefixCls + '-dropdown');\n              var searchNode = _this2.popup.searchRef.current;\n              if (domNode && triggerContainer && searchNode) {\n                scrollIntoView(domNode, triggerContainer, {\n                  onlyScrollIfNeeded: true,\n                  offsetTop: searchNode.offsetHeight\n                });\n              }\n            });\n          }\n        }\n      });\n    }\n  }),\n  mounted: function mounted() {\n    var _this3 = this;\n    this.$nextTick(function () {\n      var _$props2 = _this3.$props,\n        autoFocus = _$props2.autoFocus,\n        disabled = _$props2.disabled;\n      if (autoFocus && !disabled) {\n        _this3.focus();\n      }\n    });\n  },\n  methods: {\n    getDerivedState: function getDerivedState(nextProps, prevState) {\n      var h = this.$createElement;\n      var _prevState$_prevProps = prevState._prevProps,\n        prevProps = _prevState$_prevProps === undefined ? {} : _prevState$_prevProps;\n      var treeCheckable = nextProps.treeCheckable,\n        treeCheckStrictly = nextProps.treeCheckStrictly,\n        filterTreeNode = nextProps.filterTreeNode,\n        treeNodeFilterProp = nextProps.treeNodeFilterProp,\n        treeDataSimpleMode = nextProps.treeDataSimpleMode;\n      var newState = {\n        _prevProps: _extends({}, nextProps),\n        _init: false\n      };\n      var self = this;\n      // Process the state when props updated\n      function processState(propName, updater) {\n        if (prevProps[propName] !== nextProps[propName] || self.needSyncKeys[propName]) {\n          updater(nextProps[propName], prevProps[propName]);\n          return true;\n        }\n        return false;\n      }\n      var valueRefresh = false;\n\n      // Open\n      processState('open', function (propValue) {\n        newState._open = propValue;\n      });\n\n      // Tree Nodes\n      var treeNodes = void 0;\n      var treeDataChanged = false;\n      var treeDataModeChanged = false;\n      processState('treeData', function (propValue) {\n        treeNodes = convertDataToTree(h, propValue);\n        treeDataChanged = true;\n      });\n      processState('treeDataSimpleMode', function (propValue, prevValue) {\n        if (!propValue) return;\n        var prev = !prevValue || prevValue === true ? {} : prevValue;\n\n        // Shallow equal to avoid dynamic prop object\n        if (!shallowEqual(propValue, prev)) {\n          treeDataModeChanged = true;\n        }\n      });\n\n      // Parse by `treeDataSimpleMode`\n      if (treeDataSimpleMode && (treeDataChanged || treeDataModeChanged)) {\n        var simpleMapper = _extends({\n          id: 'id',\n          pId: 'pId',\n          rootPId: null\n        }, treeDataSimpleMode !== true ? treeDataSimpleMode : {});\n        treeNodes = convertDataToTree(h, parseSimpleTreeData(nextProps.treeData, simpleMapper));\n      }\n\n      // If `treeData` not provide, use children TreeNodes\n      if (!nextProps.treeData) {\n        // processState('children', (propValue) => {\n        //   treeNodes = Array.isArray(propValue) ? propValue : [propValue]\n        // })\n        treeNodes = filterEmpty(this.$slots['default']);\n      }\n\n      // Convert `treeData` to entities\n      if (treeNodes) {\n        var entitiesMap = convertTreeToEntities(treeNodes);\n        newState._treeNodes = treeNodes;\n        newState._posEntities = entitiesMap.posEntities;\n        newState._valueEntities = entitiesMap.valueEntities;\n        newState._keyEntities = entitiesMap.keyEntities;\n        valueRefresh = true;\n      }\n\n      // Value List\n      if (prevState._init) {\n        processState('defaultValue', function (propValue) {\n          newState._valueList = formatInternalValue(propValue, nextProps);\n          valueRefresh = true;\n        });\n      }\n      processState('value', function (propValue) {\n        newState._valueList = formatInternalValue(propValue, nextProps);\n        valueRefresh = true;\n      });\n\n      // Selector Value List\n      if (valueRefresh) {\n        // Find out that value not exist in the tree\n        var missValueList = [];\n        var filteredValueList = [];\n        var keyList = [];\n\n        // Get latest value list\n        var latestValueList = newState._valueList;\n        if (!latestValueList) {\n          // Also need add prev missValueList to avoid new treeNodes contains the value\n          latestValueList = [].concat(_toConsumableArray(prevState._valueList), _toConsumableArray(prevState._missValueList));\n        }\n\n        // Get key by value\n        var valueLabels = {};\n        latestValueList.forEach(function (wrapperValue) {\n          var value = wrapperValue.value,\n            label = wrapperValue.label;\n          var entity = (newState._valueEntities || prevState._valueEntities)[value];\n          valueLabels[value] = label;\n          if (entity) {\n            keyList.push(entity.key);\n            filteredValueList.push(wrapperValue);\n            return;\n          }\n\n          // If not match, it may caused by ajax load. We need keep this\n          missValueList.push(wrapperValue);\n        });\n\n        // We need calculate the value when tree is checked tree\n        if (treeCheckable && !treeCheckStrictly) {\n          // Calculate the keys need to be checked\n          var _conductCheck = conductCheck(keyList, true, newState._keyEntities || prevState._keyEntities),\n            checkedKeys = _conductCheck.checkedKeys;\n\n          // Format value list again for internal usage\n\n          newState._valueList = checkedKeys.map(function (key) {\n            var val = (newState._keyEntities || prevState._keyEntities).get(key).value;\n            var wrappedValue = {\n              value: val\n            };\n            if (valueLabels[val] !== undefined) {\n              wrappedValue.label = valueLabels[val];\n            }\n            return wrappedValue;\n          });\n        } else {\n          newState._valueList = filteredValueList;\n        }\n\n        // Fill the missValueList, we still need display in the selector\n        newState._missValueList = missValueList;\n\n        // Calculate the value list for `Selector` usage\n        newState._selectorValueList = formatSelectorValue(newState._valueList, nextProps, newState._valueEntities || prevState._valueEntities);\n      }\n\n      // [Legacy] To align with `Select` component,\n      // We use `searchValue` instead of `inputValue` but still keep the api\n      // `inputValue` support `null` to work as `autoClearSearchValue`\n      processState('inputValue', function (propValue) {\n        if (propValue !== null) {\n          newState._searchValue = propValue;\n        }\n      });\n\n      // Search value\n      processState('searchValue', function (propValue) {\n        newState._searchValue = propValue;\n      });\n\n      // Do the search logic\n      if (newState._searchValue !== undefined || prevState._searchValue && treeNodes) {\n        var searchValue = newState._searchValue !== undefined ? newState._searchValue : prevState._searchValue;\n        var upperSearchValue = String(searchValue).toUpperCase();\n        var filterTreeNodeFn = filterTreeNode;\n        if (filterTreeNode === false) {\n          // Don't filter if is false\n          filterTreeNodeFn = function filterTreeNodeFn() {\n            return true;\n          };\n        } else if (typeof filterTreeNodeFn !== 'function') {\n          // When is not function (true or undefined), use inner filter\n          filterTreeNodeFn = function filterTreeNodeFn(_, node) {\n            var nodeValue = String(getPropsData(node)[treeNodeFilterProp]).toUpperCase();\n            return nodeValue.indexOf(upperSearchValue) !== -1;\n          };\n        }\n        newState._filteredTreeNodes = getFilterTree(this.$createElement, newState._treeNodes || prevState._treeNodes, searchValue, filterTreeNodeFn, newState._valueEntities || prevState._valueEntities, SelectNode);\n      }\n\n      // We should re-calculate the halfCheckedKeys when in search mode\n      if (valueRefresh && treeCheckable && !treeCheckStrictly && (newState._searchValue || prevState._searchValue)) {\n        newState._searchHalfCheckedKeys = getHalfCheckedKeys(newState._valueList, newState._valueEntities || prevState._valueEntities);\n      }\n\n      // Checked Strategy\n      processState('showCheckedStrategy', function () {\n        newState._selectorValueList = newState._selectorValueList || formatSelectorValue(newState._valueList || prevState._valueList, nextProps, newState._valueEntities || prevState._valueEntities);\n      });\n      return newState;\n    },\n    // ==================== Selector ====================\n    onSelectorFocus: function onSelectorFocus() {\n      this.setState({\n        _focused: true\n      });\n    },\n    onSelectorBlur: function onSelectorBlur() {\n      this.setState({\n        _focused: false\n      });\n\n      // TODO: Close when Popup is also not focused\n      // this.setState({ open: false });\n    },\n\n    // Handle key board event in both Selector and Popup\n    onComponentKeyDown: function onComponentKeyDown(event) {\n      var open = this.$data._open;\n      var keyCode = event.keyCode;\n      if (!open) {\n        if ([KeyCode.ENTER, KeyCode.DOWN].indexOf(keyCode) !== -1) {\n          this.setOpenState(true);\n        }\n      } else if (KeyCode.ESC === keyCode) {\n        this.setOpenState(false);\n      } else if ([KeyCode.UP, KeyCode.DOWN, KeyCode.LEFT, KeyCode.RIGHT].indexOf(keyCode) !== -1) {\n        // TODO: Handle `open` state\n        event.stopPropagation();\n      }\n    },\n    onDeselect: function onDeselect(wrappedValue, node, nodeEventInfo) {\n      this.__emit('deselect', wrappedValue, node, nodeEventInfo);\n    },\n    onSelectorClear: function onSelectorClear(event) {\n      var disabled = this.$props.disabled;\n      if (disabled) return;\n      this.triggerChange([], []);\n      if (!this.isSearchValueControlled()) {\n        this.setUncontrolledState({\n          _searchValue: '',\n          _filteredTreeNodes: null\n        });\n      }\n      event.stopPropagation();\n    },\n    onMultipleSelectorRemove: function onMultipleSelectorRemove(event, removeValue) {\n      event.stopPropagation();\n      var _$data2 = this.$data,\n        valueList = _$data2._valueList,\n        missValueList = _$data2._missValueList,\n        valueEntities = _$data2._valueEntities;\n      var _$props3 = this.$props,\n        treeCheckable = _$props3.treeCheckable,\n        treeCheckStrictly = _$props3.treeCheckStrictly,\n        treeNodeLabelProp = _$props3.treeNodeLabelProp,\n        disabled = _$props3.disabled;\n      if (disabled) return;\n\n      // Find trigger entity\n      var triggerEntity = valueEntities[removeValue];\n\n      // Clean up value\n      var newValueList = valueList;\n      if (triggerEntity) {\n        // If value is in tree\n        if (treeCheckable && !treeCheckStrictly) {\n          newValueList = valueList.filter(function (_ref2) {\n            var value = _ref2.value;\n            var entity = valueEntities[value];\n            return !isPosRelated(entity.pos, triggerEntity.pos);\n          });\n        } else {\n          newValueList = valueList.filter(function (_ref3) {\n            var value = _ref3.value;\n            return value !== removeValue;\n          });\n        }\n      }\n      var triggerNode = triggerEntity ? triggerEntity.node : null;\n      var extraInfo = {\n        triggerValue: removeValue,\n        triggerNode: triggerNode\n      };\n      var deselectInfo = {\n        node: triggerNode\n      };\n\n      // [Legacy] Little hack on this to make same action as `onCheck` event.\n      if (treeCheckable) {\n        var filteredEntityList = newValueList.map(function (_ref4) {\n          var value = _ref4.value;\n          return valueEntities[value];\n        });\n        deselectInfo.event = 'check';\n        deselectInfo.checked = false;\n        deselectInfo.checkedNodes = filteredEntityList.map(function (_ref5) {\n          var node = _ref5.node;\n          return node;\n        });\n        deselectInfo.checkedNodesPositions = filteredEntityList.map(function (_ref6) {\n          var node = _ref6.node,\n            pos = _ref6.pos;\n          return {\n            node: node,\n            pos: pos\n          };\n        });\n        if (treeCheckStrictly) {\n          extraInfo.allCheckedNodes = deselectInfo.checkedNodes;\n        } else {\n          // TODO: It's too expansive to get `halfCheckedKeys` in onDeselect. Not pass this.\n          extraInfo.allCheckedNodes = flatToHierarchy(filteredEntityList).map(function (_ref7) {\n            var node = _ref7.node;\n            return node;\n          });\n        }\n      } else {\n        deselectInfo.event = 'select';\n        deselectInfo.selected = false;\n        deselectInfo.selectedNodes = newValueList.map(function (_ref8) {\n          var value = _ref8.value;\n          return (valueEntities[value] || {}).node;\n        });\n      }\n\n      // Some value user pass prop is not in the tree, we also need clean it\n      var newMissValueList = missValueList.filter(function (_ref9) {\n        var value = _ref9.value;\n        return value !== removeValue;\n      });\n      var wrappedValue = void 0;\n      if (this.isLabelInValue()) {\n        wrappedValue = {\n          label: triggerNode ? getPropsData(triggerNode)[treeNodeLabelProp] : null,\n          value: removeValue\n        };\n      } else {\n        wrappedValue = removeValue;\n      }\n      this.onDeselect(wrappedValue, triggerNode, deselectInfo);\n      this.triggerChange(newMissValueList, newValueList, extraInfo);\n    },\n    // ===================== Popup ======================\n    onValueTrigger: function onValueTrigger(isAdd, nodeList, nodeEventInfo, nodeExtraInfo) {\n      var node = nodeEventInfo.node;\n      var value = node.$props.value;\n      var _$data3 = this.$data,\n        missValueList = _$data3._missValueList,\n        valueEntities = _$data3._valueEntities,\n        keyEntities = _$data3._keyEntities,\n        searchValue = _$data3._searchValue;\n      var _$props4 = this.$props,\n        disabled = _$props4.disabled,\n        inputValue = _$props4.inputValue,\n        treeNodeLabelProp = _$props4.treeNodeLabelProp,\n        multiple = _$props4.multiple,\n        treeCheckable = _$props4.treeCheckable,\n        treeCheckStrictly = _$props4.treeCheckStrictly,\n        autoClearSearchValue = _$props4.autoClearSearchValue;\n      var label = node.$props[treeNodeLabelProp];\n      if (disabled) return;\n\n      // Wrap the return value for user\n      var wrappedValue = void 0;\n      if (this.isLabelInValue()) {\n        wrappedValue = {\n          value: value,\n          label: label\n        };\n      } else {\n        wrappedValue = value;\n      }\n\n      // [Legacy] Origin code not trigger `onDeselect` every time. Let's align the behaviour.\n      if (isAdd) {\n        this.__emit('select', wrappedValue, node, nodeEventInfo);\n      } else {\n        this.__emit('deselect', wrappedValue, node, nodeEventInfo);\n      }\n\n      // Get wrapped value list.\n      // This is a bit hack cause we use key to match the value.\n      var newValueList = nodeList.map(function (node) {\n        var props = getPropsData(node);\n        return {\n          value: props.value,\n          label: props[treeNodeLabelProp]\n        };\n      });\n\n      // When is `treeCheckable` and with `searchValue`, `valueList` is not full filled.\n      // We need calculate the missing nodes.\n      if (treeCheckable && !treeCheckStrictly) {\n        var keyList = newValueList.map(function (_ref10) {\n          var val = _ref10.value;\n          return valueEntities[val].key;\n        });\n        if (isAdd) {\n          keyList = conductCheck(keyList, true, keyEntities).checkedKeys;\n        } else {\n          keyList = conductCheck([valueEntities[value].key], false, keyEntities, {\n            checkedKeys: keyList\n          }).checkedKeys;\n        }\n        newValueList = keyList.map(function (key) {\n          var props = getPropsData(keyEntities.get(key).node);\n          return {\n            value: props.value,\n            label: props[treeNodeLabelProp]\n          };\n        });\n      }\n\n      // Clean up `searchValue` when this prop is set\n      if (autoClearSearchValue || inputValue === null) {\n        // Clean state `searchValue` if uncontrolled\n        if (!this.isSearchValueControlled() && (multiple || treeCheckable)) {\n          this.setUncontrolledState({\n            _searchValue: '',\n            _filteredTreeNodes: null\n          });\n        }\n\n        // Trigger onSearch if `searchValue` to be empty.\n        // We should also trigger onSearch with empty string here\n        // since if user use `treeExpandedKeys`, it need user have the ability to reset it.\n        if (searchValue && searchValue.length) {\n          this.__emit('update:searchValue', '');\n          this.__emit('search', '');\n        }\n      }\n\n      // [Legacy] Provide extra info\n      var extraInfo = _extends({}, nodeExtraInfo, {\n        triggerValue: value,\n        triggerNode: node\n      });\n      this.triggerChange(missValueList, newValueList, extraInfo);\n    },\n    onTreeNodeSelect: function onTreeNodeSelect(_, nodeEventInfo) {\n      var _$data4 = this.$data,\n        valueList = _$data4._valueList,\n        valueEntities = _$data4._valueEntities;\n      var _$props5 = this.$props,\n        treeCheckable = _$props5.treeCheckable,\n        multiple = _$props5.multiple;\n      if (treeCheckable) return;\n      if (!multiple) {\n        this.setOpenState(false);\n      }\n      var isAdd = nodeEventInfo.selected;\n      var selectedValue = nodeEventInfo.node.$props.value;\n      var newValueList = void 0;\n      if (!multiple) {\n        newValueList = [{\n          value: selectedValue\n        }];\n      } else {\n        newValueList = valueList.filter(function (_ref11) {\n          var value = _ref11.value;\n          return value !== selectedValue;\n        });\n        if (isAdd) {\n          newValueList.push({\n            value: selectedValue\n          });\n        }\n      }\n      var selectedNodes = newValueList.map(function (_ref12) {\n        var value = _ref12.value;\n        return valueEntities[value];\n      }).filter(function (entity) {\n        return entity;\n      }).map(function (_ref13) {\n        var node = _ref13.node;\n        return node;\n      });\n      this.onValueTrigger(isAdd, selectedNodes, nodeEventInfo, {\n        selected: isAdd\n      });\n    },\n    onTreeNodeCheck: function onTreeNodeCheck(_, nodeEventInfo) {\n      var _$data5 = this.$data,\n        searchValue = _$data5._searchValue,\n        keyEntities = _$data5._keyEntities,\n        valueEntities = _$data5._valueEntities,\n        valueList = _$data5._valueList;\n      var treeCheckStrictly = this.$props.treeCheckStrictly;\n      var checkedNodes = nodeEventInfo.checkedNodes,\n        checkedNodesPositions = nodeEventInfo.checkedNodesPositions;\n      var isAdd = nodeEventInfo.checked;\n      var extraInfo = {\n        checked: isAdd\n      };\n      var checkedNodeList = checkedNodes;\n\n      // [Legacy] Check event provide `allCheckedNodes`.\n      // When `treeCheckStrictly` or internal `searchValue` is set, TreeNode will be unrelated:\n      // - Related: Show the top checked nodes and has children prop.\n      // - Unrelated: Show all the checked nodes.\n      if (searchValue) {\n        var oriKeyList = valueList.map(function (_ref14) {\n          var value = _ref14.value;\n          return valueEntities[value];\n        }).filter(function (entity) {\n          return entity;\n        }).map(function (_ref15) {\n          var key = _ref15.key;\n          return key;\n        });\n        var keyList = void 0;\n        if (isAdd) {\n          keyList = Array.from(new Set([].concat(_toConsumableArray(oriKeyList), _toConsumableArray(checkedNodeList.map(function (node) {\n            var _getPropsData = getPropsData(node),\n              value = _getPropsData.value;\n            return valueEntities[value].key;\n          })))));\n        } else {\n          keyList = conductCheck([getPropsData(nodeEventInfo.node).eventKey], false, keyEntities, {\n            checkedKeys: oriKeyList\n          }).checkedKeys;\n        }\n        checkedNodeList = keyList.map(function (key) {\n          return keyEntities.get(key).node;\n        });\n\n        // Let's follow as not `treeCheckStrictly` format\n        extraInfo.allCheckedNodes = keyList.map(function (key) {\n          return cleanEntity(keyEntities.get(key));\n        });\n      } else if (treeCheckStrictly) {\n        extraInfo.allCheckedNodes = nodeEventInfo.checkedNodes;\n      } else {\n        extraInfo.allCheckedNodes = flatToHierarchy(checkedNodesPositions);\n      }\n      this.onValueTrigger(isAdd, checkedNodeList, nodeEventInfo, extraInfo);\n    },\n    // ==================== Trigger =====================\n\n    onDropdownVisibleChange: function onDropdownVisibleChange(open) {\n      var _$props6 = this.$props,\n        multiple = _$props6.multiple,\n        treeCheckable = _$props6.treeCheckable;\n      var _searchValue = this.$data._searchValue;\n\n      // When set open success and single mode,\n      // we will reset the input content.\n\n      if (open && !multiple && !treeCheckable && _searchValue) {\n        this.setUncontrolledState({\n          _searchValue: '',\n          _filteredTreeNodes: null\n        });\n      }\n      this.setOpenState(open, true);\n    },\n    onSearchInputChange: function onSearchInputChange(event) {\n      var value = event.target.value;\n      var _$data6 = this.$data,\n        treeNodes = _$data6._treeNodes,\n        valueEntities = _$data6._valueEntities;\n      var _$props7 = this.$props,\n        filterTreeNode = _$props7.filterTreeNode,\n        treeNodeFilterProp = _$props7.treeNodeFilterProp;\n      this.__emit('update:searchValue', value);\n      this.__emit('search', value);\n      var isSet = false;\n      if (!this.isSearchValueControlled()) {\n        isSet = this.setUncontrolledState({\n          _searchValue: value\n        });\n        this.setOpenState(true);\n      }\n      if (isSet) {\n        // Do the search logic\n        var upperSearchValue = String(value).toUpperCase();\n        var filterTreeNodeFn = filterTreeNode;\n        if (filterTreeNode === false) {\n          filterTreeNodeFn = function filterTreeNodeFn() {\n            return true;\n          };\n        } else if (!filterTreeNodeFn) {\n          filterTreeNodeFn = function filterTreeNodeFn(_, node) {\n            var nodeValue = String(getPropsData(node)[treeNodeFilterProp]).toUpperCase();\n            return nodeValue.indexOf(upperSearchValue) !== -1;\n          };\n        }\n        this.setState({\n          _filteredTreeNodes: getFilterTree(this.$createElement, treeNodes, value, filterTreeNodeFn, valueEntities, SelectNode)\n        });\n      }\n    },\n    onSearchInputKeyDown: function onSearchInputKeyDown(event) {\n      var _$data7 = this.$data,\n        searchValue = _$data7._searchValue,\n        valueList = _$data7._valueList;\n      var keyCode = event.keyCode;\n      if (KeyCode.BACKSPACE === keyCode && this.isMultiple() && !searchValue && valueList.length) {\n        var lastValue = valueList[valueList.length - 1].value;\n        this.onMultipleSelectorRemove(event, lastValue);\n      }\n    },\n    onChoiceAnimationLeave: function onChoiceAnimationLeave() {\n      var _this4 = this;\n      raf(function () {\n        _this4.forcePopupAlign();\n      });\n    },\n    setPopupRef: function setPopupRef(popup) {\n      this.popup = popup;\n    },\n    /**\n     * Only update the value which is not in props\n     */\n    setUncontrolledState: function setUncontrolledState(state) {\n      var needSync = false;\n      var newState = {};\n      var props = getOptionProps(this);\n      Object.keys(state).forEach(function (name) {\n        if (name.slice(1) in props) return;\n        needSync = true;\n        newState[name] = state[name];\n      });\n      if (needSync) {\n        this.setState(newState);\n      }\n      return needSync;\n    },\n    // [Legacy] Origin provide `documentClickClose` which triggered by `Trigger`\n    // Currently `TreeSelect` align the hide popup logic as `Select` which blur to hide.\n    // `documentClickClose` is not accurate anymore. Let's just keep the key word.\n    setOpenState: function setOpenState(open) {\n      var byTrigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var dropdownVisibleChange = this.$props.dropdownVisibleChange;\n      if (dropdownVisibleChange && dropdownVisibleChange(open, {\n        documentClickClose: !open && byTrigger\n      }) === false) {\n        return;\n      }\n      this.setUncontrolledState({\n        _open: open\n      });\n    },\n    // Tree checkable is also a multiple case\n    isMultiple: function isMultiple() {\n      var _$props8 = this.$props,\n        multiple = _$props8.multiple,\n        treeCheckable = _$props8.treeCheckable;\n      return !!(multiple || treeCheckable);\n    },\n    isLabelInValue: function isLabelInValue() {\n      return _isLabelInValue(this.$props);\n    },\n    // [Legacy] To align with `Select` component,\n    // We use `searchValue` instead of `inputValue`\n    // but currently still need support that.\n    // Add this method the check if is controlled\n    isSearchValueControlled: function isSearchValueControlled() {\n      var props = getOptionProps(this);\n      var inputValue = props.inputValue;\n      if ('searchValue' in props) return true;\n      return 'inputValue' in props && inputValue !== null;\n    },\n    forcePopupAlign: function forcePopupAlign() {\n      var $trigger = this.selectTriggerRef.current;\n      if ($trigger) {\n        $trigger.forcePopupAlign();\n      }\n    },\n    delayForcePopupAlign: function delayForcePopupAlign() {\n      var _this5 = this;\n\n      // Wait 2 frame to avoid dom update & dom algin in the same time\n      // https://github.com/ant-design/ant-design/issues/12031\n      raf(function () {\n        raf(_this5.forcePopupAlign);\n      });\n    },\n    /**\n     * 1. Update state valueList.\n     * 2. Fire `onChange` event to user.\n     */\n    triggerChange: function triggerChange(missValueList, valueList) {\n      var extraInfo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var _$data8 = this.$data,\n        valueEntities = _$data8._valueEntities,\n        searchValue = _$data8._searchValue,\n        prevSelectorValueList = _$data8._selectorValueList;\n      var props = getOptionProps(this);\n      var disabled = props.disabled,\n        treeCheckable = props.treeCheckable,\n        treeCheckStrictly = props.treeCheckStrictly;\n      if (disabled) return;\n\n      // Trigger\n      var extra = _extends({\n        // [Legacy] Always return as array contains label & value\n        preValue: prevSelectorValueList.map(function (_ref16) {\n          var label = _ref16.label,\n            value = _ref16.value;\n          return {\n            label: label,\n            value: value\n          };\n        })\n      }, extraInfo);\n\n      // Format value by `treeCheckStrictly`\n      var selectorValueList = formatSelectorValue(valueList, props, valueEntities);\n      if (!('value' in props)) {\n        var newState = {\n          _missValueList: missValueList,\n          _valueList: valueList,\n          _selectorValueList: selectorValueList\n        };\n        if (searchValue && treeCheckable && !treeCheckStrictly) {\n          newState._searchHalfCheckedKeys = getHalfCheckedKeys(valueList, valueEntities);\n        }\n        this.setState(newState);\n      }\n\n      // Only do the logic when `onChange` function provided\n      if (getListeners(this).change) {\n        var connectValueList = void 0;\n\n        // Get value by mode\n        if (this.isMultiple()) {\n          connectValueList = [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList));\n        } else {\n          connectValueList = selectorValueList.slice(0, 1);\n        }\n        var labelList = null;\n        var returnValue = void 0;\n        if (this.isLabelInValue()) {\n          returnValue = connectValueList.map(function (_ref17) {\n            var label = _ref17.label,\n              value = _ref17.value;\n            return {\n              label: label,\n              value: value\n            };\n          });\n        } else {\n          labelList = [];\n          returnValue = connectValueList.map(function (_ref18) {\n            var label = _ref18.label,\n              value = _ref18.value;\n            labelList.push(label);\n            return value;\n          });\n        }\n        if (!this.isMultiple()) {\n          returnValue = returnValue[0];\n        }\n        this.__emit('change', returnValue, labelList, extra);\n      }\n    },\n    focus: function focus() {\n      this.selectorRef.current.focus();\n    },\n    blur: function blur() {\n      this.selectorRef.current.blur();\n    }\n  },\n  // ===================== Render =====================\n\n  render: function render() {\n    var h = arguments[0];\n    var _$data9 = this.$data,\n      valueList = _$data9._valueList,\n      missValueList = _$data9._missValueList,\n      selectorValueList = _$data9._selectorValueList,\n      searchHalfCheckedKeys = _$data9._searchHalfCheckedKeys,\n      valueEntities = _$data9._valueEntities,\n      keyEntities = _$data9._keyEntities,\n      searchValue = _$data9._searchValue,\n      open = _$data9._open,\n      focused = _$data9._focused,\n      treeNodes = _$data9._treeNodes,\n      filteredTreeNodes = _$data9._filteredTreeNodes;\n    var props = getOptionProps(this);\n    var prefixCls = props.prefixCls,\n      treeExpandedKeys = props.treeExpandedKeys;\n    var isMultiple = this.isMultiple();\n    var passProps = {\n      props: _extends({}, props, {\n        isMultiple: isMultiple,\n        valueList: valueList,\n        searchHalfCheckedKeys: searchHalfCheckedKeys,\n        selectorValueList: [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList)),\n        valueEntities: valueEntities,\n        keyEntities: keyEntities,\n        searchValue: searchValue,\n        upperSearchValue: (searchValue || '').toUpperCase(),\n        // Perf save\n        open: open,\n        focused: focused,\n        dropdownPrefixCls: prefixCls + '-dropdown',\n        ariaId: this.ariaId\n      }),\n      on: _extends({}, getListeners(this), {\n        choiceAnimationLeave: this.onChoiceAnimationLeave\n      }),\n      scopedSlots: this.$scopedSlots\n    };\n    var popupProps = mergeProps(passProps, {\n      props: {\n        treeNodes: treeNodes,\n        filteredTreeNodes: filteredTreeNodes,\n        // Tree expanded control\n        treeExpandedKeys: treeExpandedKeys,\n        __propsSymbol__: Symbol()\n      },\n      on: {\n        treeExpanded: this.delayForcePopupAlign\n      },\n      directives: [{\n        name: 'ant-ref',\n        value: this.setPopupRef\n      }]\n    });\n    var Popup = isMultiple ? MultiplePopup : SinglePopup;\n    var $popup = h(Popup, popupProps);\n    var Selector = isMultiple ? MultipleSelector : SingleSelector;\n    var $selector = h(Selector, _mergeJSXProps([passProps, {\n      directives: [{\n        name: 'ant-ref',\n        value: this.selectorRef\n      }]\n    }]));\n    var selectTriggerProps = mergeProps(passProps, {\n      props: {\n        popupElement: $popup,\n        dropdownVisibleChange: this.onDropdownVisibleChange\n      },\n      directives: [{\n        name: 'ant-ref',\n        value: this.selectTriggerRef\n      }]\n    });\n    return h(SelectTrigger, selectTriggerProps, [$selector]);\n  }\n};\nSelect.TreeNode = SelectNode;\nSelect.SHOW_ALL = SHOW_ALL;\nSelect.SHOW_PARENT = SHOW_PARENT;\nSelect.SHOW_CHILD = SHOW_CHILD;\n\n// Let warning show correct component name\nSelect.name = 'TreeSelect';\nexport default Select;","map":{"version":3,"names":["_mergeJSXProps","_toConsumableArray","_extends","shallowEqual","raf","scrollIntoView","warning","PropTypes","KeyCode","SelectTrigger","SingleSelector","MultipleSelector","SinglePopup","MultiplePopup","SHOW_ALL","SHOW_PARENT","SHOW_CHILD","BaseMixin","createRef","generateAriaId","formatInternalValue","formatSelectorValue","parseSimpleTreeData","convertDataToTree","convertTreeToEntities","conductCheck","getHalfCheckedKeys","flatToHierarchy","isPosRelated","isLabelInValue","_isLabelInValue","getFilterTree","cleanEntity","findPopupContainer","SelectNode","initDefaultProps","getOptionProps","mergeProps","getPropsData","filterEmpty","getListeners","getWatch","keys","arguments","length","undefined","watch","forEach","k","needSyncKeys","Select","name","mixins","props","prefixCls","string","prefixAria","multiple","bool","showArrow","open","value","any","autoFocus","defaultOpen","defaultValue","showSearch","placeholder","inputValue","searchValue","autoClearSearchValue","searchPlaceholder","disabled","children","labelInValue","maxTagCount","number","maxTagPlaceholder","oneOfType","func","maxTagTextLength","showCheckedStrategy","oneOf","dropdownClassName","dropdownStyle","object","dropdownVisibleChange","dropdownMatchSelectWidth","treeData","array","treeDataSimpleMode","treeNodeFilterProp","treeNodeLabelProp","treeCheckable","treeCheckStrictly","treeIcon","treeLine","treeDefaultExpandAll","treeDefaultExpandedKeys","treeExpandedKeys","loadData","filterTreeNode","notFoundContent","getPopupContainer","allowClear","transitionName","animation","choiceTransitionName","inputIcon","clearIcon","removeIcon","switcherIcon","__propsSymbol__","data","$props","_$props","selectorRef","selectTriggerRef","ariaId","state","_open","_valueList","_searchHalfCheckedKeys","_missValueList","_selectorValueList","_valueEntities","_posEntities","Map","_keyEntities","_searchValue","_prevProps","_init","_focused","_treeNodes","_filteredTreeNodes","newState","getDerivedState","provide","vcTreeSelect","onSelectorFocus","onSelectorBlur","onSelectorKeyDown","onComponentKeyDown","onSelectorClear","onMultipleSelectorRemove","onTreeNodeSelect","onTreeNodeCheck","onPopupKeyDown","onSearchInputChange","onSearchInputKeyDown","$data","setState","$data_valueList","_this","$nextTick","forcePopupAlign","$data_open","_this2","setTimeout","_$data","selectorValueList","valueEntities","isMultiple","popup","_popup$getTree","getTree","domTreeNodes","_ref","key","treeNode","domNode","$el","popupNode","triggerContainer","searchNode","searchRef","current","onlyScrollIfNeeded","offsetTop","offsetHeight","mounted","_this3","_$props2","focus","methods","nextProps","prevState","h","$createElement","_prevState$_prevProps","prevProps","self","processState","propName","updater","valueRefresh","propValue","treeNodes","treeDataChanged","treeDataModeChanged","prevValue","prev","simpleMapper","id","pId","rootPId","$slots","entitiesMap","posEntities","keyEntities","missValueList","filteredValueList","keyList","latestValueList","concat","valueLabels","wrapperValue","label","entity","push","_conductCheck","checkedKeys","map","val","get","wrappedValue","upperSearchValue","String","toUpperCase","filterTreeNodeFn","_","node","nodeValue","indexOf","event","keyCode","ENTER","DOWN","setOpenState","ESC","UP","LEFT","RIGHT","stopPropagation","onDeselect","nodeEventInfo","__emit","triggerChange","isSearchValueControlled","setUncontrolledState","removeValue","_$data2","valueList","_$props3","triggerEntity","newValueList","filter","_ref2","pos","_ref3","triggerNode","extraInfo","triggerValue","deselectInfo","filteredEntityList","_ref4","checked","checkedNodes","_ref5","checkedNodesPositions","_ref6","allCheckedNodes","_ref7","selected","selectedNodes","_ref8","newMissValueList","_ref9","onValueTrigger","isAdd","nodeList","nodeExtraInfo","_$data3","_$props4","_ref10","_$data4","_$props5","selectedValue","_ref11","_ref12","_ref13","_$data5","checkedNodeList","oriKeyList","_ref14","_ref15","Array","from","Set","_getPropsData","eventKey","onDropdownVisibleChange","_$props6","target","_$data6","_$props7","isSet","_$data7","BACKSPACE","lastValue","onChoiceAnimationLeave","_this4","setPopupRef","needSync","Object","slice","byTrigger","documentClickClose","_$props8","$trigger","delayForcePopupAlign","_this5","_$data8","prevSelectorValueList","extra","preValue","_ref16","change","connectValueList","labelList","returnValue","_ref17","_ref18","blur","render","_$data9","searchHalfCheckedKeys","focused","filteredTreeNodes","passProps","dropdownPrefixCls","on","choiceAnimationLeave","scopedSlots","$scopedSlots","popupProps","Symbol","treeExpanded","directives","Popup","$popup","Selector","$selector","selectTriggerProps","popupElement","TreeNode"],"sources":["/Users/lpl/工作/Teamsupport/develop_help/client/node_modules/ant-design-vue/es/vc-tree-select/src/Select.js"],"sourcesContent":["import _mergeJSXProps from 'babel-helper-vue-jsx-merge-props';\nimport _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';\nimport _extends from 'babel-runtime/helpers/extends';\n/**\n * ARIA: https://www.w3.org/TR/wai-aria/#combobox\n * Sample 1: https://www.w3.org/TR/2017/NOTE-wai-aria-practices-1.1-20171214/examples/combobox/aria1.1pattern/listbox-combo.html\n * Sample 2: https://www.w3.org/blog/wai-components-gallery/widget/combobox-with-aria-autocompleteinline/\n *\n * Tab logic:\n * Popup is close\n * 1. Focus input (mark component as focused)\n * 2. Press enter to show the popup\n * 3. If popup has input, focus it\n *\n * Popup is open\n * 1. press tab to close the popup\n * 2. Focus back to the selection input box\n * 3. Let the native tab going on\n *\n * TreeSelect use 2 design type.\n * In single mode, we should focus on the `span`\n * In multiple mode, we should focus on the `input`\n */\n\nimport shallowEqual from 'shallowequal';\nimport raf from 'raf';\nimport scrollIntoView from 'dom-scroll-into-view';\nimport warning from 'warning';\nimport PropTypes from '../../_util/vue-types';\nimport KeyCode from '../../_util/KeyCode';\n\nimport SelectTrigger from './SelectTrigger';\nimport SingleSelector from './Selector/SingleSelector';\nimport MultipleSelector from './Selector/MultipleSelector';\nimport SinglePopup from './Popup/SinglePopup';\nimport MultiplePopup from './Popup/MultiplePopup';\n\nimport { SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from './strategies';\nimport BaseMixin from '../../_util/BaseMixin';\nimport { createRef, generateAriaId, formatInternalValue, formatSelectorValue, parseSimpleTreeData, convertDataToTree, convertTreeToEntities, conductCheck, getHalfCheckedKeys, flatToHierarchy, isPosRelated, isLabelInValue as _isLabelInValue, getFilterTree, cleanEntity, findPopupContainer } from './util';\nimport SelectNode from './SelectNode';\nimport { initDefaultProps, getOptionProps, mergeProps, getPropsData, filterEmpty, getListeners } from '../../_util/props-util';\nfunction getWatch() {\n  var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  var watch = {};\n  keys.forEach(function (k) {\n    watch[k] = function () {\n      this.needSyncKeys[k] = true;\n    };\n  });\n  return watch;\n}\nvar Select = {\n  name: 'Select',\n  mixins: [BaseMixin],\n  props: initDefaultProps({\n    prefixCls: PropTypes.string,\n    prefixAria: PropTypes.string,\n    multiple: PropTypes.bool,\n    showArrow: PropTypes.bool,\n    open: PropTypes.bool,\n    value: PropTypes.any,\n\n    autoFocus: PropTypes.bool,\n\n    defaultOpen: PropTypes.bool,\n    defaultValue: PropTypes.any,\n\n    showSearch: PropTypes.bool,\n    placeholder: PropTypes.any,\n    inputValue: PropTypes.string, // [Legacy] Deprecated. Use `searchValue` instead.\n    searchValue: PropTypes.string,\n    autoClearSearchValue: PropTypes.bool,\n    searchPlaceholder: PropTypes.any, // [Legacy] Confuse with placeholder\n    disabled: PropTypes.bool,\n    children: PropTypes.any,\n    labelInValue: PropTypes.bool,\n    maxTagCount: PropTypes.number,\n    maxTagPlaceholder: PropTypes.oneOfType([PropTypes.any, PropTypes.func]),\n    maxTagTextLength: PropTypes.number,\n    showCheckedStrategy: PropTypes.oneOf([SHOW_ALL, SHOW_PARENT, SHOW_CHILD]),\n    dropdownClassName: PropTypes.string,\n    dropdownStyle: PropTypes.object,\n    dropdownVisibleChange: PropTypes.func,\n    dropdownMatchSelectWidth: PropTypes.bool,\n    treeData: PropTypes.array,\n    treeDataSimpleMode: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n    treeNodeFilterProp: PropTypes.string,\n    treeNodeLabelProp: PropTypes.string,\n    treeCheckable: PropTypes.oneOfType([PropTypes.any, PropTypes.object, PropTypes.bool]),\n    // treeCheckable: PropTypes.any,\n    treeCheckStrictly: PropTypes.bool,\n    treeIcon: PropTypes.bool,\n    treeLine: PropTypes.bool,\n    treeDefaultExpandAll: PropTypes.bool,\n    treeDefaultExpandedKeys: PropTypes.array,\n    treeExpandedKeys: PropTypes.array,\n    loadData: PropTypes.func,\n    filterTreeNode: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n\n    notFoundContent: PropTypes.any,\n    getPopupContainer: PropTypes.func,\n\n    // onSearch: PropTypes.func,\n    // onSelect: PropTypes.func,\n    // onDeselect: PropTypes.func,\n    // onChange: PropTypes.func,\n    // onDropdownVisibleChange: PropTypes.func,\n\n    // onTreeExpand: PropTypes.func,\n    allowClear: PropTypes.bool,\n    transitionName: PropTypes.string,\n    animation: PropTypes.string,\n    choiceTransitionName: PropTypes.string,\n    inputIcon: PropTypes.any,\n    clearIcon: PropTypes.any,\n    removeIcon: PropTypes.any,\n    switcherIcon: PropTypes.any,\n    __propsSymbol__: PropTypes.any\n  }, {\n    prefixCls: 'rc-tree-select',\n    prefixAria: 'rc-tree-select',\n    showSearch: true,\n    autoClearSearchValue: true,\n    showCheckedStrategy: SHOW_CHILD,\n\n    // dropdownMatchSelectWidth change the origin design, set to false now\n    // ref: https://github.com/react-component/select/blob/4cad95e098a341a09de239ad6981067188842020/src/Select.jsx#L344\n    // ref: https://github.com/react-component/select/pull/71\n    treeNodeFilterProp: 'value',\n    treeNodeLabelProp: 'title',\n    treeIcon: false,\n    notFoundContent: 'Not Found',\n    dropdownStyle: {},\n    dropdownVisibleChange: function dropdownVisibleChange() {\n      return true;\n    }\n  }),\n\n  data: function data() {\n    warning(this.$props.__propsSymbol__, 'must pass __propsSymbol__');\n    var _$props = this.$props,\n        prefixAria = _$props.prefixAria,\n        defaultOpen = _$props.defaultOpen,\n        open = _$props.open;\n\n    this.needSyncKeys = {};\n    this.selectorRef = createRef();\n    this.selectTriggerRef = createRef();\n\n    // ARIA need `aria-controls` props mapping\n    // Since this need user input. Let's generate ourselves\n    this.ariaId = generateAriaId(prefixAria + '-list');\n\n    var state = {\n      _open: open || defaultOpen,\n      _valueList: [],\n      _searchHalfCheckedKeys: [],\n      _missValueList: [], // Contains the value not in the tree\n      _selectorValueList: [], // Used for multiple selector\n      _valueEntities: {},\n      _posEntities: new Map(),\n      _keyEntities: new Map(),\n      _searchValue: '',\n      _prevProps: {},\n      _init: true,\n      _focused: undefined,\n      _treeNodes: undefined,\n      _filteredTreeNodes: undefined\n    };\n    var newState = this.getDerivedState(this.$props, state);\n    return _extends({}, state, newState);\n  },\n  provide: function provide() {\n    return {\n      vcTreeSelect: {\n        onSelectorFocus: this.onSelectorFocus,\n        onSelectorBlur: this.onSelectorBlur,\n        onSelectorKeyDown: this.onComponentKeyDown,\n        onSelectorClear: this.onSelectorClear,\n        onMultipleSelectorRemove: this.onMultipleSelectorRemove,\n\n        onTreeNodeSelect: this.onTreeNodeSelect,\n        onTreeNodeCheck: this.onTreeNodeCheck,\n        onPopupKeyDown: this.onComponentKeyDown,\n\n        onSearchInputChange: this.onSearchInputChange,\n        onSearchInputKeyDown: this.onSearchInputKeyDown\n      }\n    };\n  },\n\n  watch: _extends({}, getWatch(['treeData', 'defaultValue', 'value']), {\n    __propsSymbol__: function __propsSymbol__() {\n      var state = this.getDerivedState(this.$props, this.$data);\n      this.setState(state);\n      this.needSyncKeys = {};\n    },\n    '$data._valueList': function $data_valueList() {\n      var _this = this;\n\n      this.$nextTick(function () {\n        _this.forcePopupAlign();\n      });\n    },\n    '$data._open': function $data_open(open) {\n      var _this2 = this;\n\n      setTimeout(function () {\n        var prefixCls = _this2.$props.prefixCls;\n        var _$data = _this2.$data,\n            selectorValueList = _$data._selectorValueList,\n            valueEntities = _$data._valueEntities;\n\n        var isMultiple = _this2.isMultiple();\n\n        // Scroll to value position, only need sync on single mode\n        if (!isMultiple && selectorValueList.length && open && _this2.popup) {\n          var value = selectorValueList[0].value;\n\n          var _popup$getTree = _this2.popup.getTree(),\n              domTreeNodes = _popup$getTree.domTreeNodes;\n\n          var _ref = valueEntities[value] || {},\n              key = _ref.key;\n\n          var treeNode = domTreeNodes[key];\n\n          if (treeNode) {\n            var domNode = treeNode.$el;\n            raf(function () {\n              var popupNode = _this2.popup.$el;\n              var triggerContainer = findPopupContainer(popupNode, prefixCls + '-dropdown');\n              var searchNode = _this2.popup.searchRef.current;\n\n              if (domNode && triggerContainer && searchNode) {\n                scrollIntoView(domNode, triggerContainer, {\n                  onlyScrollIfNeeded: true,\n                  offsetTop: searchNode.offsetHeight\n                });\n              }\n            });\n          }\n        }\n      });\n    }\n  }),\n  mounted: function mounted() {\n    var _this3 = this;\n\n    this.$nextTick(function () {\n      var _$props2 = _this3.$props,\n          autoFocus = _$props2.autoFocus,\n          disabled = _$props2.disabled;\n\n      if (autoFocus && !disabled) {\n        _this3.focus();\n      }\n    });\n  },\n\n\n  methods: {\n    getDerivedState: function getDerivedState(nextProps, prevState) {\n      var h = this.$createElement;\n      var _prevState$_prevProps = prevState._prevProps,\n          prevProps = _prevState$_prevProps === undefined ? {} : _prevState$_prevProps;\n      var treeCheckable = nextProps.treeCheckable,\n          treeCheckStrictly = nextProps.treeCheckStrictly,\n          filterTreeNode = nextProps.filterTreeNode,\n          treeNodeFilterProp = nextProps.treeNodeFilterProp,\n          treeDataSimpleMode = nextProps.treeDataSimpleMode;\n\n      var newState = {\n        _prevProps: _extends({}, nextProps),\n        _init: false\n      };\n      var self = this;\n      // Process the state when props updated\n      function processState(propName, updater) {\n        if (prevProps[propName] !== nextProps[propName] || self.needSyncKeys[propName]) {\n          updater(nextProps[propName], prevProps[propName]);\n          return true;\n        }\n        return false;\n      }\n\n      var valueRefresh = false;\n\n      // Open\n      processState('open', function (propValue) {\n        newState._open = propValue;\n      });\n\n      // Tree Nodes\n      var treeNodes = void 0;\n      var treeDataChanged = false;\n      var treeDataModeChanged = false;\n      processState('treeData', function (propValue) {\n        treeNodes = convertDataToTree(h, propValue);\n        treeDataChanged = true;\n      });\n\n      processState('treeDataSimpleMode', function (propValue, prevValue) {\n        if (!propValue) return;\n\n        var prev = !prevValue || prevValue === true ? {} : prevValue;\n\n        // Shallow equal to avoid dynamic prop object\n        if (!shallowEqual(propValue, prev)) {\n          treeDataModeChanged = true;\n        }\n      });\n\n      // Parse by `treeDataSimpleMode`\n      if (treeDataSimpleMode && (treeDataChanged || treeDataModeChanged)) {\n        var simpleMapper = _extends({\n          id: 'id',\n          pId: 'pId',\n          rootPId: null\n        }, treeDataSimpleMode !== true ? treeDataSimpleMode : {});\n        treeNodes = convertDataToTree(h, parseSimpleTreeData(nextProps.treeData, simpleMapper));\n      }\n\n      // If `treeData` not provide, use children TreeNodes\n      if (!nextProps.treeData) {\n        // processState('children', (propValue) => {\n        //   treeNodes = Array.isArray(propValue) ? propValue : [propValue]\n        // })\n        treeNodes = filterEmpty(this.$slots['default']);\n      }\n\n      // Convert `treeData` to entities\n      if (treeNodes) {\n        var entitiesMap = convertTreeToEntities(treeNodes);\n        newState._treeNodes = treeNodes;\n        newState._posEntities = entitiesMap.posEntities;\n        newState._valueEntities = entitiesMap.valueEntities;\n        newState._keyEntities = entitiesMap.keyEntities;\n\n        valueRefresh = true;\n      }\n\n      // Value List\n      if (prevState._init) {\n        processState('defaultValue', function (propValue) {\n          newState._valueList = formatInternalValue(propValue, nextProps);\n          valueRefresh = true;\n        });\n      }\n\n      processState('value', function (propValue) {\n        newState._valueList = formatInternalValue(propValue, nextProps);\n        valueRefresh = true;\n      });\n\n      // Selector Value List\n      if (valueRefresh) {\n        // Find out that value not exist in the tree\n        var missValueList = [];\n        var filteredValueList = [];\n        var keyList = [];\n\n        // Get latest value list\n        var latestValueList = newState._valueList;\n        if (!latestValueList) {\n          // Also need add prev missValueList to avoid new treeNodes contains the value\n          latestValueList = [].concat(_toConsumableArray(prevState._valueList), _toConsumableArray(prevState._missValueList));\n        }\n\n        // Get key by value\n        var valueLabels = {};\n        latestValueList.forEach(function (wrapperValue) {\n          var value = wrapperValue.value,\n              label = wrapperValue.label;\n\n          var entity = (newState._valueEntities || prevState._valueEntities)[value];\n          valueLabels[value] = label;\n\n          if (entity) {\n            keyList.push(entity.key);\n            filteredValueList.push(wrapperValue);\n            return;\n          }\n\n          // If not match, it may caused by ajax load. We need keep this\n          missValueList.push(wrapperValue);\n        });\n\n        // We need calculate the value when tree is checked tree\n        if (treeCheckable && !treeCheckStrictly) {\n          // Calculate the keys need to be checked\n          var _conductCheck = conductCheck(keyList, true, newState._keyEntities || prevState._keyEntities),\n              checkedKeys = _conductCheck.checkedKeys;\n\n          // Format value list again for internal usage\n\n\n          newState._valueList = checkedKeys.map(function (key) {\n            var val = (newState._keyEntities || prevState._keyEntities).get(key).value;\n\n            var wrappedValue = {\n              value: val\n            };\n\n            if (valueLabels[val] !== undefined) {\n              wrappedValue.label = valueLabels[val];\n            }\n\n            return wrappedValue;\n          });\n        } else {\n          newState._valueList = filteredValueList;\n        }\n\n        // Fill the missValueList, we still need display in the selector\n        newState._missValueList = missValueList;\n\n        // Calculate the value list for `Selector` usage\n        newState._selectorValueList = formatSelectorValue(newState._valueList, nextProps, newState._valueEntities || prevState._valueEntities);\n      }\n\n      // [Legacy] To align with `Select` component,\n      // We use `searchValue` instead of `inputValue` but still keep the api\n      // `inputValue` support `null` to work as `autoClearSearchValue`\n      processState('inputValue', function (propValue) {\n        if (propValue !== null) {\n          newState._searchValue = propValue;\n        }\n      });\n\n      // Search value\n      processState('searchValue', function (propValue) {\n        newState._searchValue = propValue;\n      });\n\n      // Do the search logic\n      if (newState._searchValue !== undefined || prevState._searchValue && treeNodes) {\n        var searchValue = newState._searchValue !== undefined ? newState._searchValue : prevState._searchValue;\n        var upperSearchValue = String(searchValue).toUpperCase();\n\n        var filterTreeNodeFn = filterTreeNode;\n        if (filterTreeNode === false) {\n          // Don't filter if is false\n          filterTreeNodeFn = function filterTreeNodeFn() {\n            return true;\n          };\n        } else if (typeof filterTreeNodeFn !== 'function') {\n          // When is not function (true or undefined), use inner filter\n          filterTreeNodeFn = function filterTreeNodeFn(_, node) {\n            var nodeValue = String(getPropsData(node)[treeNodeFilterProp]).toUpperCase();\n            return nodeValue.indexOf(upperSearchValue) !== -1;\n          };\n        }\n\n        newState._filteredTreeNodes = getFilterTree(this.$createElement, newState._treeNodes || prevState._treeNodes, searchValue, filterTreeNodeFn, newState._valueEntities || prevState._valueEntities, SelectNode);\n      }\n\n      // We should re-calculate the halfCheckedKeys when in search mode\n      if (valueRefresh && treeCheckable && !treeCheckStrictly && (newState._searchValue || prevState._searchValue)) {\n        newState._searchHalfCheckedKeys = getHalfCheckedKeys(newState._valueList, newState._valueEntities || prevState._valueEntities);\n      }\n\n      // Checked Strategy\n      processState('showCheckedStrategy', function () {\n        newState._selectorValueList = newState._selectorValueList || formatSelectorValue(newState._valueList || prevState._valueList, nextProps, newState._valueEntities || prevState._valueEntities);\n      });\n\n      return newState;\n    },\n\n    // ==================== Selector ====================\n    onSelectorFocus: function onSelectorFocus() {\n      this.setState({ _focused: true });\n    },\n    onSelectorBlur: function onSelectorBlur() {\n      this.setState({ _focused: false });\n\n      // TODO: Close when Popup is also not focused\n      // this.setState({ open: false });\n    },\n\n\n    // Handle key board event in both Selector and Popup\n    onComponentKeyDown: function onComponentKeyDown(event) {\n      var open = this.$data._open;\n      var keyCode = event.keyCode;\n\n\n      if (!open) {\n        if ([KeyCode.ENTER, KeyCode.DOWN].indexOf(keyCode) !== -1) {\n          this.setOpenState(true);\n        }\n      } else if (KeyCode.ESC === keyCode) {\n        this.setOpenState(false);\n      } else if ([KeyCode.UP, KeyCode.DOWN, KeyCode.LEFT, KeyCode.RIGHT].indexOf(keyCode) !== -1) {\n        // TODO: Handle `open` state\n        event.stopPropagation();\n      }\n    },\n    onDeselect: function onDeselect(wrappedValue, node, nodeEventInfo) {\n      this.__emit('deselect', wrappedValue, node, nodeEventInfo);\n    },\n    onSelectorClear: function onSelectorClear(event) {\n      var disabled = this.$props.disabled;\n\n      if (disabled) return;\n\n      this.triggerChange([], []);\n\n      if (!this.isSearchValueControlled()) {\n        this.setUncontrolledState({\n          _searchValue: '',\n          _filteredTreeNodes: null\n        });\n      }\n\n      event.stopPropagation();\n    },\n    onMultipleSelectorRemove: function onMultipleSelectorRemove(event, removeValue) {\n      event.stopPropagation();\n\n      var _$data2 = this.$data,\n          valueList = _$data2._valueList,\n          missValueList = _$data2._missValueList,\n          valueEntities = _$data2._valueEntities;\n      var _$props3 = this.$props,\n          treeCheckable = _$props3.treeCheckable,\n          treeCheckStrictly = _$props3.treeCheckStrictly,\n          treeNodeLabelProp = _$props3.treeNodeLabelProp,\n          disabled = _$props3.disabled;\n\n      if (disabled) return;\n\n      // Find trigger entity\n      var triggerEntity = valueEntities[removeValue];\n\n      // Clean up value\n      var newValueList = valueList;\n      if (triggerEntity) {\n        // If value is in tree\n        if (treeCheckable && !treeCheckStrictly) {\n          newValueList = valueList.filter(function (_ref2) {\n            var value = _ref2.value;\n\n            var entity = valueEntities[value];\n            return !isPosRelated(entity.pos, triggerEntity.pos);\n          });\n        } else {\n          newValueList = valueList.filter(function (_ref3) {\n            var value = _ref3.value;\n            return value !== removeValue;\n          });\n        }\n      }\n\n      var triggerNode = triggerEntity ? triggerEntity.node : null;\n\n      var extraInfo = {\n        triggerValue: removeValue,\n        triggerNode: triggerNode\n      };\n      var deselectInfo = {\n        node: triggerNode\n      };\n\n      // [Legacy] Little hack on this to make same action as `onCheck` event.\n      if (treeCheckable) {\n        var filteredEntityList = newValueList.map(function (_ref4) {\n          var value = _ref4.value;\n          return valueEntities[value];\n        });\n\n        deselectInfo.event = 'check';\n        deselectInfo.checked = false;\n        deselectInfo.checkedNodes = filteredEntityList.map(function (_ref5) {\n          var node = _ref5.node;\n          return node;\n        });\n        deselectInfo.checkedNodesPositions = filteredEntityList.map(function (_ref6) {\n          var node = _ref6.node,\n              pos = _ref6.pos;\n          return {\n            node: node,\n            pos: pos\n          };\n        });\n\n        if (treeCheckStrictly) {\n          extraInfo.allCheckedNodes = deselectInfo.checkedNodes;\n        } else {\n          // TODO: It's too expansive to get `halfCheckedKeys` in onDeselect. Not pass this.\n          extraInfo.allCheckedNodes = flatToHierarchy(filteredEntityList).map(function (_ref7) {\n            var node = _ref7.node;\n            return node;\n          });\n        }\n      } else {\n        deselectInfo.event = 'select';\n        deselectInfo.selected = false;\n        deselectInfo.selectedNodes = newValueList.map(function (_ref8) {\n          var value = _ref8.value;\n          return (valueEntities[value] || {}).node;\n        });\n      }\n\n      // Some value user pass prop is not in the tree, we also need clean it\n      var newMissValueList = missValueList.filter(function (_ref9) {\n        var value = _ref9.value;\n        return value !== removeValue;\n      });\n      var wrappedValue = void 0;\n      if (this.isLabelInValue()) {\n        wrappedValue = {\n          label: triggerNode ? getPropsData(triggerNode)[treeNodeLabelProp] : null,\n          value: removeValue\n        };\n      } else {\n        wrappedValue = removeValue;\n      }\n\n      this.onDeselect(wrappedValue, triggerNode, deselectInfo);\n\n      this.triggerChange(newMissValueList, newValueList, extraInfo);\n    },\n\n\n    // ===================== Popup ======================\n    onValueTrigger: function onValueTrigger(isAdd, nodeList, nodeEventInfo, nodeExtraInfo) {\n      var node = nodeEventInfo.node;\n      var value = node.$props.value;\n      var _$data3 = this.$data,\n          missValueList = _$data3._missValueList,\n          valueEntities = _$data3._valueEntities,\n          keyEntities = _$data3._keyEntities,\n          searchValue = _$data3._searchValue;\n      var _$props4 = this.$props,\n          disabled = _$props4.disabled,\n          inputValue = _$props4.inputValue,\n          treeNodeLabelProp = _$props4.treeNodeLabelProp,\n          multiple = _$props4.multiple,\n          treeCheckable = _$props4.treeCheckable,\n          treeCheckStrictly = _$props4.treeCheckStrictly,\n          autoClearSearchValue = _$props4.autoClearSearchValue;\n\n      var label = node.$props[treeNodeLabelProp];\n\n      if (disabled) return;\n\n      // Wrap the return value for user\n      var wrappedValue = void 0;\n      if (this.isLabelInValue()) {\n        wrappedValue = {\n          value: value,\n          label: label\n        };\n      } else {\n        wrappedValue = value;\n      }\n\n      // [Legacy] Origin code not trigger `onDeselect` every time. Let's align the behaviour.\n      if (isAdd) {\n        this.__emit('select', wrappedValue, node, nodeEventInfo);\n      } else {\n        this.__emit('deselect', wrappedValue, node, nodeEventInfo);\n      }\n\n      // Get wrapped value list.\n      // This is a bit hack cause we use key to match the value.\n      var newValueList = nodeList.map(function (node) {\n        var props = getPropsData(node);\n        return {\n          value: props.value,\n          label: props[treeNodeLabelProp]\n        };\n      });\n\n      // When is `treeCheckable` and with `searchValue`, `valueList` is not full filled.\n      // We need calculate the missing nodes.\n      if (treeCheckable && !treeCheckStrictly) {\n        var keyList = newValueList.map(function (_ref10) {\n          var val = _ref10.value;\n          return valueEntities[val].key;\n        });\n        if (isAdd) {\n          keyList = conductCheck(keyList, true, keyEntities).checkedKeys;\n        } else {\n          keyList = conductCheck([valueEntities[value].key], false, keyEntities, {\n            checkedKeys: keyList\n          }).checkedKeys;\n        }\n        newValueList = keyList.map(function (key) {\n          var props = getPropsData(keyEntities.get(key).node);\n          return {\n            value: props.value,\n            label: props[treeNodeLabelProp]\n          };\n        });\n      }\n\n      // Clean up `searchValue` when this prop is set\n      if (autoClearSearchValue || inputValue === null) {\n        // Clean state `searchValue` if uncontrolled\n        if (!this.isSearchValueControlled() && (multiple || treeCheckable)) {\n          this.setUncontrolledState({\n            _searchValue: '',\n            _filteredTreeNodes: null\n          });\n        }\n\n        // Trigger onSearch if `searchValue` to be empty.\n        // We should also trigger onSearch with empty string here\n        // since if user use `treeExpandedKeys`, it need user have the ability to reset it.\n        if (searchValue && searchValue.length) {\n          this.__emit('update:searchValue', '');\n          this.__emit('search', '');\n        }\n      }\n\n      // [Legacy] Provide extra info\n      var extraInfo = _extends({}, nodeExtraInfo, {\n        triggerValue: value,\n        triggerNode: node\n      });\n\n      this.triggerChange(missValueList, newValueList, extraInfo);\n    },\n    onTreeNodeSelect: function onTreeNodeSelect(_, nodeEventInfo) {\n      var _$data4 = this.$data,\n          valueList = _$data4._valueList,\n          valueEntities = _$data4._valueEntities;\n      var _$props5 = this.$props,\n          treeCheckable = _$props5.treeCheckable,\n          multiple = _$props5.multiple;\n\n      if (treeCheckable) return;\n\n      if (!multiple) {\n        this.setOpenState(false);\n      }\n\n      var isAdd = nodeEventInfo.selected;\n      var selectedValue = nodeEventInfo.node.$props.value;\n\n\n      var newValueList = void 0;\n\n      if (!multiple) {\n        newValueList = [{ value: selectedValue }];\n      } else {\n        newValueList = valueList.filter(function (_ref11) {\n          var value = _ref11.value;\n          return value !== selectedValue;\n        });\n        if (isAdd) {\n          newValueList.push({ value: selectedValue });\n        }\n      }\n\n      var selectedNodes = newValueList.map(function (_ref12) {\n        var value = _ref12.value;\n        return valueEntities[value];\n      }).filter(function (entity) {\n        return entity;\n      }).map(function (_ref13) {\n        var node = _ref13.node;\n        return node;\n      });\n\n      this.onValueTrigger(isAdd, selectedNodes, nodeEventInfo, { selected: isAdd });\n    },\n    onTreeNodeCheck: function onTreeNodeCheck(_, nodeEventInfo) {\n      var _$data5 = this.$data,\n          searchValue = _$data5._searchValue,\n          keyEntities = _$data5._keyEntities,\n          valueEntities = _$data5._valueEntities,\n          valueList = _$data5._valueList;\n      var treeCheckStrictly = this.$props.treeCheckStrictly;\n      var checkedNodes = nodeEventInfo.checkedNodes,\n          checkedNodesPositions = nodeEventInfo.checkedNodesPositions;\n\n      var isAdd = nodeEventInfo.checked;\n\n      var extraInfo = {\n        checked: isAdd\n      };\n\n      var checkedNodeList = checkedNodes;\n\n      // [Legacy] Check event provide `allCheckedNodes`.\n      // When `treeCheckStrictly` or internal `searchValue` is set, TreeNode will be unrelated:\n      // - Related: Show the top checked nodes and has children prop.\n      // - Unrelated: Show all the checked nodes.\n      if (searchValue) {\n        var oriKeyList = valueList.map(function (_ref14) {\n          var value = _ref14.value;\n          return valueEntities[value];\n        }).filter(function (entity) {\n          return entity;\n        }).map(function (_ref15) {\n          var key = _ref15.key;\n          return key;\n        });\n\n        var keyList = void 0;\n        if (isAdd) {\n          keyList = Array.from(new Set([].concat(_toConsumableArray(oriKeyList), _toConsumableArray(checkedNodeList.map(function (node) {\n            var _getPropsData = getPropsData(node),\n                value = _getPropsData.value;\n\n            return valueEntities[value].key;\n          })))));\n        } else {\n          keyList = conductCheck([getPropsData(nodeEventInfo.node).eventKey], false, keyEntities, {\n            checkedKeys: oriKeyList\n          }).checkedKeys;\n        }\n\n        checkedNodeList = keyList.map(function (key) {\n          return keyEntities.get(key).node;\n        });\n\n        // Let's follow as not `treeCheckStrictly` format\n        extraInfo.allCheckedNodes = keyList.map(function (key) {\n          return cleanEntity(keyEntities.get(key));\n        });\n      } else if (treeCheckStrictly) {\n        extraInfo.allCheckedNodes = nodeEventInfo.checkedNodes;\n      } else {\n        extraInfo.allCheckedNodes = flatToHierarchy(checkedNodesPositions);\n      }\n\n      this.onValueTrigger(isAdd, checkedNodeList, nodeEventInfo, extraInfo);\n    },\n\n\n    // ==================== Trigger =====================\n\n    onDropdownVisibleChange: function onDropdownVisibleChange(open) {\n      var _$props6 = this.$props,\n          multiple = _$props6.multiple,\n          treeCheckable = _$props6.treeCheckable;\n      var _searchValue = this.$data._searchValue;\n\n      // When set open success and single mode,\n      // we will reset the input content.\n\n      if (open && !multiple && !treeCheckable && _searchValue) {\n        this.setUncontrolledState({\n          _searchValue: '',\n          _filteredTreeNodes: null\n        });\n      }\n      this.setOpenState(open, true);\n    },\n    onSearchInputChange: function onSearchInputChange(event) {\n      var value = event.target.value;\n      var _$data6 = this.$data,\n          treeNodes = _$data6._treeNodes,\n          valueEntities = _$data6._valueEntities;\n      var _$props7 = this.$props,\n          filterTreeNode = _$props7.filterTreeNode,\n          treeNodeFilterProp = _$props7.treeNodeFilterProp;\n\n      this.__emit('update:searchValue', value);\n      this.__emit('search', value);\n\n      var isSet = false;\n\n      if (!this.isSearchValueControlled()) {\n        isSet = this.setUncontrolledState({\n          _searchValue: value\n        });\n        this.setOpenState(true);\n      }\n\n      if (isSet) {\n        // Do the search logic\n        var upperSearchValue = String(value).toUpperCase();\n\n        var filterTreeNodeFn = filterTreeNode;\n        if (filterTreeNode === false) {\n          filterTreeNodeFn = function filterTreeNodeFn() {\n            return true;\n          };\n        } else if (!filterTreeNodeFn) {\n          filterTreeNodeFn = function filterTreeNodeFn(_, node) {\n            var nodeValue = String(getPropsData(node)[treeNodeFilterProp]).toUpperCase();\n            return nodeValue.indexOf(upperSearchValue) !== -1;\n          };\n        }\n\n        this.setState({\n          _filteredTreeNodes: getFilterTree(this.$createElement, treeNodes, value, filterTreeNodeFn, valueEntities, SelectNode)\n        });\n      }\n    },\n    onSearchInputKeyDown: function onSearchInputKeyDown(event) {\n      var _$data7 = this.$data,\n          searchValue = _$data7._searchValue,\n          valueList = _$data7._valueList;\n      var keyCode = event.keyCode;\n\n\n      if (KeyCode.BACKSPACE === keyCode && this.isMultiple() && !searchValue && valueList.length) {\n        var lastValue = valueList[valueList.length - 1].value;\n        this.onMultipleSelectorRemove(event, lastValue);\n      }\n    },\n    onChoiceAnimationLeave: function onChoiceAnimationLeave() {\n      var _this4 = this;\n\n      raf(function () {\n        _this4.forcePopupAlign();\n      });\n    },\n    setPopupRef: function setPopupRef(popup) {\n      this.popup = popup;\n    },\n\n\n    /**\n     * Only update the value which is not in props\n     */\n    setUncontrolledState: function setUncontrolledState(state) {\n      var needSync = false;\n      var newState = {};\n      var props = getOptionProps(this);\n      Object.keys(state).forEach(function (name) {\n        if (name.slice(1) in props) return;\n\n        needSync = true;\n        newState[name] = state[name];\n      });\n\n      if (needSync) {\n        this.setState(newState);\n      }\n\n      return needSync;\n    },\n\n\n    // [Legacy] Origin provide `documentClickClose` which triggered by `Trigger`\n    // Currently `TreeSelect` align the hide popup logic as `Select` which blur to hide.\n    // `documentClickClose` is not accurate anymore. Let's just keep the key word.\n    setOpenState: function setOpenState(open) {\n      var byTrigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var dropdownVisibleChange = this.$props.dropdownVisibleChange;\n\n\n      if (dropdownVisibleChange && dropdownVisibleChange(open, { documentClickClose: !open && byTrigger }) === false) {\n        return;\n      }\n\n      this.setUncontrolledState({ _open: open });\n    },\n\n\n    // Tree checkable is also a multiple case\n    isMultiple: function isMultiple() {\n      var _$props8 = this.$props,\n          multiple = _$props8.multiple,\n          treeCheckable = _$props8.treeCheckable;\n\n      return !!(multiple || treeCheckable);\n    },\n    isLabelInValue: function isLabelInValue() {\n      return _isLabelInValue(this.$props);\n    },\n\n\n    // [Legacy] To align with `Select` component,\n    // We use `searchValue` instead of `inputValue`\n    // but currently still need support that.\n    // Add this method the check if is controlled\n    isSearchValueControlled: function isSearchValueControlled() {\n      var props = getOptionProps(this);\n      var inputValue = props.inputValue;\n\n      if ('searchValue' in props) return true;\n      return 'inputValue' in props && inputValue !== null;\n    },\n    forcePopupAlign: function forcePopupAlign() {\n      var $trigger = this.selectTriggerRef.current;\n      if ($trigger) {\n        $trigger.forcePopupAlign();\n      }\n    },\n    delayForcePopupAlign: function delayForcePopupAlign() {\n      var _this5 = this;\n\n      // Wait 2 frame to avoid dom update & dom algin in the same time\n      // https://github.com/ant-design/ant-design/issues/12031\n      raf(function () {\n        raf(_this5.forcePopupAlign);\n      });\n    },\n\n\n    /**\n     * 1. Update state valueList.\n     * 2. Fire `onChange` event to user.\n     */\n    triggerChange: function triggerChange(missValueList, valueList) {\n      var extraInfo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var _$data8 = this.$data,\n          valueEntities = _$data8._valueEntities,\n          searchValue = _$data8._searchValue,\n          prevSelectorValueList = _$data8._selectorValueList;\n\n      var props = getOptionProps(this);\n      var disabled = props.disabled,\n          treeCheckable = props.treeCheckable,\n          treeCheckStrictly = props.treeCheckStrictly;\n\n      if (disabled) return;\n\n      // Trigger\n      var extra = _extends({\n        // [Legacy] Always return as array contains label & value\n        preValue: prevSelectorValueList.map(function (_ref16) {\n          var label = _ref16.label,\n              value = _ref16.value;\n          return { label: label, value: value };\n        })\n      }, extraInfo);\n\n      // Format value by `treeCheckStrictly`\n      var selectorValueList = formatSelectorValue(valueList, props, valueEntities);\n\n      if (!('value' in props)) {\n        var newState = {\n          _missValueList: missValueList,\n          _valueList: valueList,\n          _selectorValueList: selectorValueList\n        };\n\n        if (searchValue && treeCheckable && !treeCheckStrictly) {\n          newState._searchHalfCheckedKeys = getHalfCheckedKeys(valueList, valueEntities);\n        }\n\n        this.setState(newState);\n      }\n\n      // Only do the logic when `onChange` function provided\n      if (getListeners(this).change) {\n        var connectValueList = void 0;\n\n        // Get value by mode\n        if (this.isMultiple()) {\n          connectValueList = [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList));\n        } else {\n          connectValueList = selectorValueList.slice(0, 1);\n        }\n\n        var labelList = null;\n        var returnValue = void 0;\n\n        if (this.isLabelInValue()) {\n          returnValue = connectValueList.map(function (_ref17) {\n            var label = _ref17.label,\n                value = _ref17.value;\n            return { label: label, value: value };\n          });\n        } else {\n          labelList = [];\n          returnValue = connectValueList.map(function (_ref18) {\n            var label = _ref18.label,\n                value = _ref18.value;\n\n            labelList.push(label);\n            return value;\n          });\n        }\n\n        if (!this.isMultiple()) {\n          returnValue = returnValue[0];\n        }\n        this.__emit('change', returnValue, labelList, extra);\n      }\n    },\n    focus: function focus() {\n      this.selectorRef.current.focus();\n    },\n    blur: function blur() {\n      this.selectorRef.current.blur();\n    }\n  },\n\n  // ===================== Render =====================\n\n  render: function render() {\n    var h = arguments[0];\n    var _$data9 = this.$data,\n        valueList = _$data9._valueList,\n        missValueList = _$data9._missValueList,\n        selectorValueList = _$data9._selectorValueList,\n        searchHalfCheckedKeys = _$data9._searchHalfCheckedKeys,\n        valueEntities = _$data9._valueEntities,\n        keyEntities = _$data9._keyEntities,\n        searchValue = _$data9._searchValue,\n        open = _$data9._open,\n        focused = _$data9._focused,\n        treeNodes = _$data9._treeNodes,\n        filteredTreeNodes = _$data9._filteredTreeNodes;\n\n    var props = getOptionProps(this);\n    var prefixCls = props.prefixCls,\n        treeExpandedKeys = props.treeExpandedKeys;\n\n    var isMultiple = this.isMultiple();\n\n    var passProps = {\n      props: _extends({}, props, {\n        isMultiple: isMultiple,\n        valueList: valueList,\n        searchHalfCheckedKeys: searchHalfCheckedKeys,\n        selectorValueList: [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList)),\n        valueEntities: valueEntities,\n        keyEntities: keyEntities,\n        searchValue: searchValue,\n        upperSearchValue: (searchValue || '').toUpperCase(), // Perf save\n        open: open,\n        focused: focused,\n        dropdownPrefixCls: prefixCls + '-dropdown',\n        ariaId: this.ariaId\n      }),\n      on: _extends({}, getListeners(this), {\n        choiceAnimationLeave: this.onChoiceAnimationLeave\n      }),\n      scopedSlots: this.$scopedSlots\n    };\n    var popupProps = mergeProps(passProps, {\n      props: {\n        treeNodes: treeNodes,\n        filteredTreeNodes: filteredTreeNodes,\n        // Tree expanded control\n        treeExpandedKeys: treeExpandedKeys,\n        __propsSymbol__: Symbol()\n      },\n      on: {\n        treeExpanded: this.delayForcePopupAlign\n      },\n      directives: [{\n        name: 'ant-ref',\n        value: this.setPopupRef\n      }]\n    });\n\n    var Popup = isMultiple ? MultiplePopup : SinglePopup;\n    var $popup = h(Popup, popupProps);\n\n    var Selector = isMultiple ? MultipleSelector : SingleSelector;\n    var $selector = h(Selector, _mergeJSXProps([passProps, {\n      directives: [{\n        name: 'ant-ref',\n        value: this.selectorRef\n      }]\n    }]));\n    var selectTriggerProps = mergeProps(passProps, {\n      props: {\n        popupElement: $popup,\n        dropdownVisibleChange: this.onDropdownVisibleChange\n      },\n      directives: [{\n        name: 'ant-ref',\n        value: this.selectTriggerRef\n      }]\n    });\n    return h(\n      SelectTrigger,\n      selectTriggerProps,\n      [$selector]\n    );\n  }\n};\n\nSelect.TreeNode = SelectNode;\nSelect.SHOW_ALL = SHOW_ALL;\nSelect.SHOW_PARENT = SHOW_PARENT;\nSelect.SHOW_CHILD = SHOW_CHILD;\n\n// Let warning show correct component name\nSelect.name = 'TreeSelect';\n\nexport default Select;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}