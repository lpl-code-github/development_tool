{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport AddBackUp from \"@/components/backup/AddBackUp\";\nexport default {\n  name: \"Backup\",\n  components: {\n    AddBackUp\n  },\n  data() {\n    this.cacheData = data.map(item => ({\n      ...item\n    }));\n    return {\n      openAddScriptModel: false,\n      dbList: [],\n      getDatabaseListFlag: false,\n      columns: [{\n        title: '名称',\n        width: 200,\n        dataIndex: 'name',\n        key: 'name'\n      }, {\n        title: '路径',\n        width: 350,\n        dataIndex: 'path',\n        key: 'path'\n      }, {\n        title: '数据库',\n        width: 200,\n        dataIndex: 'db_name',\n        key: 'db_name',\n        filters: []\n      }, {\n        title: '创建时间',\n        width: 150,\n        dataIndex: 'created_at',\n        key: 'created_at',\n        sorter: (a, b) => new Date(a.created_at) - new Date(b.created_at)\n      }, {\n        title: 'Action',\n        dataIndex: '',\n        key: 'x',\n        scopedSlots: {\n          customRender: 'action'\n        }\n      }],\n      backupList: [],\n      paginationConfig: {\n        defaultCurrent: 1,\n        defaultPageSize: 5\n      },\n      tableData: [],\n      editingKey: ''\n    };\n  },\n  created() {\n    this.getBackupList();\n  },\n  methods: {\n    handleChange(pagination, filters) {\n      console.log(filters);\n      var tagFilterChecked = filters.db_name;\n      if (filters.db_name !== undefined && filters.db_name.length === 0) {\n        this.tableData = this.backupList;\n        return;\n      }\n      if (tagFilterChecked !== undefined) {\n        this.tableData = this.backupList.filter(item => {\n          return tagFilterChecked.includes(item.db_name);\n        });\n      }\n    },\n    async backUp() {\n      await this.getDatabaseList();\n      if (this.getDatabaseListFlag) {\n        this.openAddScriptModel = true;\n      } else {\n        this.$message.error(\"获取数据库列表失败\");\n      }\n    },\n    onSearch(value) {\n      var params = \"?key=\" + value;\n      this.getBackupList(params);\n    },\n    getBackupList(params) {\n      if (params == null) {\n        params = \"\";\n      }\n      this.$request.getDatabaseBackup(params).then(res => {\n        if (res.status === 200) {\n          this.backupList = res.data.data;\n          const dbFilters = [];\n          this.backupList.forEach(item => {\n            const existingTag = dbFilters.find(filter => filter.text === item.db_name);\n            if (!existingTag) {\n              dbFilters.push({\n                text: item.db_name,\n                value: item.db_name\n              });\n            }\n          });\n          this.columns.forEach(item => {\n            if (item.key === 'db_name') {\n              item.filters = dbFilters;\n            }\n          });\n          this.tableData = this.backupList;\n        }\n      });\n    },\n    getModelStatus(status) {\n      this.openAddScriptModel = status;\n    },\n    async getDatabaseList() {\n      await this.$request.getDatabaseList().then(res => {\n        if (res.status === 200) {\n          this.dbList = res.data.data;\n          this.getDatabaseListFlag = true;\n        } else {\n          this.getDatabaseListFlag = false;\n        }\n      });\n    },\n    // table编辑\n    edit(key) {\n      const newData = [...this.data];\n      const target = newData.find(item => key === item.key);\n      this.editingKey = key;\n      if (target) {\n        target.editable = true;\n        this.data = newData;\n      }\n    },\n    save(key) {\n      const newData = [...this.data];\n      const newCacheData = [...this.cacheData];\n      const target = newData.find(item => key === item.key);\n      const targetCache = newCacheData.find(item => key === item.key);\n      if (target && targetCache) {\n        delete target.editable;\n        this.data = newData;\n        Object.assign(targetCache, target);\n        this.cacheData = newCacheData;\n      }\n      this.editingKey = '';\n    },\n    cancel(key) {\n      const newData = [...this.data];\n      const target = newData.find(item => key === item.key);\n      this.editingKey = '';\n      if (target) {\n        Object.assign(target, this.cacheData.find(item => key === item.key));\n        delete target.editable;\n        this.data = newData;\n      }\n    }\n  }\n};","map":{"version":3,"names":["AddBackUp","name","components","data","cacheData","map","item","openAddScriptModel","dbList","getDatabaseListFlag","columns","title","width","dataIndex","key","filters","sorter","a","b","Date","created_at","scopedSlots","customRender","backupList","paginationConfig","defaultCurrent","defaultPageSize","tableData","editingKey","created","getBackupList","methods","handleChange","pagination","console","log","tagFilterChecked","db_name","undefined","length","filter","includes","backUp","getDatabaseList","$message","error","onSearch","value","params","$request","getDatabaseBackup","then","res","status","dbFilters","forEach","existingTag","find","text","push","getModelStatus","edit","newData","target","editable","save","newCacheData","targetCache","Object","assign","cancel"],"sources":["src/views/Backup.vue"],"sourcesContent":["<template>\n  <div>\n    <AddBackUp\n        @updateModelStatus=\"getModelStatus\"\n        :open-flag=\"openAddScriptModel\"\n        :db-list=\"dbList\"\n    >\n    </AddBackUp>\n    <div class=\"my-b-button\">\n      <a-input-search placeholder=\"输入名称或描述搜索\" style=\"width: 200px\" @search=\"onSearch\"/>\n      <a-button type=\"primary\" @click=\"backUp\">\n        一键备份\n      </a-button>\n    </div>\n\n    <div class=\"my-s-table\">\n      <a-table\n          :columns=\"columns\"\n          :data-source=\"tableData\"\n          style=\"height: 40vh\"\n          :pagination=\"paginationConfig\"\n          :scrollToFirstRowOnChange=\"true\"\n          @change=\"handleChange\"\n      >\n\n        <template slot=\"action\" slot-scope=\"text, record, index\">\n          <div class=\"editable-row-operations\">\n        <span v-if=\"record.editable\">\n          <a @click=\"() => save(record.key)\">Save</a>\n          <a-popconfirm title=\"Sure to cancel?\" @confirm=\"() => cancel(record.key)\">\n            <a>Cancel</a>\n          </a-popconfirm>\n        </span>\n            <span v-else>\n          <a :disabled=\"editingKey !== ''\" @click=\"() => edit(record.key)\">Edit</a>\n        </span>\n          </div>\n        </template>\n        <p slot=\"expandedRowRender\" slot-scope=\"record\" style=\"margin: 0\">\n          {{ record.description ? record.description : \"无描述\" }}\n        </p>\n      </a-table>\n    </div>\n  </div>\n</template>\n\n<script>\nimport AddBackUp from \"@/components/backup/AddBackUp\";\n\nexport default {\n  name: \"Backup\",\n  components: {AddBackUp},\n  data() {\n    this.cacheData = data.map(item => ({ ...item }));\n    return {\n      openAddScriptModel: false,\n      dbList: [],\n      getDatabaseListFlag: false,\n      columns: [\n        {title: '名称', width: 200, dataIndex: 'name', key: 'name'},\n        {title: '路径', width: 350, dataIndex: 'path', key: 'path'},\n        {\n          title: '数据库', width: 200, dataIndex: 'db_name',\n          key: 'db_name',\n          filters: []\n        },\n        {\n          title: '创建时间', width: 150, dataIndex: 'created_at',\n          key: 'created_at',\n          sorter: (a, b) => new Date(a.created_at) - new Date(b.created_at),\n        },\n        {title: 'Action', dataIndex: '', key: 'x', scopedSlots: {customRender: 'action'}},\n      ],\n      backupList: [],\n      paginationConfig: {\n        defaultCurrent: 1,\n        defaultPageSize: 5,\n      },\n      tableData: [],\n      editingKey: '',\n    }\n  },\n  created() {\n    this.getBackupList()\n  },\n\n  methods: {\n    handleChange(pagination, filters) {\n      console.log(filters)\n      var tagFilterChecked = filters.db_name\n      if (filters.db_name !== undefined && filters.db_name.length === 0) {\n        this.tableData = this.backupList\n        return\n      }\n      if (tagFilterChecked !== undefined) {\n        this.tableData = this.backupList.filter(item => {\n          return tagFilterChecked.includes(item.db_name);\n        })\n      }\n    },\n    async backUp() {\n      await this.getDatabaseList();\n\n      if (this.getDatabaseListFlag) {\n        this.openAddScriptModel = true\n      } else {\n        this.$message.error(\"获取数据库列表失败\")\n      }\n    },\n    onSearch(value) {\n      var params = \"?key=\" + value\n      this.getBackupList(params)\n    },\n    getBackupList(params) {\n      if (params == null) {\n        params = \"\"\n      }\n      this.$request.getDatabaseBackup(params).then(res => {\n        if (res.status === 200) {\n          this.backupList = res.data.data\n\n          const dbFilters = [];\n\n          this.backupList.forEach(item => {\n            const existingTag = dbFilters.find(filter => filter.text === item.db_name);\n            if (!existingTag) {\n              dbFilters.push({text: item.db_name, value: item.db_name});\n            }\n          })\n          this.columns.forEach(item => {\n            if (item.key === 'db_name') {\n              item.filters = dbFilters\n            }\n          })\n          this.tableData = this.backupList\n        }\n      })\n    },\n    getModelStatus(status) {\n      this.openAddScriptModel = status\n    },\n\n    async getDatabaseList() {\n      await this.$request.getDatabaseList().then(res => {\n        if (res.status === 200) {\n          this.dbList = res.data.data\n          this.getDatabaseListFlag = true\n        } else {\n          this.getDatabaseListFlag = false\n        }\n      })\n    },\n\n    // table编辑\n    edit(key) {\n      const newData = [...this.data];\n      const target = newData.find(item => key === item.key);\n      this.editingKey = key;\n      if (target) {\n        target.editable = true;\n        this.data = newData;\n      }\n    },\n    save(key) {\n      const newData = [...this.data];\n      const newCacheData = [...this.cacheData];\n      const target = newData.find(item => key === item.key);\n      const targetCache = newCacheData.find(item => key === item.key);\n      if (target && targetCache) {\n        delete target.editable;\n        this.data = newData;\n        Object.assign(targetCache, target);\n        this.cacheData = newCacheData;\n      }\n      this.editingKey = '';\n    },\n    cancel(key) {\n      const newData = [...this.data];\n      const target = newData.find(item => key === item.key);\n      this.editingKey = '';\n      if (target) {\n        Object.assign(target, this.cacheData.find(item => key === item.key));\n        delete target.editable;\n        this.data = newData;\n      }\n    },\n  }\n}\n</script>\n\n<style scoped>\n.my-b-button {\n  margin-top: 10px;\n  display: flex;\n  justify-content: space-between;\n}\n\n.my-s-table {\n  margin-top: 10px;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}