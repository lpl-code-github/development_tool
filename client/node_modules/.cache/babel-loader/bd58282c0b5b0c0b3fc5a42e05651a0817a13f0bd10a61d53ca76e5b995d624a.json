{"ast":null,"code":"import _mergeJSXProps from 'babel-helper-vue-jsx-merge-props';\nimport _extends from 'babel-runtime/helpers/extends';\nimport * as moment from 'moment';\nimport interopDefault from '../_util/interopDefault';\nimport { initDefaultProps, getListeners } from '../_util/props-util';\nimport Statistic, { StatisticProps } from './Statistic';\nimport { formatCountdown as _formatCountdown } from './utils';\nvar REFRESH_INTERVAL = 1000 / 30;\nfunction getTime(value) {\n  return interopDefault(moment)(value).valueOf();\n}\nexport default {\n  name: 'AStatisticCountdown',\n  props: initDefaultProps(StatisticProps, {\n    format: 'HH:mm:ss'\n  }),\n  created: function created() {\n    this.countdownId = undefined;\n  },\n  mounted: function mounted() {\n    this.syncTimer();\n  },\n  updated: function updated() {\n    this.syncTimer();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.stopTimer();\n  },\n  methods: {\n    syncTimer: function syncTimer() {\n      var value = this.$props.value;\n      var timestamp = getTime(value);\n      if (timestamp >= Date.now()) {\n        this.startTimer();\n      } else {\n        this.stopTimer();\n      }\n    },\n    startTimer: function startTimer() {\n      var _this = this;\n      if (this.countdownId) return;\n      this.countdownId = window.setInterval(function () {\n        _this.$refs.statistic.$forceUpdate();\n        _this.syncTimer();\n      }, REFRESH_INTERVAL);\n    },\n    stopTimer: function stopTimer() {\n      var value = this.$props.value;\n      if (this.countdownId) {\n        clearInterval(this.countdownId);\n        this.countdownId = undefined;\n        var timestamp = getTime(value);\n        if (timestamp < Date.now()) {\n          this.$emit('finish');\n        }\n      }\n    },\n    formatCountdown: function formatCountdown(_ref) {\n      var value = _ref.value,\n        config = _ref.config;\n      var format = this.$props.format;\n      return _formatCountdown(value, _extends({}, config, {\n        format: format\n      }));\n    },\n    valueRenderHtml: function valueRenderHtml(node) {\n      return node;\n    }\n  },\n  render: function render() {\n    var h = arguments[0];\n    return h(Statistic, _mergeJSXProps([{\n      ref: 'statistic'\n    }, {\n      props: _extends({}, this.$props, {\n        valueRender: this.valueRenderHtml,\n        formatter: this.formatCountdown\n      }),\n      on: getListeners(this)\n    }]));\n  }\n};","map":{"version":3,"names":["_mergeJSXProps","_extends","moment","interopDefault","initDefaultProps","getListeners","Statistic","StatisticProps","formatCountdown","_formatCountdown","REFRESH_INTERVAL","getTime","value","valueOf","name","props","format","created","countdownId","undefined","mounted","syncTimer","updated","beforeDestroy","stopTimer","methods","$props","timestamp","Date","now","startTimer","_this","window","setInterval","$refs","statistic","$forceUpdate","clearInterval","$emit","_ref","config","valueRenderHtml","node","render","h","arguments","ref","valueRender","formatter","on"],"sources":["/Users/lpl/工作/Teamsupport/develop_help/client/node_modules/ant-design-vue/es/statistic/Countdown.js"],"sourcesContent":["import _mergeJSXProps from 'babel-helper-vue-jsx-merge-props';\nimport _extends from 'babel-runtime/helpers/extends';\nimport * as moment from 'moment';\nimport interopDefault from '../_util/interopDefault';\nimport { initDefaultProps, getListeners } from '../_util/props-util';\nimport Statistic, { StatisticProps } from './Statistic';\nimport { formatCountdown as _formatCountdown } from './utils';\n\nvar REFRESH_INTERVAL = 1000 / 30;\n\nfunction getTime(value) {\n  return interopDefault(moment)(value).valueOf();\n}\n\nexport default {\n  name: 'AStatisticCountdown',\n  props: initDefaultProps(StatisticProps, {\n    format: 'HH:mm:ss'\n  }),\n\n  created: function created() {\n    this.countdownId = undefined;\n  },\n  mounted: function mounted() {\n    this.syncTimer();\n  },\n  updated: function updated() {\n    this.syncTimer();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.stopTimer();\n  },\n\n\n  methods: {\n    syncTimer: function syncTimer() {\n      var value = this.$props.value;\n\n      var timestamp = getTime(value);\n      if (timestamp >= Date.now()) {\n        this.startTimer();\n      } else {\n        this.stopTimer();\n      }\n    },\n    startTimer: function startTimer() {\n      var _this = this;\n\n      if (this.countdownId) return;\n      this.countdownId = window.setInterval(function () {\n        _this.$refs.statistic.$forceUpdate();\n        _this.syncTimer();\n      }, REFRESH_INTERVAL);\n    },\n    stopTimer: function stopTimer() {\n      var value = this.$props.value;\n\n      if (this.countdownId) {\n        clearInterval(this.countdownId);\n        this.countdownId = undefined;\n\n        var timestamp = getTime(value);\n        if (timestamp < Date.now()) {\n          this.$emit('finish');\n        }\n      }\n    },\n    formatCountdown: function formatCountdown(_ref) {\n      var value = _ref.value,\n          config = _ref.config;\n      var format = this.$props.format;\n\n      return _formatCountdown(value, _extends({}, config, { format: format }));\n    },\n\n\n    valueRenderHtml: function valueRenderHtml(node) {\n      return node;\n    }\n  },\n\n  render: function render() {\n    var h = arguments[0];\n\n    return h(Statistic, _mergeJSXProps([{\n      ref: 'statistic'\n    }, {\n      props: _extends({}, this.$props, {\n        valueRender: this.valueRenderHtml,\n        formatter: this.formatCountdown\n      }),\n      on: getListeners(this)\n    }]));\n  }\n};"],"mappings":"AAAA,OAAOA,cAAc,MAAM,kCAAkC;AAC7D,OAAOC,QAAQ,MAAM,+BAA+B;AACpD,OAAO,KAAKC,MAAM,MAAM,QAAQ;AAChC,OAAOC,cAAc,MAAM,yBAAyB;AACpD,SAASC,gBAAgB,EAAEC,YAAY,QAAQ,qBAAqB;AACpE,OAAOC,SAAS,IAAIC,cAAc,QAAQ,aAAa;AACvD,SAASC,eAAe,IAAIC,gBAAgB,QAAQ,SAAS;AAE7D,IAAIC,gBAAgB,GAAG,IAAI,GAAG,EAAE;AAEhC,SAASC,OAAOA,CAACC,KAAK,EAAE;EACtB,OAAOT,cAAc,CAACD,MAAM,CAAC,CAACU,KAAK,CAAC,CAACC,OAAO,CAAC,CAAC;AAChD;AAEA,eAAe;EACbC,IAAI,EAAE,qBAAqB;EAC3BC,KAAK,EAAEX,gBAAgB,CAACG,cAAc,EAAE;IACtCS,MAAM,EAAE;EACV,CAAC,CAAC;EAEFC,OAAO,EAAE,SAASA,OAAOA,CAAA,EAAG;IAC1B,IAAI,CAACC,WAAW,GAAGC,SAAS;EAC9B,CAAC;EACDC,OAAO,EAAE,SAASA,OAAOA,CAAA,EAAG;IAC1B,IAAI,CAACC,SAAS,CAAC,CAAC;EAClB,CAAC;EACDC,OAAO,EAAE,SAASA,OAAOA,CAAA,EAAG;IAC1B,IAAI,CAACD,SAAS,CAAC,CAAC;EAClB,CAAC;EACDE,aAAa,EAAE,SAASA,aAAaA,CAAA,EAAG;IACtC,IAAI,CAACC,SAAS,CAAC,CAAC;EAClB,CAAC;EAGDC,OAAO,EAAE;IACPJ,SAAS,EAAE,SAASA,SAASA,CAAA,EAAG;MAC9B,IAAIT,KAAK,GAAG,IAAI,CAACc,MAAM,CAACd,KAAK;MAE7B,IAAIe,SAAS,GAAGhB,OAAO,CAACC,KAAK,CAAC;MAC9B,IAAIe,SAAS,IAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;QAC3B,IAAI,CAACC,UAAU,CAAC,CAAC;MACnB,CAAC,MAAM;QACL,IAAI,CAACN,SAAS,CAAC,CAAC;MAClB;IACF,CAAC;IACDM,UAAU,EAAE,SAASA,UAAUA,CAAA,EAAG;MAChC,IAAIC,KAAK,GAAG,IAAI;MAEhB,IAAI,IAAI,CAACb,WAAW,EAAE;MACtB,IAAI,CAACA,WAAW,GAAGc,MAAM,CAACC,WAAW,CAAC,YAAY;QAChDF,KAAK,CAACG,KAAK,CAACC,SAAS,CAACC,YAAY,CAAC,CAAC;QACpCL,KAAK,CAACV,SAAS,CAAC,CAAC;MACnB,CAAC,EAAEX,gBAAgB,CAAC;IACtB,CAAC;IACDc,SAAS,EAAE,SAASA,SAASA,CAAA,EAAG;MAC9B,IAAIZ,KAAK,GAAG,IAAI,CAACc,MAAM,CAACd,KAAK;MAE7B,IAAI,IAAI,CAACM,WAAW,EAAE;QACpBmB,aAAa,CAAC,IAAI,CAACnB,WAAW,CAAC;QAC/B,IAAI,CAACA,WAAW,GAAGC,SAAS;QAE5B,IAAIQ,SAAS,GAAGhB,OAAO,CAACC,KAAK,CAAC;QAC9B,IAAIe,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;UAC1B,IAAI,CAACS,KAAK,CAAC,QAAQ,CAAC;QACtB;MACF;IACF,CAAC;IACD9B,eAAe,EAAE,SAASA,eAAeA,CAAC+B,IAAI,EAAE;MAC9C,IAAI3B,KAAK,GAAG2B,IAAI,CAAC3B,KAAK;QAClB4B,MAAM,GAAGD,IAAI,CAACC,MAAM;MACxB,IAAIxB,MAAM,GAAG,IAAI,CAACU,MAAM,CAACV,MAAM;MAE/B,OAAOP,gBAAgB,CAACG,KAAK,EAAEX,QAAQ,CAAC,CAAC,CAAC,EAAEuC,MAAM,EAAE;QAAExB,MAAM,EAAEA;MAAO,CAAC,CAAC,CAAC;IAC1E,CAAC;IAGDyB,eAAe,EAAE,SAASA,eAAeA,CAACC,IAAI,EAAE;MAC9C,OAAOA,IAAI;IACb;EACF,CAAC;EAEDC,MAAM,EAAE,SAASA,MAAMA,CAAA,EAAG;IACxB,IAAIC,CAAC,GAAGC,SAAS,CAAC,CAAC,CAAC;IAEpB,OAAOD,CAAC,CAACtC,SAAS,EAAEN,cAAc,CAAC,CAAC;MAClC8C,GAAG,EAAE;IACP,CAAC,EAAE;MACD/B,KAAK,EAAEd,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAACyB,MAAM,EAAE;QAC/BqB,WAAW,EAAE,IAAI,CAACN,eAAe;QACjCO,SAAS,EAAE,IAAI,CAACxC;MAClB,CAAC,CAAC;MACFyC,EAAE,EAAE5C,YAAY,CAAC,IAAI;IACvB,CAAC,CAAC,CAAC,CAAC;EACN;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}