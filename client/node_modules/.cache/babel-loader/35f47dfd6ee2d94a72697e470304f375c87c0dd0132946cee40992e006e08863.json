{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode } from \"vue\";\nimport DownOutlined from \"@ant-design/icons-vue/es/icons/DownOutlined\";\nimport { INTERNAL_COL_DEFINE } from '../../vc-table';\nimport { arrAdd, arrDel } from '../../vc-tree/util';\nimport { conductCheck } from '../../vc-tree/utils/conductUtil';\nimport { convertDataToEntities } from '../../vc-tree/utils/treeUtil';\nimport devWarning from '../../vc-util/devWarning';\nimport useMergedState from '../../_util/hooks/useMergedState';\nimport useState from '../../_util/hooks/useState';\nimport { watchEffect, computed, shallowRef } from 'vue';\nimport Checkbox from '../../checkbox';\nimport Dropdown from '../../dropdown';\nimport Menu from '../../menu';\nimport Radio from '../../radio';\nimport useMaxLevel from '../../vc-tree/useMaxLevel';\n// TODO: warning if use ajax!!!\nexport const SELECTION_COLUMN = {};\nexport const SELECTION_ALL = 'SELECT_ALL';\nexport const SELECTION_INVERT = 'SELECT_INVERT';\nexport const SELECTION_NONE = 'SELECT_NONE';\nconst EMPTY_LIST = [];\nfunction flattenData(childrenColumnName, data) {\n  let list = [];\n  (data || []).forEach(record => {\n    list.push(record);\n    if (record && typeof record === 'object' && childrenColumnName in record) {\n      list = [...list, ...flattenData(childrenColumnName, record[childrenColumnName])];\n    }\n  });\n  return list;\n}\nexport default function useSelection(rowSelectionRef, configRef) {\n  const mergedRowSelection = computed(() => {\n    const temp = rowSelectionRef.value || {};\n    const {\n      checkStrictly = true\n    } = temp;\n    return _extends(_extends({}, temp), {\n      checkStrictly\n    });\n  });\n  // ========================= Keys =========================\n  const [mergedSelectedKeys, setMergedSelectedKeys] = useMergedState(mergedRowSelection.value.selectedRowKeys || mergedRowSelection.value.defaultSelectedRowKeys || EMPTY_LIST, {\n    value: computed(() => mergedRowSelection.value.selectedRowKeys)\n  });\n  // ======================== Caches ========================\n  const preserveRecordsRef = shallowRef(new Map());\n  const updatePreserveRecordsCache = keys => {\n    if (mergedRowSelection.value.preserveSelectedRowKeys) {\n      const newCache = new Map();\n      // Keep key if mark as preserveSelectedRowKeys\n      keys.forEach(key => {\n        let record = configRef.getRecordByKey(key);\n        if (!record && preserveRecordsRef.value.has(key)) {\n          record = preserveRecordsRef.value.get(key);\n        }\n        newCache.set(key, record);\n      });\n      // Refresh to new cache\n      preserveRecordsRef.value = newCache;\n    }\n  };\n  watchEffect(() => {\n    updatePreserveRecordsCache(mergedSelectedKeys.value);\n  });\n  const keyEntities = computed(() => mergedRowSelection.value.checkStrictly ? null : convertDataToEntities(configRef.data.value, {\n    externalGetKey: configRef.getRowKey.value,\n    childrenPropName: configRef.childrenColumnName.value\n  }).keyEntities);\n  // Get flatten data\n  const flattedData = computed(() => flattenData(configRef.childrenColumnName.value, configRef.pageData.value));\n  // Get all checkbox props\n  const checkboxPropsMap = computed(() => {\n    const map = new Map();\n    const getRowKey = configRef.getRowKey.value;\n    const getCheckboxProps = mergedRowSelection.value.getCheckboxProps;\n    flattedData.value.forEach((record, index) => {\n      const key = getRowKey(record, index);\n      const checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};\n      map.set(key, checkboxProps);\n      if (process.env.NODE_ENV !== 'production' && ('checked' in checkboxProps || 'defaultChecked' in checkboxProps)) {\n        devWarning(false, 'Table', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.');\n      }\n    });\n    return map;\n  });\n  const {\n    maxLevel,\n    levelEntities\n  } = useMaxLevel(keyEntities);\n  const isCheckboxDisabled = r => {\n    var _a;\n    return !!((_a = checkboxPropsMap.value.get(configRef.getRowKey.value(r))) === null || _a === void 0 ? void 0 : _a.disabled);\n  };\n  const selectKeysState = computed(() => {\n    if (mergedRowSelection.value.checkStrictly) {\n      return [mergedSelectedKeys.value || [], []];\n    }\n    const {\n      checkedKeys,\n      halfCheckedKeys\n    } = conductCheck(mergedSelectedKeys.value, true, keyEntities.value, maxLevel.value, levelEntities.value, isCheckboxDisabled);\n    return [checkedKeys || [], halfCheckedKeys];\n  });\n  const derivedSelectedKeys = computed(() => selectKeysState.value[0]);\n  const derivedHalfSelectedKeys = computed(() => selectKeysState.value[1]);\n  const derivedSelectedKeySet = computed(() => {\n    const keys = mergedRowSelection.value.type === 'radio' ? derivedSelectedKeys.value.slice(0, 1) : derivedSelectedKeys.value;\n    return new Set(keys);\n  });\n  const derivedHalfSelectedKeySet = computed(() => mergedRowSelection.value.type === 'radio' ? new Set() : new Set(derivedHalfSelectedKeys.value));\n  // Save last selected key to enable range selection\n  const [lastSelectedKey, setLastSelectedKey] = useState(null);\n  // // Reset if rowSelection reset\n  // we use computed to reset, donot need setMergedSelectedKeys again like react\n  // https://github.com/vueComponent/ant-design-vue/issues/4885\n  // watchEffect(() => {\n  //   if (!rowSelectionRef.value) {\n  //     setMergedSelectedKeys([]);\n  //   }\n  // });\n  const setSelectedKeys = keys => {\n    let availableKeys;\n    let records;\n    updatePreserveRecordsCache(keys);\n    const {\n      preserveSelectedRowKeys,\n      onChange: onSelectionChange\n    } = mergedRowSelection.value;\n    const {\n      getRecordByKey\n    } = configRef;\n    if (preserveSelectedRowKeys) {\n      availableKeys = keys;\n      records = keys.map(key => preserveRecordsRef.value.get(key));\n    } else {\n      // Filter key which not exist in the `dataSource`\n      availableKeys = [];\n      records = [];\n      keys.forEach(key => {\n        const record = getRecordByKey(key);\n        if (record !== undefined) {\n          availableKeys.push(key);\n          records.push(record);\n        }\n      });\n    }\n    setMergedSelectedKeys(availableKeys);\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records);\n  };\n  // ====================== Selections ======================\n  // Trigger single `onSelect` event\n  const triggerSingleSelection = (key, selected, keys, event) => {\n    const {\n      onSelect\n    } = mergedRowSelection.value;\n    const {\n      getRecordByKey\n    } = configRef || {};\n    if (onSelect) {\n      const rows = keys.map(k => getRecordByKey(k));\n      onSelect(getRecordByKey(key), selected, rows, event);\n    }\n    setSelectedKeys(keys);\n  };\n  const mergedSelections = computed(() => {\n    const {\n      onSelectInvert,\n      onSelectNone,\n      selections,\n      hideSelectAll\n    } = mergedRowSelection.value;\n    const {\n      data,\n      pageData,\n      getRowKey,\n      locale: tableLocale\n    } = configRef;\n    if (!selections || hideSelectAll) {\n      return null;\n    }\n    const selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;\n    return selectionList.map(selection => {\n      if (selection === SELECTION_ALL) {\n        return {\n          key: 'all',\n          text: tableLocale.value.selectionAll,\n          onSelect() {\n            setSelectedKeys(data.value.map((record, index) => getRowKey.value(record, index)).filter(key => {\n              const checkProps = checkboxPropsMap.value.get(key);\n              return !(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled) || derivedSelectedKeySet.value.has(key);\n            }));\n          }\n        };\n      }\n      if (selection === SELECTION_INVERT) {\n        return {\n          key: 'invert',\n          text: tableLocale.value.selectInvert,\n          onSelect() {\n            const keySet = new Set(derivedSelectedKeySet.value);\n            pageData.value.forEach((record, index) => {\n              const key = getRowKey.value(record, index);\n              const checkProps = checkboxPropsMap.value.get(key);\n              if (!(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled)) {\n                if (keySet.has(key)) {\n                  keySet.delete(key);\n                } else {\n                  keySet.add(key);\n                }\n              }\n            });\n            const keys = Array.from(keySet);\n            if (onSelectInvert) {\n              devWarning(false, 'Table', '`onSelectInvert` will be removed in future. Please use `onChange` instead.');\n              onSelectInvert(keys);\n            }\n            setSelectedKeys(keys);\n          }\n        };\n      }\n      if (selection === SELECTION_NONE) {\n        return {\n          key: 'none',\n          text: tableLocale.value.selectNone,\n          onSelect() {\n            onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();\n            setSelectedKeys(Array.from(derivedSelectedKeySet.value).filter(key => {\n              const checkProps = checkboxPropsMap.value.get(key);\n              return checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled;\n            }));\n          }\n        };\n      }\n      return selection;\n    });\n  });\n  const flattedDataLength = computed(() => flattedData.value.length);\n  // ======================= Columns ========================\n  const transformColumns = columns => {\n    var _a;\n    const {\n      onSelectAll,\n      onSelectMultiple,\n      columnWidth: selectionColWidth,\n      type: selectionType,\n      fixed,\n      renderCell: customizeRenderCell,\n      hideSelectAll,\n      checkStrictly\n    } = mergedRowSelection.value;\n    const {\n      prefixCls,\n      getRecordByKey,\n      getRowKey,\n      expandType,\n      getPopupContainer\n    } = configRef;\n    if (!rowSelectionRef.value) {\n      if (process.env.NODE_ENV !== 'production') {\n        devWarning(!columns.includes(SELECTION_COLUMN), 'Table', '`rowSelection` is not config but `SELECTION_COLUMN` exists in the `columns`.');\n      }\n      return columns.filter(col => col !== SELECTION_COLUMN);\n    }\n    // Support selection\n    let cloneColumns = columns.slice();\n    const keySet = new Set(derivedSelectedKeySet.value);\n    // Record key only need check with enabled\n    const recordKeys = flattedData.value.map(getRowKey.value).filter(key => !checkboxPropsMap.value.get(key).disabled);\n    const checkedCurrentAll = recordKeys.every(key => keySet.has(key));\n    const checkedCurrentSome = recordKeys.some(key => keySet.has(key));\n    const onSelectAllChange = () => {\n      const changeKeys = [];\n      if (checkedCurrentAll) {\n        recordKeys.forEach(key => {\n          keySet.delete(key);\n          changeKeys.push(key);\n        });\n      } else {\n        recordKeys.forEach(key => {\n          if (!keySet.has(key)) {\n            keySet.add(key);\n            changeKeys.push(key);\n          }\n        });\n      }\n      const keys = Array.from(keySet);\n      onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys.map(k => getRecordByKey(k)), changeKeys.map(k => getRecordByKey(k)));\n      setSelectedKeys(keys);\n    };\n    // ===================== Render =====================\n    // Title Cell\n    let title;\n    if (selectionType !== 'radio') {\n      let customizeSelections;\n      if (mergedSelections.value) {\n        const menu = _createVNode(Menu, {\n          \"getPopupContainer\": getPopupContainer.value\n        }, {\n          default: () => [mergedSelections.value.map((selection, index) => {\n            const {\n              key,\n              text,\n              onSelect: onSelectionClick\n            } = selection;\n            return _createVNode(Menu.Item, {\n              \"key\": key || index,\n              \"onClick\": () => {\n                onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);\n              }\n            }, {\n              default: () => [text]\n            });\n          })]\n        });\n        customizeSelections = _createVNode(\"div\", {\n          \"class\": `${prefixCls.value}-selection-extra`\n        }, [_createVNode(Dropdown, {\n          \"overlay\": menu,\n          \"getPopupContainer\": getPopupContainer.value\n        }, {\n          default: () => [_createVNode(\"span\", null, [_createVNode(DownOutlined, null, null)])]\n        })]);\n      }\n      const allDisabledData = flattedData.value.map((record, index) => {\n        const key = getRowKey.value(record, index);\n        const checkboxProps = checkboxPropsMap.value.get(key) || {};\n        return _extends({\n          checked: keySet.has(key)\n        }, checkboxProps);\n      }).filter(_ref => {\n        let {\n          disabled\n        } = _ref;\n        return disabled;\n      });\n      const allDisabled = !!allDisabledData.length && allDisabledData.length === flattedDataLength.value;\n      const allDisabledAndChecked = allDisabled && allDisabledData.every(_ref2 => {\n        let {\n          checked\n        } = _ref2;\n        return checked;\n      });\n      const allDisabledSomeChecked = allDisabled && allDisabledData.some(_ref3 => {\n        let {\n          checked\n        } = _ref3;\n        return checked;\n      });\n      title = !hideSelectAll && _createVNode(\"div\", {\n        \"class\": `${prefixCls.value}-selection`\n      }, [_createVNode(Checkbox, {\n        \"checked\": !allDisabled ? !!flattedDataLength.value && checkedCurrentAll : allDisabledAndChecked,\n        \"indeterminate\": !allDisabled ? !checkedCurrentAll && checkedCurrentSome : !allDisabledAndChecked && allDisabledSomeChecked,\n        \"onChange\": onSelectAllChange,\n        \"disabled\": flattedDataLength.value === 0 || allDisabled,\n        \"aria-label\": customizeSelections ? 'Custom selection' : 'Select all',\n        \"skipGroup\": true\n      }, null), customizeSelections]);\n    }\n    // Body Cell\n    let renderCell;\n    if (selectionType === 'radio') {\n      renderCell = _ref4 => {\n        let {\n          record,\n          index\n        } = _ref4;\n        const key = getRowKey.value(record, index);\n        const checked = keySet.has(key);\n        return {\n          node: _createVNode(Radio, _objectSpread(_objectSpread({}, checkboxPropsMap.value.get(key)), {}, {\n            \"checked\": checked,\n            \"onClick\": e => e.stopPropagation(),\n            \"onChange\": event => {\n              if (!keySet.has(key)) {\n                triggerSingleSelection(key, true, [key], event.nativeEvent);\n              }\n            }\n          }), null),\n          checked\n        };\n      };\n    } else {\n      renderCell = _ref5 => {\n        let {\n          record,\n          index\n        } = _ref5;\n        var _a;\n        const key = getRowKey.value(record, index);\n        const checked = keySet.has(key);\n        const indeterminate = derivedHalfSelectedKeySet.value.has(key);\n        const checkboxProps = checkboxPropsMap.value.get(key);\n        let mergedIndeterminate;\n        if (expandType.value === 'nest') {\n          mergedIndeterminate = indeterminate;\n          devWarning(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== 'boolean', 'Table', 'set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.');\n        } else {\n          mergedIndeterminate = (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a !== void 0 ? _a : indeterminate;\n        }\n        // Record checked\n        return {\n          node: _createVNode(Checkbox, _objectSpread(_objectSpread({}, checkboxProps), {}, {\n            \"indeterminate\": mergedIndeterminate,\n            \"checked\": checked,\n            \"skipGroup\": true,\n            \"onClick\": e => e.stopPropagation(),\n            \"onChange\": _ref6 => {\n              let {\n                nativeEvent\n              } = _ref6;\n              const {\n                shiftKey\n              } = nativeEvent;\n              let startIndex = -1;\n              let endIndex = -1;\n              // Get range of this\n              if (shiftKey && checkStrictly) {\n                const pointKeys = new Set([lastSelectedKey.value, key]);\n                recordKeys.some((recordKey, recordIndex) => {\n                  if (pointKeys.has(recordKey)) {\n                    if (startIndex === -1) {\n                      startIndex = recordIndex;\n                    } else {\n                      endIndex = recordIndex;\n                      return true;\n                    }\n                  }\n                  return false;\n                });\n              }\n              if (endIndex !== -1 && startIndex !== endIndex && checkStrictly) {\n                // Batch update selections\n                const rangeKeys = recordKeys.slice(startIndex, endIndex + 1);\n                const changedKeys = [];\n                if (checked) {\n                  rangeKeys.forEach(recordKey => {\n                    if (keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.delete(recordKey);\n                    }\n                  });\n                } else {\n                  rangeKeys.forEach(recordKey => {\n                    if (!keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.add(recordKey);\n                    }\n                  });\n                }\n                const keys = Array.from(keySet);\n                onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys.map(recordKey => getRecordByKey(recordKey)), changedKeys.map(recordKey => getRecordByKey(recordKey)));\n                setSelectedKeys(keys);\n              } else {\n                // Single record selected\n                const originCheckedKeys = derivedSelectedKeys.value;\n                if (checkStrictly) {\n                  const checkedKeys = checked ? arrDel(originCheckedKeys, key) : arrAdd(originCheckedKeys, key);\n                  triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);\n                } else {\n                  // Always fill first\n                  const result = conductCheck([...originCheckedKeys, key], true, keyEntities.value, maxLevel.value, levelEntities.value, isCheckboxDisabled);\n                  const {\n                    checkedKeys,\n                    halfCheckedKeys\n                  } = result;\n                  let nextCheckedKeys = checkedKeys;\n                  // If remove, we do it again to correction\n                  if (checked) {\n                    const tempKeySet = new Set(checkedKeys);\n                    tempKeySet.delete(key);\n                    nextCheckedKeys = conductCheck(Array.from(tempKeySet), {\n                      checked: false,\n                      halfCheckedKeys\n                    }, keyEntities.value, maxLevel.value, levelEntities.value, isCheckboxDisabled).checkedKeys;\n                  }\n                  triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);\n                }\n              }\n              setLastSelectedKey(key);\n            }\n          }), null),\n          checked\n        };\n      };\n    }\n    const renderSelectionCell = _ref7 => {\n      let {\n        record,\n        index\n      } = _ref7;\n      const {\n        node,\n        checked\n      } = renderCell({\n        record,\n        index\n      });\n      if (customizeRenderCell) {\n        return customizeRenderCell(checked, record, index, node);\n      }\n      return node;\n    };\n    // Insert selection column if not exist\n    if (!cloneColumns.includes(SELECTION_COLUMN)) {\n      // Always after expand icon\n      if (cloneColumns.findIndex(col => {\n        var _a;\n        return ((_a = col[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN';\n      }) === 0) {\n        const [expandColumn, ...restColumns] = cloneColumns;\n        cloneColumns = [expandColumn, SELECTION_COLUMN, ...restColumns];\n      } else {\n        // Normal insert at first column\n        cloneColumns = [SELECTION_COLUMN, ...cloneColumns];\n      }\n    }\n    // Deduplicate selection column\n    const selectionColumnIndex = cloneColumns.indexOf(SELECTION_COLUMN);\n    if (process.env.NODE_ENV !== 'production' && cloneColumns.filter(col => col === SELECTION_COLUMN).length > 1) {\n      devWarning(false, 'Table', 'Multiple `SELECTION_COLUMN` exist in `columns`.');\n    }\n    cloneColumns = cloneColumns.filter((column, index) => column !== SELECTION_COLUMN || index === selectionColumnIndex);\n    // Fixed column logic\n    const prevCol = cloneColumns[selectionColumnIndex - 1];\n    const nextCol = cloneColumns[selectionColumnIndex + 1];\n    let mergedFixed = fixed;\n    if (mergedFixed === undefined) {\n      if ((nextCol === null || nextCol === void 0 ? void 0 : nextCol.fixed) !== undefined) {\n        mergedFixed = nextCol.fixed;\n      } else if ((prevCol === null || prevCol === void 0 ? void 0 : prevCol.fixed) !== undefined) {\n        mergedFixed = prevCol.fixed;\n      }\n    }\n    if (mergedFixed && prevCol && ((_a = prevCol[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN' && prevCol.fixed === undefined) {\n      prevCol.fixed = mergedFixed;\n    }\n    // Replace with real selection column\n    const selectionColumn = {\n      fixed: mergedFixed,\n      width: selectionColWidth,\n      className: `${prefixCls.value}-selection-column`,\n      title: mergedRowSelection.value.columnTitle || title,\n      customRender: renderSelectionCell,\n      [INTERNAL_COL_DEFINE]: {\n        class: `${prefixCls.value}-selection-col`\n      }\n    };\n    return cloneColumns.map(col => col === SELECTION_COLUMN ? selectionColumn : col);\n  };\n  return [transformColumns, derivedSelectedKeySet];\n}","map":{"version":3,"names":["_objectSpread","_extends","createVNode","_createVNode","DownOutlined","INTERNAL_COL_DEFINE","arrAdd","arrDel","conductCheck","convertDataToEntities","devWarning","useMergedState","useState","watchEffect","computed","shallowRef","Checkbox","Dropdown","Menu","Radio","useMaxLevel","SELECTION_COLUMN","SELECTION_ALL","SELECTION_INVERT","SELECTION_NONE","EMPTY_LIST","flattenData","childrenColumnName","data","list","forEach","record","push","useSelection","rowSelectionRef","configRef","mergedRowSelection","temp","value","checkStrictly","mergedSelectedKeys","setMergedSelectedKeys","selectedRowKeys","defaultSelectedRowKeys","preserveRecordsRef","Map","updatePreserveRecordsCache","keys","preserveSelectedRowKeys","newCache","key","getRecordByKey","has","get","set","keyEntities","externalGetKey","getRowKey","childrenPropName","flattedData","pageData","checkboxPropsMap","map","getCheckboxProps","index","checkboxProps","process","env","NODE_ENV","maxLevel","levelEntities","isCheckboxDisabled","r","_a","disabled","selectKeysState","checkedKeys","halfCheckedKeys","derivedSelectedKeys","derivedHalfSelectedKeys","derivedSelectedKeySet","type","slice","Set","derivedHalfSelectedKeySet","lastSelectedKey","setLastSelectedKey","setSelectedKeys","availableKeys","records","onChange","onSelectionChange","undefined","triggerSingleSelection","selected","event","onSelect","rows","k","mergedSelections","onSelectInvert","onSelectNone","selections","hideSelectAll","locale","tableLocale","selectionList","selection","text","selectionAll","filter","checkProps","selectInvert","keySet","delete","add","Array","from","selectNone","flattedDataLength","length","transformColumns","columns","onSelectAll","onSelectMultiple","columnWidth","selectionColWidth","selectionType","fixed","renderCell","customizeRenderCell","prefixCls","expandType","getPopupContainer","includes","col","cloneColumns","recordKeys","checkedCurrentAll","every","checkedCurrentSome","some","onSelectAllChange","changeKeys","title","customizeSelections","menu","default","onSelectionClick","Item","onClick","allDisabledData","checked","_ref","allDisabled","allDisabledAndChecked","_ref2","allDisabledSomeChecked","_ref3","_ref4","node","e","stopPropagation","nativeEvent","_ref5","indeterminate","mergedIndeterminate","_ref6","shiftKey","startIndex","endIndex","pointKeys","recordKey","recordIndex","rangeKeys","changedKeys","originCheckedKeys","result","nextCheckedKeys","tempKeySet","renderSelectionCell","_ref7","findIndex","columnType","expandColumn","restColumns","selectionColumnIndex","indexOf","column","prevCol","nextCol","mergedFixed","selectionColumn","width","className","columnTitle","customRender","class"],"sources":["/Users/lpl/工作/Teamsupport/develop_help/node_modules/ant-design-vue/es/table/hooks/useSelection.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode } from \"vue\";\nimport DownOutlined from \"@ant-design/icons-vue/es/icons/DownOutlined\";\nimport { INTERNAL_COL_DEFINE } from '../../vc-table';\nimport { arrAdd, arrDel } from '../../vc-tree/util';\nimport { conductCheck } from '../../vc-tree/utils/conductUtil';\nimport { convertDataToEntities } from '../../vc-tree/utils/treeUtil';\nimport devWarning from '../../vc-util/devWarning';\nimport useMergedState from '../../_util/hooks/useMergedState';\nimport useState from '../../_util/hooks/useState';\nimport { watchEffect, computed, shallowRef } from 'vue';\nimport Checkbox from '../../checkbox';\nimport Dropdown from '../../dropdown';\nimport Menu from '../../menu';\nimport Radio from '../../radio';\nimport useMaxLevel from '../../vc-tree/useMaxLevel';\n// TODO: warning if use ajax!!!\nexport const SELECTION_COLUMN = {};\nexport const SELECTION_ALL = 'SELECT_ALL';\nexport const SELECTION_INVERT = 'SELECT_INVERT';\nexport const SELECTION_NONE = 'SELECT_NONE';\nconst EMPTY_LIST = [];\nfunction flattenData(childrenColumnName, data) {\n  let list = [];\n  (data || []).forEach(record => {\n    list.push(record);\n    if (record && typeof record === 'object' && childrenColumnName in record) {\n      list = [...list, ...flattenData(childrenColumnName, record[childrenColumnName])];\n    }\n  });\n  return list;\n}\nexport default function useSelection(rowSelectionRef, configRef) {\n  const mergedRowSelection = computed(() => {\n    const temp = rowSelectionRef.value || {};\n    const {\n      checkStrictly = true\n    } = temp;\n    return _extends(_extends({}, temp), {\n      checkStrictly\n    });\n  });\n  // ========================= Keys =========================\n  const [mergedSelectedKeys, setMergedSelectedKeys] = useMergedState(mergedRowSelection.value.selectedRowKeys || mergedRowSelection.value.defaultSelectedRowKeys || EMPTY_LIST, {\n    value: computed(() => mergedRowSelection.value.selectedRowKeys)\n  });\n  // ======================== Caches ========================\n  const preserveRecordsRef = shallowRef(new Map());\n  const updatePreserveRecordsCache = keys => {\n    if (mergedRowSelection.value.preserveSelectedRowKeys) {\n      const newCache = new Map();\n      // Keep key if mark as preserveSelectedRowKeys\n      keys.forEach(key => {\n        let record = configRef.getRecordByKey(key);\n        if (!record && preserveRecordsRef.value.has(key)) {\n          record = preserveRecordsRef.value.get(key);\n        }\n        newCache.set(key, record);\n      });\n      // Refresh to new cache\n      preserveRecordsRef.value = newCache;\n    }\n  };\n  watchEffect(() => {\n    updatePreserveRecordsCache(mergedSelectedKeys.value);\n  });\n  const keyEntities = computed(() => mergedRowSelection.value.checkStrictly ? null : convertDataToEntities(configRef.data.value, {\n    externalGetKey: configRef.getRowKey.value,\n    childrenPropName: configRef.childrenColumnName.value\n  }).keyEntities);\n  // Get flatten data\n  const flattedData = computed(() => flattenData(configRef.childrenColumnName.value, configRef.pageData.value));\n  // Get all checkbox props\n  const checkboxPropsMap = computed(() => {\n    const map = new Map();\n    const getRowKey = configRef.getRowKey.value;\n    const getCheckboxProps = mergedRowSelection.value.getCheckboxProps;\n    flattedData.value.forEach((record, index) => {\n      const key = getRowKey(record, index);\n      const checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};\n      map.set(key, checkboxProps);\n      if (process.env.NODE_ENV !== 'production' && ('checked' in checkboxProps || 'defaultChecked' in checkboxProps)) {\n        devWarning(false, 'Table', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.');\n      }\n    });\n    return map;\n  });\n  const {\n    maxLevel,\n    levelEntities\n  } = useMaxLevel(keyEntities);\n  const isCheckboxDisabled = r => {\n    var _a;\n    return !!((_a = checkboxPropsMap.value.get(configRef.getRowKey.value(r))) === null || _a === void 0 ? void 0 : _a.disabled);\n  };\n  const selectKeysState = computed(() => {\n    if (mergedRowSelection.value.checkStrictly) {\n      return [mergedSelectedKeys.value || [], []];\n    }\n    const {\n      checkedKeys,\n      halfCheckedKeys\n    } = conductCheck(mergedSelectedKeys.value, true, keyEntities.value, maxLevel.value, levelEntities.value, isCheckboxDisabled);\n    return [checkedKeys || [], halfCheckedKeys];\n  });\n  const derivedSelectedKeys = computed(() => selectKeysState.value[0]);\n  const derivedHalfSelectedKeys = computed(() => selectKeysState.value[1]);\n  const derivedSelectedKeySet = computed(() => {\n    const keys = mergedRowSelection.value.type === 'radio' ? derivedSelectedKeys.value.slice(0, 1) : derivedSelectedKeys.value;\n    return new Set(keys);\n  });\n  const derivedHalfSelectedKeySet = computed(() => mergedRowSelection.value.type === 'radio' ? new Set() : new Set(derivedHalfSelectedKeys.value));\n  // Save last selected key to enable range selection\n  const [lastSelectedKey, setLastSelectedKey] = useState(null);\n  // // Reset if rowSelection reset\n  // we use computed to reset, donot need setMergedSelectedKeys again like react\n  // https://github.com/vueComponent/ant-design-vue/issues/4885\n  // watchEffect(() => {\n  //   if (!rowSelectionRef.value) {\n  //     setMergedSelectedKeys([]);\n  //   }\n  // });\n  const setSelectedKeys = keys => {\n    let availableKeys;\n    let records;\n    updatePreserveRecordsCache(keys);\n    const {\n      preserveSelectedRowKeys,\n      onChange: onSelectionChange\n    } = mergedRowSelection.value;\n    const {\n      getRecordByKey\n    } = configRef;\n    if (preserveSelectedRowKeys) {\n      availableKeys = keys;\n      records = keys.map(key => preserveRecordsRef.value.get(key));\n    } else {\n      // Filter key which not exist in the `dataSource`\n      availableKeys = [];\n      records = [];\n      keys.forEach(key => {\n        const record = getRecordByKey(key);\n        if (record !== undefined) {\n          availableKeys.push(key);\n          records.push(record);\n        }\n      });\n    }\n    setMergedSelectedKeys(availableKeys);\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records);\n  };\n  // ====================== Selections ======================\n  // Trigger single `onSelect` event\n  const triggerSingleSelection = (key, selected, keys, event) => {\n    const {\n      onSelect\n    } = mergedRowSelection.value;\n    const {\n      getRecordByKey\n    } = configRef || {};\n    if (onSelect) {\n      const rows = keys.map(k => getRecordByKey(k));\n      onSelect(getRecordByKey(key), selected, rows, event);\n    }\n    setSelectedKeys(keys);\n  };\n  const mergedSelections = computed(() => {\n    const {\n      onSelectInvert,\n      onSelectNone,\n      selections,\n      hideSelectAll\n    } = mergedRowSelection.value;\n    const {\n      data,\n      pageData,\n      getRowKey,\n      locale: tableLocale\n    } = configRef;\n    if (!selections || hideSelectAll) {\n      return null;\n    }\n    const selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;\n    return selectionList.map(selection => {\n      if (selection === SELECTION_ALL) {\n        return {\n          key: 'all',\n          text: tableLocale.value.selectionAll,\n          onSelect() {\n            setSelectedKeys(data.value.map((record, index) => getRowKey.value(record, index)).filter(key => {\n              const checkProps = checkboxPropsMap.value.get(key);\n              return !(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled) || derivedSelectedKeySet.value.has(key);\n            }));\n          }\n        };\n      }\n      if (selection === SELECTION_INVERT) {\n        return {\n          key: 'invert',\n          text: tableLocale.value.selectInvert,\n          onSelect() {\n            const keySet = new Set(derivedSelectedKeySet.value);\n            pageData.value.forEach((record, index) => {\n              const key = getRowKey.value(record, index);\n              const checkProps = checkboxPropsMap.value.get(key);\n              if (!(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled)) {\n                if (keySet.has(key)) {\n                  keySet.delete(key);\n                } else {\n                  keySet.add(key);\n                }\n              }\n            });\n            const keys = Array.from(keySet);\n            if (onSelectInvert) {\n              devWarning(false, 'Table', '`onSelectInvert` will be removed in future. Please use `onChange` instead.');\n              onSelectInvert(keys);\n            }\n            setSelectedKeys(keys);\n          }\n        };\n      }\n      if (selection === SELECTION_NONE) {\n        return {\n          key: 'none',\n          text: tableLocale.value.selectNone,\n          onSelect() {\n            onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();\n            setSelectedKeys(Array.from(derivedSelectedKeySet.value).filter(key => {\n              const checkProps = checkboxPropsMap.value.get(key);\n              return checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled;\n            }));\n          }\n        };\n      }\n      return selection;\n    });\n  });\n  const flattedDataLength = computed(() => flattedData.value.length);\n  // ======================= Columns ========================\n  const transformColumns = columns => {\n    var _a;\n    const {\n      onSelectAll,\n      onSelectMultiple,\n      columnWidth: selectionColWidth,\n      type: selectionType,\n      fixed,\n      renderCell: customizeRenderCell,\n      hideSelectAll,\n      checkStrictly\n    } = mergedRowSelection.value;\n    const {\n      prefixCls,\n      getRecordByKey,\n      getRowKey,\n      expandType,\n      getPopupContainer\n    } = configRef;\n    if (!rowSelectionRef.value) {\n      if (process.env.NODE_ENV !== 'production') {\n        devWarning(!columns.includes(SELECTION_COLUMN), 'Table', '`rowSelection` is not config but `SELECTION_COLUMN` exists in the `columns`.');\n      }\n      return columns.filter(col => col !== SELECTION_COLUMN);\n    }\n    // Support selection\n    let cloneColumns = columns.slice();\n    const keySet = new Set(derivedSelectedKeySet.value);\n    // Record key only need check with enabled\n    const recordKeys = flattedData.value.map(getRowKey.value).filter(key => !checkboxPropsMap.value.get(key).disabled);\n    const checkedCurrentAll = recordKeys.every(key => keySet.has(key));\n    const checkedCurrentSome = recordKeys.some(key => keySet.has(key));\n    const onSelectAllChange = () => {\n      const changeKeys = [];\n      if (checkedCurrentAll) {\n        recordKeys.forEach(key => {\n          keySet.delete(key);\n          changeKeys.push(key);\n        });\n      } else {\n        recordKeys.forEach(key => {\n          if (!keySet.has(key)) {\n            keySet.add(key);\n            changeKeys.push(key);\n          }\n        });\n      }\n      const keys = Array.from(keySet);\n      onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys.map(k => getRecordByKey(k)), changeKeys.map(k => getRecordByKey(k)));\n      setSelectedKeys(keys);\n    };\n    // ===================== Render =====================\n    // Title Cell\n    let title;\n    if (selectionType !== 'radio') {\n      let customizeSelections;\n      if (mergedSelections.value) {\n        const menu = _createVNode(Menu, {\n          \"getPopupContainer\": getPopupContainer.value\n        }, {\n          default: () => [mergedSelections.value.map((selection, index) => {\n            const {\n              key,\n              text,\n              onSelect: onSelectionClick\n            } = selection;\n            return _createVNode(Menu.Item, {\n              \"key\": key || index,\n              \"onClick\": () => {\n                onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);\n              }\n            }, {\n              default: () => [text]\n            });\n          })]\n        });\n        customizeSelections = _createVNode(\"div\", {\n          \"class\": `${prefixCls.value}-selection-extra`\n        }, [_createVNode(Dropdown, {\n          \"overlay\": menu,\n          \"getPopupContainer\": getPopupContainer.value\n        }, {\n          default: () => [_createVNode(\"span\", null, [_createVNode(DownOutlined, null, null)])]\n        })]);\n      }\n      const allDisabledData = flattedData.value.map((record, index) => {\n        const key = getRowKey.value(record, index);\n        const checkboxProps = checkboxPropsMap.value.get(key) || {};\n        return _extends({\n          checked: keySet.has(key)\n        }, checkboxProps);\n      }).filter(_ref => {\n        let {\n          disabled\n        } = _ref;\n        return disabled;\n      });\n      const allDisabled = !!allDisabledData.length && allDisabledData.length === flattedDataLength.value;\n      const allDisabledAndChecked = allDisabled && allDisabledData.every(_ref2 => {\n        let {\n          checked\n        } = _ref2;\n        return checked;\n      });\n      const allDisabledSomeChecked = allDisabled && allDisabledData.some(_ref3 => {\n        let {\n          checked\n        } = _ref3;\n        return checked;\n      });\n      title = !hideSelectAll && _createVNode(\"div\", {\n        \"class\": `${prefixCls.value}-selection`\n      }, [_createVNode(Checkbox, {\n        \"checked\": !allDisabled ? !!flattedDataLength.value && checkedCurrentAll : allDisabledAndChecked,\n        \"indeterminate\": !allDisabled ? !checkedCurrentAll && checkedCurrentSome : !allDisabledAndChecked && allDisabledSomeChecked,\n        \"onChange\": onSelectAllChange,\n        \"disabled\": flattedDataLength.value === 0 || allDisabled,\n        \"aria-label\": customizeSelections ? 'Custom selection' : 'Select all',\n        \"skipGroup\": true\n      }, null), customizeSelections]);\n    }\n    // Body Cell\n    let renderCell;\n    if (selectionType === 'radio') {\n      renderCell = _ref4 => {\n        let {\n          record,\n          index\n        } = _ref4;\n        const key = getRowKey.value(record, index);\n        const checked = keySet.has(key);\n        return {\n          node: _createVNode(Radio, _objectSpread(_objectSpread({}, checkboxPropsMap.value.get(key)), {}, {\n            \"checked\": checked,\n            \"onClick\": e => e.stopPropagation(),\n            \"onChange\": event => {\n              if (!keySet.has(key)) {\n                triggerSingleSelection(key, true, [key], event.nativeEvent);\n              }\n            }\n          }), null),\n          checked\n        };\n      };\n    } else {\n      renderCell = _ref5 => {\n        let {\n          record,\n          index\n        } = _ref5;\n        var _a;\n        const key = getRowKey.value(record, index);\n        const checked = keySet.has(key);\n        const indeterminate = derivedHalfSelectedKeySet.value.has(key);\n        const checkboxProps = checkboxPropsMap.value.get(key);\n        let mergedIndeterminate;\n        if (expandType.value === 'nest') {\n          mergedIndeterminate = indeterminate;\n          devWarning(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== 'boolean', 'Table', 'set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.');\n        } else {\n          mergedIndeterminate = (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a !== void 0 ? _a : indeterminate;\n        }\n        // Record checked\n        return {\n          node: _createVNode(Checkbox, _objectSpread(_objectSpread({}, checkboxProps), {}, {\n            \"indeterminate\": mergedIndeterminate,\n            \"checked\": checked,\n            \"skipGroup\": true,\n            \"onClick\": e => e.stopPropagation(),\n            \"onChange\": _ref6 => {\n              let {\n                nativeEvent\n              } = _ref6;\n              const {\n                shiftKey\n              } = nativeEvent;\n              let startIndex = -1;\n              let endIndex = -1;\n              // Get range of this\n              if (shiftKey && checkStrictly) {\n                const pointKeys = new Set([lastSelectedKey.value, key]);\n                recordKeys.some((recordKey, recordIndex) => {\n                  if (pointKeys.has(recordKey)) {\n                    if (startIndex === -1) {\n                      startIndex = recordIndex;\n                    } else {\n                      endIndex = recordIndex;\n                      return true;\n                    }\n                  }\n                  return false;\n                });\n              }\n              if (endIndex !== -1 && startIndex !== endIndex && checkStrictly) {\n                // Batch update selections\n                const rangeKeys = recordKeys.slice(startIndex, endIndex + 1);\n                const changedKeys = [];\n                if (checked) {\n                  rangeKeys.forEach(recordKey => {\n                    if (keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.delete(recordKey);\n                    }\n                  });\n                } else {\n                  rangeKeys.forEach(recordKey => {\n                    if (!keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.add(recordKey);\n                    }\n                  });\n                }\n                const keys = Array.from(keySet);\n                onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys.map(recordKey => getRecordByKey(recordKey)), changedKeys.map(recordKey => getRecordByKey(recordKey)));\n                setSelectedKeys(keys);\n              } else {\n                // Single record selected\n                const originCheckedKeys = derivedSelectedKeys.value;\n                if (checkStrictly) {\n                  const checkedKeys = checked ? arrDel(originCheckedKeys, key) : arrAdd(originCheckedKeys, key);\n                  triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);\n                } else {\n                  // Always fill first\n                  const result = conductCheck([...originCheckedKeys, key], true, keyEntities.value, maxLevel.value, levelEntities.value, isCheckboxDisabled);\n                  const {\n                    checkedKeys,\n                    halfCheckedKeys\n                  } = result;\n                  let nextCheckedKeys = checkedKeys;\n                  // If remove, we do it again to correction\n                  if (checked) {\n                    const tempKeySet = new Set(checkedKeys);\n                    tempKeySet.delete(key);\n                    nextCheckedKeys = conductCheck(Array.from(tempKeySet), {\n                      checked: false,\n                      halfCheckedKeys\n                    }, keyEntities.value, maxLevel.value, levelEntities.value, isCheckboxDisabled).checkedKeys;\n                  }\n                  triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);\n                }\n              }\n              setLastSelectedKey(key);\n            }\n          }), null),\n          checked\n        };\n      };\n    }\n    const renderSelectionCell = _ref7 => {\n      let {\n        record,\n        index\n      } = _ref7;\n      const {\n        node,\n        checked\n      } = renderCell({\n        record,\n        index\n      });\n      if (customizeRenderCell) {\n        return customizeRenderCell(checked, record, index, node);\n      }\n      return node;\n    };\n    // Insert selection column if not exist\n    if (!cloneColumns.includes(SELECTION_COLUMN)) {\n      // Always after expand icon\n      if (cloneColumns.findIndex(col => {\n        var _a;\n        return ((_a = col[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN';\n      }) === 0) {\n        const [expandColumn, ...restColumns] = cloneColumns;\n        cloneColumns = [expandColumn, SELECTION_COLUMN, ...restColumns];\n      } else {\n        // Normal insert at first column\n        cloneColumns = [SELECTION_COLUMN, ...cloneColumns];\n      }\n    }\n    // Deduplicate selection column\n    const selectionColumnIndex = cloneColumns.indexOf(SELECTION_COLUMN);\n    if (process.env.NODE_ENV !== 'production' && cloneColumns.filter(col => col === SELECTION_COLUMN).length > 1) {\n      devWarning(false, 'Table', 'Multiple `SELECTION_COLUMN` exist in `columns`.');\n    }\n    cloneColumns = cloneColumns.filter((column, index) => column !== SELECTION_COLUMN || index === selectionColumnIndex);\n    // Fixed column logic\n    const prevCol = cloneColumns[selectionColumnIndex - 1];\n    const nextCol = cloneColumns[selectionColumnIndex + 1];\n    let mergedFixed = fixed;\n    if (mergedFixed === undefined) {\n      if ((nextCol === null || nextCol === void 0 ? void 0 : nextCol.fixed) !== undefined) {\n        mergedFixed = nextCol.fixed;\n      } else if ((prevCol === null || prevCol === void 0 ? void 0 : prevCol.fixed) !== undefined) {\n        mergedFixed = prevCol.fixed;\n      }\n    }\n    if (mergedFixed && prevCol && ((_a = prevCol[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN' && prevCol.fixed === undefined) {\n      prevCol.fixed = mergedFixed;\n    }\n    // Replace with real selection column\n    const selectionColumn = {\n      fixed: mergedFixed,\n      width: selectionColWidth,\n      className: `${prefixCls.value}-selection-column`,\n      title: mergedRowSelection.value.columnTitle || title,\n      customRender: renderSelectionCell,\n      [INTERNAL_COL_DEFINE]: {\n        class: `${prefixCls.value}-selection-col`\n      }\n    };\n    return cloneColumns.map(col => col === SELECTION_COLUMN ? selectionColumn : col);\n  };\n  return [transformColumns, derivedSelectedKeySet];\n}"],"mappings":";AAAA,OAAOA,aAAa,MAAM,0CAA0C;AACpE,OAAOC,QAAQ,MAAM,oCAAoC;AACzD,SAASC,WAAW,IAAIC,YAAY,QAAQ,KAAK;AACjD,OAAOC,YAAY,MAAM,6CAA6C;AACtE,SAASC,mBAAmB,QAAQ,gBAAgB;AACpD,SAASC,MAAM,EAAEC,MAAM,QAAQ,oBAAoB;AACnD,SAASC,YAAY,QAAQ,iCAAiC;AAC9D,SAASC,qBAAqB,QAAQ,8BAA8B;AACpE,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,cAAc,MAAM,kCAAkC;AAC7D,OAAOC,QAAQ,MAAM,4BAA4B;AACjD,SAASC,WAAW,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,KAAK;AACvD,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,OAAOC,IAAI,MAAM,YAAY;AAC7B,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAOC,WAAW,MAAM,2BAA2B;AACnD;AACA,OAAO,MAAMC,gBAAgB,GAAG,CAAC,CAAC;AAClC,OAAO,MAAMC,aAAa,GAAG,YAAY;AACzC,OAAO,MAAMC,gBAAgB,GAAG,eAAe;AAC/C,OAAO,MAAMC,cAAc,GAAG,aAAa;AAC3C,MAAMC,UAAU,GAAG,EAAE;AACrB,SAASC,WAAWA,CAACC,kBAAkB,EAAEC,IAAI,EAAE;EAC7C,IAAIC,IAAI,GAAG,EAAE;EACb,CAACD,IAAI,IAAI,EAAE,EAAEE,OAAO,CAACC,MAAM,IAAI;IAC7BF,IAAI,CAACG,IAAI,CAACD,MAAM,CAAC;IACjB,IAAIA,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,IAAIJ,kBAAkB,IAAII,MAAM,EAAE;MACxEF,IAAI,GAAG,CAAC,GAAGA,IAAI,EAAE,GAAGH,WAAW,CAACC,kBAAkB,EAAEI,MAAM,CAACJ,kBAAkB,CAAC,CAAC,CAAC;IAClF;EACF,CAAC,CAAC;EACF,OAAOE,IAAI;AACb;AACA,eAAe,SAASI,YAAYA,CAACC,eAAe,EAAEC,SAAS,EAAE;EAC/D,MAAMC,kBAAkB,GAAGtB,QAAQ,CAAC,MAAM;IACxC,MAAMuB,IAAI,GAAGH,eAAe,CAACI,KAAK,IAAI,CAAC,CAAC;IACxC,MAAM;MACJC,aAAa,GAAG;IAClB,CAAC,GAAGF,IAAI;IACR,OAAOpC,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEoC,IAAI,CAAC,EAAE;MAClCE;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EACF;EACA,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG9B,cAAc,CAACyB,kBAAkB,CAACE,KAAK,CAACI,eAAe,IAAIN,kBAAkB,CAACE,KAAK,CAACK,sBAAsB,IAAIlB,UAAU,EAAE;IAC5Ka,KAAK,EAAExB,QAAQ,CAAC,MAAMsB,kBAAkB,CAACE,KAAK,CAACI,eAAe;EAChE,CAAC,CAAC;EACF;EACA,MAAME,kBAAkB,GAAG7B,UAAU,CAAC,IAAI8B,GAAG,CAAC,CAAC,CAAC;EAChD,MAAMC,0BAA0B,GAAGC,IAAI,IAAI;IACzC,IAAIX,kBAAkB,CAACE,KAAK,CAACU,uBAAuB,EAAE;MACpD,MAAMC,QAAQ,GAAG,IAAIJ,GAAG,CAAC,CAAC;MAC1B;MACAE,IAAI,CAACjB,OAAO,CAACoB,GAAG,IAAI;QAClB,IAAInB,MAAM,GAAGI,SAAS,CAACgB,cAAc,CAACD,GAAG,CAAC;QAC1C,IAAI,CAACnB,MAAM,IAAIa,kBAAkB,CAACN,KAAK,CAACc,GAAG,CAACF,GAAG,CAAC,EAAE;UAChDnB,MAAM,GAAGa,kBAAkB,CAACN,KAAK,CAACe,GAAG,CAACH,GAAG,CAAC;QAC5C;QACAD,QAAQ,CAACK,GAAG,CAACJ,GAAG,EAAEnB,MAAM,CAAC;MAC3B,CAAC,CAAC;MACF;MACAa,kBAAkB,CAACN,KAAK,GAAGW,QAAQ;IACrC;EACF,CAAC;EACDpC,WAAW,CAAC,MAAM;IAChBiC,0BAA0B,CAACN,kBAAkB,CAACF,KAAK,CAAC;EACtD,CAAC,CAAC;EACF,MAAMiB,WAAW,GAAGzC,QAAQ,CAAC,MAAMsB,kBAAkB,CAACE,KAAK,CAACC,aAAa,GAAG,IAAI,GAAG9B,qBAAqB,CAAC0B,SAAS,CAACP,IAAI,CAACU,KAAK,EAAE;IAC7HkB,cAAc,EAAErB,SAAS,CAACsB,SAAS,CAACnB,KAAK;IACzCoB,gBAAgB,EAAEvB,SAAS,CAACR,kBAAkB,CAACW;EACjD,CAAC,CAAC,CAACiB,WAAW,CAAC;EACf;EACA,MAAMI,WAAW,GAAG7C,QAAQ,CAAC,MAAMY,WAAW,CAACS,SAAS,CAACR,kBAAkB,CAACW,KAAK,EAAEH,SAAS,CAACyB,QAAQ,CAACtB,KAAK,CAAC,CAAC;EAC7G;EACA,MAAMuB,gBAAgB,GAAG/C,QAAQ,CAAC,MAAM;IACtC,MAAMgD,GAAG,GAAG,IAAIjB,GAAG,CAAC,CAAC;IACrB,MAAMY,SAAS,GAAGtB,SAAS,CAACsB,SAAS,CAACnB,KAAK;IAC3C,MAAMyB,gBAAgB,GAAG3B,kBAAkB,CAACE,KAAK,CAACyB,gBAAgB;IAClEJ,WAAW,CAACrB,KAAK,CAACR,OAAO,CAAC,CAACC,MAAM,EAAEiC,KAAK,KAAK;MAC3C,MAAMd,GAAG,GAAGO,SAAS,CAAC1B,MAAM,EAAEiC,KAAK,CAAC;MACpC,MAAMC,aAAa,GAAG,CAACF,gBAAgB,GAAGA,gBAAgB,CAAChC,MAAM,CAAC,GAAG,IAAI,KAAK,CAAC,CAAC;MAChF+B,GAAG,CAACR,GAAG,CAACJ,GAAG,EAAEe,aAAa,CAAC;MAC3B,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,KAAK,SAAS,IAAIH,aAAa,IAAI,gBAAgB,IAAIA,aAAa,CAAC,EAAE;QAC9GvD,UAAU,CAAC,KAAK,EAAE,OAAO,EAAE,uGAAuG,CAAC;MACrI;IACF,CAAC,CAAC;IACF,OAAOoD,GAAG;EACZ,CAAC,CAAC;EACF,MAAM;IACJO,QAAQ;IACRC;EACF,CAAC,GAAGlD,WAAW,CAACmC,WAAW,CAAC;EAC5B,MAAMgB,kBAAkB,GAAGC,CAAC,IAAI;IAC9B,IAAIC,EAAE;IACN,OAAO,CAAC,EAAE,CAACA,EAAE,GAAGZ,gBAAgB,CAACvB,KAAK,CAACe,GAAG,CAAClB,SAAS,CAACsB,SAAS,CAACnB,KAAK,CAACkC,CAAC,CAAC,CAAC,MAAM,IAAI,IAAIC,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACC,QAAQ,CAAC;EAC7H,CAAC;EACD,MAAMC,eAAe,GAAG7D,QAAQ,CAAC,MAAM;IACrC,IAAIsB,kBAAkB,CAACE,KAAK,CAACC,aAAa,EAAE;MAC1C,OAAO,CAACC,kBAAkB,CAACF,KAAK,IAAI,EAAE,EAAE,EAAE,CAAC;IAC7C;IACA,MAAM;MACJsC,WAAW;MACXC;IACF,CAAC,GAAGrE,YAAY,CAACgC,kBAAkB,CAACF,KAAK,EAAE,IAAI,EAAEiB,WAAW,CAACjB,KAAK,EAAE+B,QAAQ,CAAC/B,KAAK,EAAEgC,aAAa,CAAChC,KAAK,EAAEiC,kBAAkB,CAAC;IAC5H,OAAO,CAACK,WAAW,IAAI,EAAE,EAAEC,eAAe,CAAC;EAC7C,CAAC,CAAC;EACF,MAAMC,mBAAmB,GAAGhE,QAAQ,CAAC,MAAM6D,eAAe,CAACrC,KAAK,CAAC,CAAC,CAAC,CAAC;EACpE,MAAMyC,uBAAuB,GAAGjE,QAAQ,CAAC,MAAM6D,eAAe,CAACrC,KAAK,CAAC,CAAC,CAAC,CAAC;EACxE,MAAM0C,qBAAqB,GAAGlE,QAAQ,CAAC,MAAM;IAC3C,MAAMiC,IAAI,GAAGX,kBAAkB,CAACE,KAAK,CAAC2C,IAAI,KAAK,OAAO,GAAGH,mBAAmB,CAACxC,KAAK,CAAC4C,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGJ,mBAAmB,CAACxC,KAAK;IAC1H,OAAO,IAAI6C,GAAG,CAACpC,IAAI,CAAC;EACtB,CAAC,CAAC;EACF,MAAMqC,yBAAyB,GAAGtE,QAAQ,CAAC,MAAMsB,kBAAkB,CAACE,KAAK,CAAC2C,IAAI,KAAK,OAAO,GAAG,IAAIE,GAAG,CAAC,CAAC,GAAG,IAAIA,GAAG,CAACJ,uBAAuB,CAACzC,KAAK,CAAC,CAAC;EAChJ;EACA,MAAM,CAAC+C,eAAe,EAAEC,kBAAkB,CAAC,GAAG1E,QAAQ,CAAC,IAAI,CAAC;EAC5D;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAM2E,eAAe,GAAGxC,IAAI,IAAI;IAC9B,IAAIyC,aAAa;IACjB,IAAIC,OAAO;IACX3C,0BAA0B,CAACC,IAAI,CAAC;IAChC,MAAM;MACJC,uBAAuB;MACvB0C,QAAQ,EAAEC;IACZ,CAAC,GAAGvD,kBAAkB,CAACE,KAAK;IAC5B,MAAM;MACJa;IACF,CAAC,GAAGhB,SAAS;IACb,IAAIa,uBAAuB,EAAE;MAC3BwC,aAAa,GAAGzC,IAAI;MACpB0C,OAAO,GAAG1C,IAAI,CAACe,GAAG,CAACZ,GAAG,IAAIN,kBAAkB,CAACN,KAAK,CAACe,GAAG,CAACH,GAAG,CAAC,CAAC;IAC9D,CAAC,MAAM;MACL;MACAsC,aAAa,GAAG,EAAE;MAClBC,OAAO,GAAG,EAAE;MACZ1C,IAAI,CAACjB,OAAO,CAACoB,GAAG,IAAI;QAClB,MAAMnB,MAAM,GAAGoB,cAAc,CAACD,GAAG,CAAC;QAClC,IAAInB,MAAM,KAAK6D,SAAS,EAAE;UACxBJ,aAAa,CAACxD,IAAI,CAACkB,GAAG,CAAC;UACvBuC,OAAO,CAACzD,IAAI,CAACD,MAAM,CAAC;QACtB;MACF,CAAC,CAAC;IACJ;IACAU,qBAAqB,CAAC+C,aAAa,CAAC;IACpCG,iBAAiB,KAAK,IAAI,IAAIA,iBAAiB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,iBAAiB,CAACH,aAAa,EAAEC,OAAO,CAAC;EACjH,CAAC;EACD;EACA;EACA,MAAMI,sBAAsB,GAAGA,CAAC3C,GAAG,EAAE4C,QAAQ,EAAE/C,IAAI,EAAEgD,KAAK,KAAK;IAC7D,MAAM;MACJC;IACF,CAAC,GAAG5D,kBAAkB,CAACE,KAAK;IAC5B,MAAM;MACJa;IACF,CAAC,GAAGhB,SAAS,IAAI,CAAC,CAAC;IACnB,IAAI6D,QAAQ,EAAE;MACZ,MAAMC,IAAI,GAAGlD,IAAI,CAACe,GAAG,CAACoC,CAAC,IAAI/C,cAAc,CAAC+C,CAAC,CAAC,CAAC;MAC7CF,QAAQ,CAAC7C,cAAc,CAACD,GAAG,CAAC,EAAE4C,QAAQ,EAAEG,IAAI,EAAEF,KAAK,CAAC;IACtD;IACAR,eAAe,CAACxC,IAAI,CAAC;EACvB,CAAC;EACD,MAAMoD,gBAAgB,GAAGrF,QAAQ,CAAC,MAAM;IACtC,MAAM;MACJsF,cAAc;MACdC,YAAY;MACZC,UAAU;MACVC;IACF,CAAC,GAAGnE,kBAAkB,CAACE,KAAK;IAC5B,MAAM;MACJV,IAAI;MACJgC,QAAQ;MACRH,SAAS;MACT+C,MAAM,EAAEC;IACV,CAAC,GAAGtE,SAAS;IACb,IAAI,CAACmE,UAAU,IAAIC,aAAa,EAAE;MAChC,OAAO,IAAI;IACb;IACA,MAAMG,aAAa,GAAGJ,UAAU,KAAK,IAAI,GAAG,CAAChF,aAAa,EAAEC,gBAAgB,EAAEC,cAAc,CAAC,GAAG8E,UAAU;IAC1G,OAAOI,aAAa,CAAC5C,GAAG,CAAC6C,SAAS,IAAI;MACpC,IAAIA,SAAS,KAAKrF,aAAa,EAAE;QAC/B,OAAO;UACL4B,GAAG,EAAE,KAAK;UACV0D,IAAI,EAAEH,WAAW,CAACnE,KAAK,CAACuE,YAAY;UACpCb,QAAQA,CAAA,EAAG;YACTT,eAAe,CAAC3D,IAAI,CAACU,KAAK,CAACwB,GAAG,CAAC,CAAC/B,MAAM,EAAEiC,KAAK,KAAKP,SAAS,CAACnB,KAAK,CAACP,MAAM,EAAEiC,KAAK,CAAC,CAAC,CAAC8C,MAAM,CAAC5D,GAAG,IAAI;cAC9F,MAAM6D,UAAU,GAAGlD,gBAAgB,CAACvB,KAAK,CAACe,GAAG,CAACH,GAAG,CAAC;cAClD,OAAO,EAAE6D,UAAU,KAAK,IAAI,IAAIA,UAAU,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACrC,QAAQ,CAAC,IAAIM,qBAAqB,CAAC1C,KAAK,CAACc,GAAG,CAACF,GAAG,CAAC;YAC/H,CAAC,CAAC,CAAC;UACL;QACF,CAAC;MACH;MACA,IAAIyD,SAAS,KAAKpF,gBAAgB,EAAE;QAClC,OAAO;UACL2B,GAAG,EAAE,QAAQ;UACb0D,IAAI,EAAEH,WAAW,CAACnE,KAAK,CAAC0E,YAAY;UACpChB,QAAQA,CAAA,EAAG;YACT,MAAMiB,MAAM,GAAG,IAAI9B,GAAG,CAACH,qBAAqB,CAAC1C,KAAK,CAAC;YACnDsB,QAAQ,CAACtB,KAAK,CAACR,OAAO,CAAC,CAACC,MAAM,EAAEiC,KAAK,KAAK;cACxC,MAAMd,GAAG,GAAGO,SAAS,CAACnB,KAAK,CAACP,MAAM,EAAEiC,KAAK,CAAC;cAC1C,MAAM+C,UAAU,GAAGlD,gBAAgB,CAACvB,KAAK,CAACe,GAAG,CAACH,GAAG,CAAC;cAClD,IAAI,EAAE6D,UAAU,KAAK,IAAI,IAAIA,UAAU,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACrC,QAAQ,CAAC,EAAE;gBAClF,IAAIuC,MAAM,CAAC7D,GAAG,CAACF,GAAG,CAAC,EAAE;kBACnB+D,MAAM,CAACC,MAAM,CAAChE,GAAG,CAAC;gBACpB,CAAC,MAAM;kBACL+D,MAAM,CAACE,GAAG,CAACjE,GAAG,CAAC;gBACjB;cACF;YACF,CAAC,CAAC;YACF,MAAMH,IAAI,GAAGqE,KAAK,CAACC,IAAI,CAACJ,MAAM,CAAC;YAC/B,IAAIb,cAAc,EAAE;cAClB1F,UAAU,CAAC,KAAK,EAAE,OAAO,EAAE,4EAA4E,CAAC;cACxG0F,cAAc,CAACrD,IAAI,CAAC;YACtB;YACAwC,eAAe,CAACxC,IAAI,CAAC;UACvB;QACF,CAAC;MACH;MACA,IAAI4D,SAAS,KAAKnF,cAAc,EAAE;QAChC,OAAO;UACL0B,GAAG,EAAE,MAAM;UACX0D,IAAI,EAAEH,WAAW,CAACnE,KAAK,CAACgF,UAAU;UAClCtB,QAAQA,CAAA,EAAG;YACTK,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,YAAY,CAAC,CAAC;YAC1Ed,eAAe,CAAC6B,KAAK,CAACC,IAAI,CAACrC,qBAAqB,CAAC1C,KAAK,CAAC,CAACwE,MAAM,CAAC5D,GAAG,IAAI;cACpE,MAAM6D,UAAU,GAAGlD,gBAAgB,CAACvB,KAAK,CAACe,GAAG,CAACH,GAAG,CAAC;cAClD,OAAO6D,UAAU,KAAK,IAAI,IAAIA,UAAU,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACrC,QAAQ;YACpF,CAAC,CAAC,CAAC;UACL;QACF,CAAC;MACH;MACA,OAAOiC,SAAS;IAClB,CAAC,CAAC;EACJ,CAAC,CAAC;EACF,MAAMY,iBAAiB,GAAGzG,QAAQ,CAAC,MAAM6C,WAAW,CAACrB,KAAK,CAACkF,MAAM,CAAC;EAClE;EACA,MAAMC,gBAAgB,GAAGC,OAAO,IAAI;IAClC,IAAIjD,EAAE;IACN,MAAM;MACJkD,WAAW;MACXC,gBAAgB;MAChBC,WAAW,EAAEC,iBAAiB;MAC9B7C,IAAI,EAAE8C,aAAa;MACnBC,KAAK;MACLC,UAAU,EAAEC,mBAAmB;MAC/B3B,aAAa;MACbhE;IACF,CAAC,GAAGH,kBAAkB,CAACE,KAAK;IAC5B,MAAM;MACJ6F,SAAS;MACThF,cAAc;MACdM,SAAS;MACT2E,UAAU;MACVC;IACF,CAAC,GAAGlG,SAAS;IACb,IAAI,CAACD,eAAe,CAACI,KAAK,EAAE;MAC1B,IAAI4B,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;QACzC1D,UAAU,CAAC,CAACgH,OAAO,CAACY,QAAQ,CAACjH,gBAAgB,CAAC,EAAE,OAAO,EAAE,8EAA8E,CAAC;MAC1I;MACA,OAAOqG,OAAO,CAACZ,MAAM,CAACyB,GAAG,IAAIA,GAAG,KAAKlH,gBAAgB,CAAC;IACxD;IACA;IACA,IAAImH,YAAY,GAAGd,OAAO,CAACxC,KAAK,CAAC,CAAC;IAClC,MAAM+B,MAAM,GAAG,IAAI9B,GAAG,CAACH,qBAAqB,CAAC1C,KAAK,CAAC;IACnD;IACA,MAAMmG,UAAU,GAAG9E,WAAW,CAACrB,KAAK,CAACwB,GAAG,CAACL,SAAS,CAACnB,KAAK,CAAC,CAACwE,MAAM,CAAC5D,GAAG,IAAI,CAACW,gBAAgB,CAACvB,KAAK,CAACe,GAAG,CAACH,GAAG,CAAC,CAACwB,QAAQ,CAAC;IAClH,MAAMgE,iBAAiB,GAAGD,UAAU,CAACE,KAAK,CAACzF,GAAG,IAAI+D,MAAM,CAAC7D,GAAG,CAACF,GAAG,CAAC,CAAC;IAClE,MAAM0F,kBAAkB,GAAGH,UAAU,CAACI,IAAI,CAAC3F,GAAG,IAAI+D,MAAM,CAAC7D,GAAG,CAACF,GAAG,CAAC,CAAC;IAClE,MAAM4F,iBAAiB,GAAGA,CAAA,KAAM;MAC9B,MAAMC,UAAU,GAAG,EAAE;MACrB,IAAIL,iBAAiB,EAAE;QACrBD,UAAU,CAAC3G,OAAO,CAACoB,GAAG,IAAI;UACxB+D,MAAM,CAACC,MAAM,CAAChE,GAAG,CAAC;UAClB6F,UAAU,CAAC/G,IAAI,CAACkB,GAAG,CAAC;QACtB,CAAC,CAAC;MACJ,CAAC,MAAM;QACLuF,UAAU,CAAC3G,OAAO,CAACoB,GAAG,IAAI;UACxB,IAAI,CAAC+D,MAAM,CAAC7D,GAAG,CAACF,GAAG,CAAC,EAAE;YACpB+D,MAAM,CAACE,GAAG,CAACjE,GAAG,CAAC;YACf6F,UAAU,CAAC/G,IAAI,CAACkB,GAAG,CAAC;UACtB;QACF,CAAC,CAAC;MACJ;MACA,MAAMH,IAAI,GAAGqE,KAAK,CAACC,IAAI,CAACJ,MAAM,CAAC;MAC/BU,WAAW,KAAK,IAAI,IAAIA,WAAW,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,WAAW,CAAC,CAACe,iBAAiB,EAAE3F,IAAI,CAACe,GAAG,CAACoC,CAAC,IAAI/C,cAAc,CAAC+C,CAAC,CAAC,CAAC,EAAE6C,UAAU,CAACjF,GAAG,CAACoC,CAAC,IAAI/C,cAAc,CAAC+C,CAAC,CAAC,CAAC,CAAC;MACnKX,eAAe,CAACxC,IAAI,CAAC;IACvB,CAAC;IACD;IACA;IACA,IAAIiG,KAAK;IACT,IAAIjB,aAAa,KAAK,OAAO,EAAE;MAC7B,IAAIkB,mBAAmB;MACvB,IAAI9C,gBAAgB,CAAC7D,KAAK,EAAE;QAC1B,MAAM4G,IAAI,GAAG/I,YAAY,CAACe,IAAI,EAAE;UAC9B,mBAAmB,EAAEmH,iBAAiB,CAAC/F;QACzC,CAAC,EAAE;UACD6G,OAAO,EAAEA,CAAA,KAAM,CAAChD,gBAAgB,CAAC7D,KAAK,CAACwB,GAAG,CAAC,CAAC6C,SAAS,EAAE3C,KAAK,KAAK;YAC/D,MAAM;cACJd,GAAG;cACH0D,IAAI;cACJZ,QAAQ,EAAEoD;YACZ,CAAC,GAAGzC,SAAS;YACb,OAAOxG,YAAY,CAACe,IAAI,CAACmI,IAAI,EAAE;cAC7B,KAAK,EAAEnG,GAAG,IAAIc,KAAK;cACnB,SAAS,EAAEsF,CAAA,KAAM;gBACfF,gBAAgB,KAAK,IAAI,IAAIA,gBAAgB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,gBAAgB,CAACX,UAAU,CAAC;cAClG;YACF,CAAC,EAAE;cACDU,OAAO,EAAEA,CAAA,KAAM,CAACvC,IAAI;YACtB,CAAC,CAAC;UACJ,CAAC,CAAC;QACJ,CAAC,CAAC;QACFqC,mBAAmB,GAAG9I,YAAY,CAAC,KAAK,EAAE;UACxC,OAAO,EAAG,GAAEgI,SAAS,CAAC7F,KAAM;QAC9B,CAAC,EAAE,CAACnC,YAAY,CAACc,QAAQ,EAAE;UACzB,SAAS,EAAEiI,IAAI;UACf,mBAAmB,EAAEb,iBAAiB,CAAC/F;QACzC,CAAC,EAAE;UACD6G,OAAO,EAAEA,CAAA,KAAM,CAAChJ,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,CAACA,YAAY,CAACC,YAAY,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QACtF,CAAC,CAAC,CAAC,CAAC;MACN;MACA,MAAMmJ,eAAe,GAAG5F,WAAW,CAACrB,KAAK,CAACwB,GAAG,CAAC,CAAC/B,MAAM,EAAEiC,KAAK,KAAK;QAC/D,MAAMd,GAAG,GAAGO,SAAS,CAACnB,KAAK,CAACP,MAAM,EAAEiC,KAAK,CAAC;QAC1C,MAAMC,aAAa,GAAGJ,gBAAgB,CAACvB,KAAK,CAACe,GAAG,CAACH,GAAG,CAAC,IAAI,CAAC,CAAC;QAC3D,OAAOjD,QAAQ,CAAC;UACduJ,OAAO,EAAEvC,MAAM,CAAC7D,GAAG,CAACF,GAAG;QACzB,CAAC,EAAEe,aAAa,CAAC;MACnB,CAAC,CAAC,CAAC6C,MAAM,CAAC2C,IAAI,IAAI;QAChB,IAAI;UACF/E;QACF,CAAC,GAAG+E,IAAI;QACR,OAAO/E,QAAQ;MACjB,CAAC,CAAC;MACF,MAAMgF,WAAW,GAAG,CAAC,CAACH,eAAe,CAAC/B,MAAM,IAAI+B,eAAe,CAAC/B,MAAM,KAAKD,iBAAiB,CAACjF,KAAK;MAClG,MAAMqH,qBAAqB,GAAGD,WAAW,IAAIH,eAAe,CAACZ,KAAK,CAACiB,KAAK,IAAI;QAC1E,IAAI;UACFJ;QACF,CAAC,GAAGI,KAAK;QACT,OAAOJ,OAAO;MAChB,CAAC,CAAC;MACF,MAAMK,sBAAsB,GAAGH,WAAW,IAAIH,eAAe,CAACV,IAAI,CAACiB,KAAK,IAAI;QAC1E,IAAI;UACFN;QACF,CAAC,GAAGM,KAAK;QACT,OAAON,OAAO;MAChB,CAAC,CAAC;MACFR,KAAK,GAAG,CAACzC,aAAa,IAAIpG,YAAY,CAAC,KAAK,EAAE;QAC5C,OAAO,EAAG,GAAEgI,SAAS,CAAC7F,KAAM;MAC9B,CAAC,EAAE,CAACnC,YAAY,CAACa,QAAQ,EAAE;QACzB,SAAS,EAAE,CAAC0I,WAAW,GAAG,CAAC,CAACnC,iBAAiB,CAACjF,KAAK,IAAIoG,iBAAiB,GAAGiB,qBAAqB;QAChG,eAAe,EAAE,CAACD,WAAW,GAAG,CAAChB,iBAAiB,IAAIE,kBAAkB,GAAG,CAACe,qBAAqB,IAAIE,sBAAsB;QAC3H,UAAU,EAAEf,iBAAiB;QAC7B,UAAU,EAAEvB,iBAAiB,CAACjF,KAAK,KAAK,CAAC,IAAIoH,WAAW;QACxD,YAAY,EAAET,mBAAmB,GAAG,kBAAkB,GAAG,YAAY;QACrE,WAAW,EAAE;MACf,CAAC,EAAE,IAAI,CAAC,EAAEA,mBAAmB,CAAC,CAAC;IACjC;IACA;IACA,IAAIhB,UAAU;IACd,IAAIF,aAAa,KAAK,OAAO,EAAE;MAC7BE,UAAU,GAAG8B,KAAK,IAAI;QACpB,IAAI;UACFhI,MAAM;UACNiC;QACF,CAAC,GAAG+F,KAAK;QACT,MAAM7G,GAAG,GAAGO,SAAS,CAACnB,KAAK,CAACP,MAAM,EAAEiC,KAAK,CAAC;QAC1C,MAAMwF,OAAO,GAAGvC,MAAM,CAAC7D,GAAG,CAACF,GAAG,CAAC;QAC/B,OAAO;UACL8G,IAAI,EAAE7J,YAAY,CAACgB,KAAK,EAAEnB,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,EAAE6D,gBAAgB,CAACvB,KAAK,CAACe,GAAG,CAACH,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;YAC9F,SAAS,EAAEsG,OAAO;YAClB,SAAS,EAAES,CAAC,IAAIA,CAAC,CAACC,eAAe,CAAC,CAAC;YACnC,UAAU,EAAEnE,KAAK,IAAI;cACnB,IAAI,CAACkB,MAAM,CAAC7D,GAAG,CAACF,GAAG,CAAC,EAAE;gBACpB2C,sBAAsB,CAAC3C,GAAG,EAAE,IAAI,EAAE,CAACA,GAAG,CAAC,EAAE6C,KAAK,CAACoE,WAAW,CAAC;cAC7D;YACF;UACF,CAAC,CAAC,EAAE,IAAI,CAAC;UACTX;QACF,CAAC;MACH,CAAC;IACH,CAAC,MAAM;MACLvB,UAAU,GAAGmC,KAAK,IAAI;QACpB,IAAI;UACFrI,MAAM;UACNiC;QACF,CAAC,GAAGoG,KAAK;QACT,IAAI3F,EAAE;QACN,MAAMvB,GAAG,GAAGO,SAAS,CAACnB,KAAK,CAACP,MAAM,EAAEiC,KAAK,CAAC;QAC1C,MAAMwF,OAAO,GAAGvC,MAAM,CAAC7D,GAAG,CAACF,GAAG,CAAC;QAC/B,MAAMmH,aAAa,GAAGjF,yBAAyB,CAAC9C,KAAK,CAACc,GAAG,CAACF,GAAG,CAAC;QAC9D,MAAMe,aAAa,GAAGJ,gBAAgB,CAACvB,KAAK,CAACe,GAAG,CAACH,GAAG,CAAC;QACrD,IAAIoH,mBAAmB;QACvB,IAAIlC,UAAU,CAAC9F,KAAK,KAAK,MAAM,EAAE;UAC/BgI,mBAAmB,GAAGD,aAAa;UACnC3J,UAAU,CAAC,QAAQuD,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,aAAa,CAACoG,aAAa,CAAC,KAAK,SAAS,EAAE,OAAO,EAAE,2GAA2G,CAAC;QACpP,CAAC,MAAM;UACLC,mBAAmB,GAAG,CAAC7F,EAAE,GAAGR,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,aAAa,CAACoG,aAAa,MAAM,IAAI,IAAI5F,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG4F,aAAa;QACvK;QACA;QACA,OAAO;UACLL,IAAI,EAAE7J,YAAY,CAACa,QAAQ,EAAEhB,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,EAAEiE,aAAa,CAAC,EAAE,CAAC,CAAC,EAAE;YAC/E,eAAe,EAAEqG,mBAAmB;YACpC,SAAS,EAAEd,OAAO;YAClB,WAAW,EAAE,IAAI;YACjB,SAAS,EAAES,CAAC,IAAIA,CAAC,CAACC,eAAe,CAAC,CAAC;YACnC,UAAU,EAAEK,KAAK,IAAI;cACnB,IAAI;gBACFJ;cACF,CAAC,GAAGI,KAAK;cACT,MAAM;gBACJC;cACF,CAAC,GAAGL,WAAW;cACf,IAAIM,UAAU,GAAG,CAAC,CAAC;cACnB,IAAIC,QAAQ,GAAG,CAAC,CAAC;cACjB;cACA,IAAIF,QAAQ,IAAIjI,aAAa,EAAE;gBAC7B,MAAMoI,SAAS,GAAG,IAAIxF,GAAG,CAAC,CAACE,eAAe,CAAC/C,KAAK,EAAEY,GAAG,CAAC,CAAC;gBACvDuF,UAAU,CAACI,IAAI,CAAC,CAAC+B,SAAS,EAAEC,WAAW,KAAK;kBAC1C,IAAIF,SAAS,CAACvH,GAAG,CAACwH,SAAS,CAAC,EAAE;oBAC5B,IAAIH,UAAU,KAAK,CAAC,CAAC,EAAE;sBACrBA,UAAU,GAAGI,WAAW;oBAC1B,CAAC,MAAM;sBACLH,QAAQ,GAAGG,WAAW;sBACtB,OAAO,IAAI;oBACb;kBACF;kBACA,OAAO,KAAK;gBACd,CAAC,CAAC;cACJ;cACA,IAAIH,QAAQ,KAAK,CAAC,CAAC,IAAID,UAAU,KAAKC,QAAQ,IAAInI,aAAa,EAAE;gBAC/D;gBACA,MAAMuI,SAAS,GAAGrC,UAAU,CAACvD,KAAK,CAACuF,UAAU,EAAEC,QAAQ,GAAG,CAAC,CAAC;gBAC5D,MAAMK,WAAW,GAAG,EAAE;gBACtB,IAAIvB,OAAO,EAAE;kBACXsB,SAAS,CAAChJ,OAAO,CAAC8I,SAAS,IAAI;oBAC7B,IAAI3D,MAAM,CAAC7D,GAAG,CAACwH,SAAS,CAAC,EAAE;sBACzBG,WAAW,CAAC/I,IAAI,CAAC4I,SAAS,CAAC;sBAC3B3D,MAAM,CAACC,MAAM,CAAC0D,SAAS,CAAC;oBAC1B;kBACF,CAAC,CAAC;gBACJ,CAAC,MAAM;kBACLE,SAAS,CAAChJ,OAAO,CAAC8I,SAAS,IAAI;oBAC7B,IAAI,CAAC3D,MAAM,CAAC7D,GAAG,CAACwH,SAAS,CAAC,EAAE;sBAC1BG,WAAW,CAAC/I,IAAI,CAAC4I,SAAS,CAAC;sBAC3B3D,MAAM,CAACE,GAAG,CAACyD,SAAS,CAAC;oBACvB;kBACF,CAAC,CAAC;gBACJ;gBACA,MAAM7H,IAAI,GAAGqE,KAAK,CAACC,IAAI,CAACJ,MAAM,CAAC;gBAC/BW,gBAAgB,KAAK,IAAI,IAAIA,gBAAgB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,gBAAgB,CAAC,CAAC4B,OAAO,EAAEzG,IAAI,CAACe,GAAG,CAAC8G,SAAS,IAAIzH,cAAc,CAACyH,SAAS,CAAC,CAAC,EAAEG,WAAW,CAACjH,GAAG,CAAC8G,SAAS,IAAIzH,cAAc,CAACyH,SAAS,CAAC,CAAC,CAAC;gBACzMrF,eAAe,CAACxC,IAAI,CAAC;cACvB,CAAC,MAAM;gBACL;gBACA,MAAMiI,iBAAiB,GAAGlG,mBAAmB,CAACxC,KAAK;gBACnD,IAAIC,aAAa,EAAE;kBACjB,MAAMqC,WAAW,GAAG4E,OAAO,GAAGjJ,MAAM,CAACyK,iBAAiB,EAAE9H,GAAG,CAAC,GAAG5C,MAAM,CAAC0K,iBAAiB,EAAE9H,GAAG,CAAC;kBAC7F2C,sBAAsB,CAAC3C,GAAG,EAAE,CAACsG,OAAO,EAAE5E,WAAW,EAAEuF,WAAW,CAAC;gBACjE,CAAC,MAAM;kBACL;kBACA,MAAMc,MAAM,GAAGzK,YAAY,CAAC,CAAC,GAAGwK,iBAAiB,EAAE9H,GAAG,CAAC,EAAE,IAAI,EAAEK,WAAW,CAACjB,KAAK,EAAE+B,QAAQ,CAAC/B,KAAK,EAAEgC,aAAa,CAAChC,KAAK,EAAEiC,kBAAkB,CAAC;kBAC1I,MAAM;oBACJK,WAAW;oBACXC;kBACF,CAAC,GAAGoG,MAAM;kBACV,IAAIC,eAAe,GAAGtG,WAAW;kBACjC;kBACA,IAAI4E,OAAO,EAAE;oBACX,MAAM2B,UAAU,GAAG,IAAIhG,GAAG,CAACP,WAAW,CAAC;oBACvCuG,UAAU,CAACjE,MAAM,CAAChE,GAAG,CAAC;oBACtBgI,eAAe,GAAG1K,YAAY,CAAC4G,KAAK,CAACC,IAAI,CAAC8D,UAAU,CAAC,EAAE;sBACrD3B,OAAO,EAAE,KAAK;sBACd3E;oBACF,CAAC,EAAEtB,WAAW,CAACjB,KAAK,EAAE+B,QAAQ,CAAC/B,KAAK,EAAEgC,aAAa,CAAChC,KAAK,EAAEiC,kBAAkB,CAAC,CAACK,WAAW;kBAC5F;kBACAiB,sBAAsB,CAAC3C,GAAG,EAAE,CAACsG,OAAO,EAAE0B,eAAe,EAAEf,WAAW,CAAC;gBACrE;cACF;cACA7E,kBAAkB,CAACpC,GAAG,CAAC;YACzB;UACF,CAAC,CAAC,EAAE,IAAI,CAAC;UACTsG;QACF,CAAC;MACH,CAAC;IACH;IACA,MAAM4B,mBAAmB,GAAGC,KAAK,IAAI;MACnC,IAAI;QACFtJ,MAAM;QACNiC;MACF,CAAC,GAAGqH,KAAK;MACT,MAAM;QACJrB,IAAI;QACJR;MACF,CAAC,GAAGvB,UAAU,CAAC;QACblG,MAAM;QACNiC;MACF,CAAC,CAAC;MACF,IAAIkE,mBAAmB,EAAE;QACvB,OAAOA,mBAAmB,CAACsB,OAAO,EAAEzH,MAAM,EAAEiC,KAAK,EAAEgG,IAAI,CAAC;MAC1D;MACA,OAAOA,IAAI;IACb,CAAC;IACD;IACA,IAAI,CAACxB,YAAY,CAACF,QAAQ,CAACjH,gBAAgB,CAAC,EAAE;MAC5C;MACA,IAAImH,YAAY,CAAC8C,SAAS,CAAC/C,GAAG,IAAI;QAChC,IAAI9D,EAAE;QACN,OAAO,CAAC,CAACA,EAAE,GAAG8D,GAAG,CAAClI,mBAAmB,CAAC,MAAM,IAAI,IAAIoE,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC8G,UAAU,MAAM,eAAe;MACjH,CAAC,CAAC,KAAK,CAAC,EAAE;QACR,MAAM,CAACC,YAAY,EAAE,GAAGC,WAAW,CAAC,GAAGjD,YAAY;QACnDA,YAAY,GAAG,CAACgD,YAAY,EAAEnK,gBAAgB,EAAE,GAAGoK,WAAW,CAAC;MACjE,CAAC,MAAM;QACL;QACAjD,YAAY,GAAG,CAACnH,gBAAgB,EAAE,GAAGmH,YAAY,CAAC;MACpD;IACF;IACA;IACA,MAAMkD,oBAAoB,GAAGlD,YAAY,CAACmD,OAAO,CAACtK,gBAAgB,CAAC;IACnE,IAAI6C,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAIoE,YAAY,CAAC1B,MAAM,CAACyB,GAAG,IAAIA,GAAG,KAAKlH,gBAAgB,CAAC,CAACmG,MAAM,GAAG,CAAC,EAAE;MAC5G9G,UAAU,CAAC,KAAK,EAAE,OAAO,EAAE,iDAAiD,CAAC;IAC/E;IACA8H,YAAY,GAAGA,YAAY,CAAC1B,MAAM,CAAC,CAAC8E,MAAM,EAAE5H,KAAK,KAAK4H,MAAM,KAAKvK,gBAAgB,IAAI2C,KAAK,KAAK0H,oBAAoB,CAAC;IACpH;IACA,MAAMG,OAAO,GAAGrD,YAAY,CAACkD,oBAAoB,GAAG,CAAC,CAAC;IACtD,MAAMI,OAAO,GAAGtD,YAAY,CAACkD,oBAAoB,GAAG,CAAC,CAAC;IACtD,IAAIK,WAAW,GAAG/D,KAAK;IACvB,IAAI+D,WAAW,KAAKnG,SAAS,EAAE;MAC7B,IAAI,CAACkG,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAAC9D,KAAK,MAAMpC,SAAS,EAAE;QACnFmG,WAAW,GAAGD,OAAO,CAAC9D,KAAK;MAC7B,CAAC,MAAM,IAAI,CAAC6D,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAAC7D,KAAK,MAAMpC,SAAS,EAAE;QAC1FmG,WAAW,GAAGF,OAAO,CAAC7D,KAAK;MAC7B;IACF;IACA,IAAI+D,WAAW,IAAIF,OAAO,IAAI,CAAC,CAACpH,EAAE,GAAGoH,OAAO,CAACxL,mBAAmB,CAAC,MAAM,IAAI,IAAIoE,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC8G,UAAU,MAAM,eAAe,IAAIM,OAAO,CAAC7D,KAAK,KAAKpC,SAAS,EAAE;MACzKiG,OAAO,CAAC7D,KAAK,GAAG+D,WAAW;IAC7B;IACA;IACA,MAAMC,eAAe,GAAG;MACtBhE,KAAK,EAAE+D,WAAW;MAClBE,KAAK,EAAEnE,iBAAiB;MACxBoE,SAAS,EAAG,GAAE/D,SAAS,CAAC7F,KAAM,mBAAkB;MAChD0G,KAAK,EAAE5G,kBAAkB,CAACE,KAAK,CAAC6J,WAAW,IAAInD,KAAK;MACpDoD,YAAY,EAAEhB,mBAAmB;MACjC,CAAC/K,mBAAmB,GAAG;QACrBgM,KAAK,EAAG,GAAElE,SAAS,CAAC7F,KAAM;MAC5B;IACF,CAAC;IACD,OAAOkG,YAAY,CAAC1E,GAAG,CAACyE,GAAG,IAAIA,GAAG,KAAKlH,gBAAgB,GAAG2K,eAAe,GAAGzD,GAAG,CAAC;EAClF,CAAC;EACD,OAAO,CAACd,gBAAgB,EAAEzC,qBAAqB,CAAC;AAClD"},"metadata":{},"sourceType":"module","externalDependencies":[]}