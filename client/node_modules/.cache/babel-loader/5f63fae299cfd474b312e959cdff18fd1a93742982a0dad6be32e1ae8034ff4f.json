{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport get from './get';\nfunction internalSet(entity, paths, value, removeIfUndefined) {\n  if (!paths.length) {\n    return value;\n  }\n  const [path, ...restPath] = paths;\n  let clone;\n  if (!entity && typeof path === 'number') {\n    clone = [];\n  } else if (Array.isArray(entity)) {\n    clone = [...entity];\n  } else {\n    clone = _extends({}, entity);\n  }\n  // Delete prop if `removeIfUndefined` and value is undefined\n  if (removeIfUndefined && value === undefined && restPath.length === 1) {\n    delete clone[path][restPath[0]];\n  } else {\n    clone[path] = internalSet(clone[path], restPath, value, removeIfUndefined);\n  }\n  return clone;\n}\nexport default function set(entity, paths, value) {\n  let removeIfUndefined = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  // Do nothing if `removeIfUndefined` and parent object not exist\n  if (paths.length && removeIfUndefined && value === undefined && !get(entity, paths.slice(0, -1))) {\n    return entity;\n  }\n  return internalSet(entity, paths, value, removeIfUndefined);\n}","map":{"version":3,"names":["_extends","get","internalSet","entity","paths","value","removeIfUndefined","length","path","restPath","clone","Array","isArray","undefined","set","arguments","slice"],"sources":["/Users/lpl/工作/Teamsupport/develop_help/node_modules/ant-design-vue/es/vc-util/set.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport get from './get';\nfunction internalSet(entity, paths, value, removeIfUndefined) {\n  if (!paths.length) {\n    return value;\n  }\n  const [path, ...restPath] = paths;\n  let clone;\n  if (!entity && typeof path === 'number') {\n    clone = [];\n  } else if (Array.isArray(entity)) {\n    clone = [...entity];\n  } else {\n    clone = _extends({}, entity);\n  }\n  // Delete prop if `removeIfUndefined` and value is undefined\n  if (removeIfUndefined && value === undefined && restPath.length === 1) {\n    delete clone[path][restPath[0]];\n  } else {\n    clone[path] = internalSet(clone[path], restPath, value, removeIfUndefined);\n  }\n  return clone;\n}\nexport default function set(entity, paths, value) {\n  let removeIfUndefined = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  // Do nothing if `removeIfUndefined` and parent object not exist\n  if (paths.length && removeIfUndefined && value === undefined && !get(entity, paths.slice(0, -1))) {\n    return entity;\n  }\n  return internalSet(entity, paths, value, removeIfUndefined);\n}"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAOC,GAAG,MAAM,OAAO;AACvB,SAASC,WAAWA,CAACC,MAAM,EAAEC,KAAK,EAAEC,KAAK,EAAEC,iBAAiB,EAAE;EAC5D,IAAI,CAACF,KAAK,CAACG,MAAM,EAAE;IACjB,OAAOF,KAAK;EACd;EACA,MAAM,CAACG,IAAI,EAAE,GAAGC,QAAQ,CAAC,GAAGL,KAAK;EACjC,IAAIM,KAAK;EACT,IAAI,CAACP,MAAM,IAAI,OAAOK,IAAI,KAAK,QAAQ,EAAE;IACvCE,KAAK,GAAG,EAAE;EACZ,CAAC,MAAM,IAAIC,KAAK,CAACC,OAAO,CAACT,MAAM,CAAC,EAAE;IAChCO,KAAK,GAAG,CAAC,GAAGP,MAAM,CAAC;EACrB,CAAC,MAAM;IACLO,KAAK,GAAGV,QAAQ,CAAC,CAAC,CAAC,EAAEG,MAAM,CAAC;EAC9B;EACA;EACA,IAAIG,iBAAiB,IAAID,KAAK,KAAKQ,SAAS,IAAIJ,QAAQ,CAACF,MAAM,KAAK,CAAC,EAAE;IACrE,OAAOG,KAAK,CAACF,IAAI,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAC;EACjC,CAAC,MAAM;IACLC,KAAK,CAACF,IAAI,CAAC,GAAGN,WAAW,CAACQ,KAAK,CAACF,IAAI,CAAC,EAAEC,QAAQ,EAAEJ,KAAK,EAAEC,iBAAiB,CAAC;EAC5E;EACA,OAAOI,KAAK;AACd;AACA,eAAe,SAASI,GAAGA,CAACX,MAAM,EAAEC,KAAK,EAAEC,KAAK,EAAE;EAChD,IAAIC,iBAAiB,GAAGS,SAAS,CAACR,MAAM,GAAG,CAAC,IAAIQ,SAAS,CAAC,CAAC,CAAC,KAAKF,SAAS,GAAGE,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK;EACjG;EACA,IAAIX,KAAK,CAACG,MAAM,IAAID,iBAAiB,IAAID,KAAK,KAAKQ,SAAS,IAAI,CAACZ,GAAG,CAACE,MAAM,EAAEC,KAAK,CAACY,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE;IAChG,OAAOb,MAAM;EACf;EACA,OAAOD,WAAW,CAACC,MAAM,EAAEC,KAAK,EAAEC,KAAK,EAAEC,iBAAiB,CAAC;AAC7D"},"metadata":{},"sourceType":"module","externalDependencies":[]}