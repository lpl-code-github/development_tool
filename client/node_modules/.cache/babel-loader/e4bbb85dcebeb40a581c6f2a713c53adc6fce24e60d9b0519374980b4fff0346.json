{"ast":null,"code":"import SwitchComponent from \"@/components/switch/SwitchComponent\";\nimport Statistics from \"@/components/preview/Statistics\";\nexport default {\n  // eslint-disable-next-line vue/multi-word-component-names\n  name: 'MyHeader',\n  components: {\n    Statistics,\n    SwitchComponent\n  },\n  props: {\n    msg: String\n  },\n  data() {\n    return {\n      openDrawer: false,\n      buttonSize: \"small\",\n      loadingUpdateSystem: false,\n      popoverIsShow: false,\n      switchComponentData: [{\n        tooltipText: \"此开关打开，开发环境下，后端API将返回Symfony的报错信息，否则返回json的报错信息\",\n        switchText: \"开发报错信息\",\n        type: \"dev_env_error_message\",\n        checked: false\n      }, {\n        tooltipText: \"此开关打开，测试环境下，后端API将返回Symfony的报错信息，否则返回json的报错信息\",\n        switchText: \"测试报错信息\",\n        type: \"test_env_error_message\",\n        checked: false\n      }, {\n        tooltipText: \"此开关打开，后端代码的.env文件中将修改环境遍历APP_ENV=test，否则为dev\",\n        switchText: \"切换测试模式\",\n        type: \"test_env\",\n        checked: false\n      }, {\n        tooltipText: \"此开关打开，后端将增加供postman使用的/backup和/reduction端点\",\n        switchText: \"导入备份端点\",\n        type: \"back_api\",\n        checked: false\n      }],\n      systemStatus: {\n        \"cpu_usage\": 0,\n        \"memory_usage\": 0\n      },\n      timer: null\n    };\n  },\n  watch: {\n    openDrawer: {\n      handler: function (newVal, oldVal) {\n        if (oldVal === true && newVal === false) {\n          // 关闭Drawer\n          if (this.timer) {\n            //如果定时器还在运行\n            clearInterval(this.timer); //关闭\n          }\n        } else {\n          // 打开Drawer\n          // 轮询请求\n          this.timer = setInterval(this.handleGetDockerInfo, 2000); //2秒去获取一次容器信息\n        }\n      },\n\n      // 深度观察监听\n      deep: true\n    }\n  },\n  mounted() {\n    document.addEventListener('click', this.handleOutsideClick);\n  },\n  beforeDestroy() {\n    if (this.timer) {\n      //如果定时器还在运行\n      clearInterval(this.timer); //关闭\n    }\n\n    document.removeEventListener('click', this.handleOutsideClick);\n  },\n  methods: {\n    /*\n      一些请求事件\n     */\n    // 初始化switch开关的状态\n    async handleQuickSwitch() {\n      await this.$request.switchStatus().then(res => {\n        if (res.status !== 200) {\n          this.popoverIsShow = false;\n        } else {\n          this.popoverIsShow = true;\n          var data = res.data.data;\n          var temp = this.switchComponentData;\n          temp.forEach(componentDataItem => {\n            const responseItem = data.find(item => item.type === componentDataItem.type);\n            if (responseItem) {\n              componentDataItem.checked = responseItem.checked;\n            }\n          });\n          this.switchComponentData = temp;\n        }\n      });\n    },\n    // 清除缓存\n    handleClearCache() {\n      var message = this.$message;\n      var loadingMessage = message.loading('RISKID环境中正在执行php bin/console cache:clear，您可以继续进行其他操作', 0);\n      this.$request.clearR1Cache().then(res => {\n        if (res.status !== 200) {\n          this.popoverIsShow = false;\n        } else {\n          if (res.data.data.handle === true) {\n            setTimeout(loadingMessage, 0);\n            message.success('清除缓存执行成功', 2.5);\n          } else {\n            setTimeout(loadingMessage, 0);\n            message.success('执行失败，请去手动执行命令php bin/console cache:clear', 2.5);\n          }\n        }\n        this.$bus.$emit('requestCompleted');\n      });\n    },\n    // 获取容器信息\n    handleGetDockerInfo() {\n      this.$request.getDockerSystemStatus().then(res => {\n        if (res.status !== 200) {\n          this.$message.error(\"获取容器硬件信息失败\");\n          this.openDrawer = false;\n        } else {\n          this.$request.getDockerSystemStatus().then(res => {\n            if (res.status !== 200) {\n              this.$message.error(\"获取容器硬件信息失败\");\n              this.openDrawer = false;\n            } else {}\n          });\n          this.systemStatus = res.data;\n          this.openDrawer = true;\n        }\n      });\n    },\n    // 打开抽屉\n    handleOpenDrawer() {\n      this.handleGetDockerInfo();\n    },\n    // 获取抽屉状态\n    getDrawerStatus(status) {\n      this.openDrawer = status;\n    },\n    // 监听手动关闭popover\n    handleOutsideClick(event) {\n      if (this.popoverIsShow && !this.$refs.popover.$el.contains(event.target)) {\n        this.popoverIsShow = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["SwitchComponent","Statistics","name","components","props","msg","String","data","openDrawer","buttonSize","loadingUpdateSystem","popoverIsShow","switchComponentData","tooltipText","switchText","type","checked","systemStatus","timer","watch","handler","newVal","oldVal","clearInterval","setInterval","handleGetDockerInfo","deep","mounted","document","addEventListener","handleOutsideClick","beforeDestroy","removeEventListener","methods","handleQuickSwitch","$request","switchStatus","then","res","status","temp","forEach","componentDataItem","responseItem","find","item","handleClearCache","message","$message","loadingMessage","loading","clearR1Cache","handle","setTimeout","success","$bus","$emit","getDockerSystemStatus","error","handleOpenDrawer","getDrawerStatus","event","$refs","popover","$el","contains","target"],"sources":["src/components/common/MyHeader.vue"],"sourcesContent":["<template>\n  <div class=\"header\">\n    <a-layout-header style=\"background: #fff; padding: 0;display: flex;justify-content: space-between;align-items: center;padding: 0 20px\">\n      <div style=\"float: right\">\n        <span style=\"font-size: medium;font-weight: bolder\">RISKID开发者工具</span>\n      </div>\n      <div style=\"float: left\">\n        <a-button icon=\"setting\" :size=\"buttonSize\" style=\"margin-right: 20px\" :loading=\"loadingUpdateSystem\" @click=\"handleOpenDrawer\">\n          R1概览\n        </a-button>\n\n        <!--快捷开关-->\n        <a-popover ref=\"popover\" title=\"开关\" placement=\"topLeft\" trigger=\"click\" @click=\"handleQuickSwitch\" :visible=\"popoverIsShow\">\n          <template slot=\"content\">\n            <SwitchComponent\n                v-for=\"(item,index) in switchComponentData\"\n                :key=\"index\"\n                :type=\"item.type\"\n                :switch-text=\"item.switchText\"\n                :tooltip-text=\"item.tooltipText\"\n                :flag = \"item.checked\"\n            />\n            <a-button type=\"primary\" style=\"margin:10px 0\" block @click=\"handleClearCache\">\n              R1清除缓存\n            </a-button>\n          </template>\n          <a-button icon=\"setting\" :size=\"buttonSize\">\n            快捷开关\n          </a-button>\n        </a-popover>\n      </div>\n\n    </a-layout-header>\n\n    <Statistics :system-status=\"systemStatus\" @updateDrawerStatus=\"getDrawerStatus\" :open-flag=\"openDrawer\"></Statistics>\n  </div>\n</template>\n\n<script>\nimport SwitchComponent from \"@/components/switch/SwitchComponent\";\nimport Statistics from \"@/components/preview/Statistics\";\n\nexport default {\n  // eslint-disable-next-line vue/multi-word-component-names\n  name: 'MyHeader',\n  components: {Statistics, SwitchComponent},\n  props: {\n    msg: String\n  },\n  data() {\n    return {\n      openDrawer: false,\n      buttonSize: \"small\",\n      loadingUpdateSystem: false,\n      popoverIsShow: false,\n      switchComponentData: [\n        {\n          tooltipText: \"此开关打开，开发环境下，后端API将返回Symfony的报错信息，否则返回json的报错信息\",\n          switchText: \"开发报错信息\",\n          type: \"dev_env_error_message\",\n          checked: false\n        },\n        {\n          tooltipText: \"此开关打开，测试环境下，后端API将返回Symfony的报错信息，否则返回json的报错信息\",\n          switchText: \"测试报错信息\",\n          type: \"test_env_error_message\",\n          checked: false\n        },\n        {\n          tooltipText: \"此开关打开，后端代码的.env文件中将修改环境遍历APP_ENV=test，否则为dev\",\n          switchText: \"切换测试模式\",\n          type: \"test_env\",\n          checked: false\n        },\n        {\n          tooltipText: \"此开关打开，后端将增加供postman使用的/backup和/reduction端点\",\n          switchText: \"导入备份端点\",\n          type: \"back_api\",\n          checked: false\n        }\n      ],\n      systemStatus:{\n        \"cpu_usage\":0,\n        \"memory_usage\":0\n      },\n      timer: null,\n    }\n  },\n  watch:{\n    openDrawer:{\n      handler: function (newVal, oldVal) {\n        if (oldVal === true && newVal === false){// 关闭Drawer\n          if (this.timer) { //如果定时器还在运行\n            clearInterval(this.timer); //关闭\n          }\n        }else { // 打开Drawer\n          // 轮询请求\n          this.timer = setInterval(this.handleGetDockerInfo, 2000); //2秒去获取一次容器信息\n        }\n      },\n      // 深度观察监听\n      deep: true\n    }\n  },\n  mounted() {\n    document.addEventListener('click', this.handleOutsideClick);\n  },\n  beforeDestroy() {\n    if (this.timer) { //如果定时器还在运行\n      clearInterval(this.timer); //关闭\n    }\n    document.removeEventListener('click', this.handleOutsideClick);\n  },\n  methods: {\n    /*\n      一些请求事件\n     */\n    // 初始化switch开关的状态\n    async handleQuickSwitch() {\n      await this.$request.switchStatus().then(res => {\n        if (res.status !== 200) {\n          this.popoverIsShow = false\n        }else {\n          this.popoverIsShow = true\n          var data = res.data.data\n          var temp = this.switchComponentData\n          temp.forEach(componentDataItem => {\n            const responseItem = data.find(item => item.type === componentDataItem.type);\n            if (responseItem) {\n              componentDataItem.checked = responseItem.checked;\n            }\n          });\n          this.switchComponentData = temp\n        }\n      })\n    },\n    // 清除缓存\n    handleClearCache(){\n      var message = this.$message\n      var loadingMessage = message.loading('RISKID环境中正在执行php bin/console cache:clear，您可以继续进行其他操作', 0)\n      this.$request.clearR1Cache().then(res=>{\n        if (res.status !== 200) {\n          this.popoverIsShow = false\n        }else {\n          if (res.data.data.handle === true){\n            setTimeout(loadingMessage, 0);\n            message.success('清除缓存执行成功', 2.5)\n          }else {\n            setTimeout(loadingMessage, 0);\n            message.success('执行失败，请去手动执行命令php bin/console cache:clear', 2.5)\n          }\n        }\n        this.$bus.$emit('requestCompleted');\n      })\n    },\n    // 获取容器信息\n    handleGetDockerInfo(){\n      this.$request.getDockerSystemStatus().then(res=>{\n        if (res.status !== 200) {\n          this.$message.error(\"获取容器硬件信息失败\");\n          this.openDrawer = false\n        }else {\n          this.$request.getDockerSystemStatus().then(res =>{\n            if (res.status !== 200) {\n              this.$message.error(\"获取容器硬件信息失败\");\n              this.openDrawer = false\n            }else {\n\n            }\n          })\n          this.systemStatus = res.data\n          this.openDrawer = true\n        }\n      })\n    },\n\n    // 打开抽屉\n    handleOpenDrawer(){\n      this.handleGetDockerInfo()\n    },\n    // 获取抽屉状态\n    getDrawerStatus(status){\n      this.openDrawer = status\n    },\n\n    // 监听手动关闭popover\n    handleOutsideClick(event) {\n      if (this.popoverIsShow  && !this.$refs.popover.$el.contains(event.target)) {\n        this.popoverIsShow = false\n      }\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\n\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\n\na {\n  color: #42b983;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}