{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: \"AddScript\",\n  components: {\n    VNodes: {\n      functional: true,\n      render: (h, ctx) => ctx.props.vnodes\n    }\n  },\n  props: {\n    openFlag: {\n      type: Boolean,\n      required: true\n    },\n    filterOption: {\n      type: Array,\n      required: true\n    } // 所有的tags选项\n  },\n\n  data() {\n    return {\n      loading: false,\n      // modal按钮的loading\n      visible: false,\n      // modal可见开关\n      childrenModelVisible: false,\n      // 子modal的可见\n      childrenModelRules: {\n        name: [{\n          required: true,\n          message: '请输入标签内容',\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 20,\n          message: '长度必须在 1 ～ 20',\n          trigger: 'blur'\n        }]\n      },\n      // 子modal的校验规则\n      formLayout: 'horizontal',\n      form: this.$form.createForm(this, {\n        name: 'coordinated'\n      }),\n      // 主modal的form对象\n      dynamicValidateForm: {\n        properties: []\n      },\n      // 动态菜单的值\n      formItemLayout: {\n        labelCol: {\n          xs: {\n            span: 3\n          },\n          sm: {\n            span: 3\n          }\n        },\n        wrapperCol: {\n          xs: {\n            span: 20\n          },\n          sm: {\n            span: 20\n          }\n        }\n      },\n      // 动态菜单输入框的栅格布局\n      formItemLayoutWithOutLabel: {\n        wrapperCol: {\n          xs: {\n            span: 22,\n            offset: 1\n          },\n          sm: {\n            span: 22,\n            offset: 1\n          }\n        }\n      },\n      // 动态菜单按钮的栅格布局\n      tags: [],\n      // 所有已经在数据库的tags\n      selectedItems: [],\n      // 被选中的\n      newTag: {\n        name: \"\",\n        color: '#61afd1'\n      },\n      // 新标签的form modal中的默认值\n      fileList: [],\n      // 上传文件列表，只允许上传一个\n      componentKey: 0\n    };\n  },\n  watch: {\n    openFlag: {\n      handler: function (newVal, oldVal) {\n        this.visible = newVal;\n      },\n      // 深度观察监听\n      deep: true\n    },\n    filterOption: {\n      handler: function (newVal, oldVal) {\n        this.tags = newVal;\n      },\n      // 深度观察监听\n      deep: true\n    }\n  },\n  computed: {\n    filteredSelectedOptions() {\n      return this.tags.filter(o => !this.selectedItems.includes(o.id));\n    }\n  },\n  mounted() {\n    this.visible = this.openFlag;\n    this.tags = this.filterOption;\n  },\n  methods: {\n    /*\n      tags选择器部分\n     */\n    // 选择标签\n    handleSelect(selectedItems) {\n      this.selectedItems = selectedItems;\n    },\n    // 打开添加新标签的子modal\n    addItemClick() {\n      this.childrenModelVisible = true;\n    },\n    // 添加一个新标签的请求\n    addTag() {\n      this.$refs.ruleForm.validate(valid => {\n        if (valid) {\n          var data = {\n            data: this.newTag\n          };\n          this.$request.postTags(data).then(res => {\n            if (res.status === 200) {\n              this.$message.success(\"添加标签成功\");\n              // 请求成功后 将新的数据添加到tags\n              this.tags.push(res.data.data[0]);\n            } else {\n              this.$message.error(\"添加标签失败\");\n            }\n          });\n          this.initTagFormData();\n          this.childrenModelVisible = false;\n        } else {\n          return false;\n        }\n      });\n    },\n    // 重置添加新标签的子modal\n    initTagFormData() {\n      if (this.$refs.ruleForm) {\n        this.$refs.ruleForm.resetFields();\n      }\n    },\n    /*\n      动态菜单 （命令行参数）\n     */\n    // 移除动态菜单\n    removeProperties(item) {\n      let index = this.dynamicValidateForm.properties.indexOf(item);\n      if (index !== -1) {\n        this.dynamicValidateForm.properties.splice(index, 1);\n      }\n    },\n    // 添加动态菜单\n    addProperties() {\n      this.dynamicValidateForm.properties.push({\n        value: '',\n        key: Date.now()\n      });\n    },\n    /*\n      一些请求事件\n     */\n    // 创建脚本按钮事件\n    handleOk(e) {\n      this.loading = true;\n      e.preventDefault();\n      this.form.validateFields(async (err, values) => {\n        if (!err) {\n          if (this.fileList.length === 0) {\n            this.$message.error(\"还没有上传脚本文件\");\n            this.loading = false;\n            return;\n          }\n          this.uploadScriptFileAndPostScriptData(values);\n        } else {\n          this.loading = false;\n        }\n      });\n    },\n    // 文件上传 成功后添加脚本\n    uploadScriptFileAndPostScriptData(formData) {\n      if (this.fileList.length === 0) {\n        this.$message.warning('请上传文件');\n      } else {\n        const file = this.fileList[0];\n        let type = file.name.toLowerCase().substr(file.name.lastIndexOf('.'));\n        if (type !== '.sh') {\n          this.$message.warning('请上传sh文件');\n          return false;\n        }\n        this.fileList = [file];\n        const fd = new FormData();\n        this.fileList.forEach(file => {\n          fd.append('file', file);\n        });\n        this.$request.uploadFile(fd, 'script').then(res => {\n          if (res.status === 200) {\n            var path = res.data.data.path;\n\n            // 构造参数properties\n            var properties = [];\n            this.dynamicValidateForm.properties.forEach(item => {\n              properties.push(item.value);\n            });\n            // 构造参数tags\n            const tags = this.selectedItems.map(el => ({\n              id: el\n            }));\n            // post参数\n            var param = {\n              data: {\n                name: formData.name,\n                description: formData.description,\n                tags: tags,\n                path: path,\n                properties: properties\n              }\n            };\n            this.$request.postScriptData(param).then(res => {\n              if (res.status === 200) {\n                this.$message.success(\"添加脚本成功\");\n                // 请求成功后 将新增的值传给父组件\n                this.$emit('submit', res.data.data);\n                setTimeout(() => {\n                  this.initFormData();\n                  this.$emit('updateModelStatus', false);\n                  this.loading = false;\n                }, 100);\n              } else {\n                this.loading = false;\n                this.$message.error(\"添加脚本失败\");\n              }\n            });\n          } else {\n            this.loading = false;\n            this.$message.error(\"上传脚本失败\");\n          }\n        });\n      }\n    },\n    // 文件上传前的事件\n    beforeUpload(file) {\n      return new Promise((resolve, reject) => {\n        let type = file.name.toLowerCase().substr(file.name.lastIndexOf('.'));\n        if (type !== '.sh') {\n          this.$message.warning('请上传sh文件');\n          return reject(false);\n        }\n        this.fileList = [file];\n        return false;\n      });\n    },\n    /*\n      向父组件传值：组件状态\n     */\n    handleCancel(e) {\n      this.initTagFormData();\n      this.initFormData();\n      this.$emit('updateModelStatus', false);\n    },\n    afterClose(e) {\n      this.initTagFormData();\n      this.initFormData();\n      this.$emit('updateModelStatus', false);\n    },\n    /*\n      内部方法\n     */\n    // 将index转为字符串并加1\n    incrementIndex(index) {\n      return parseInt(index) + 1;\n    },\n    // 重置表格 重置fileList\n    initFormData() {\n      this.form.resetFields();\n      this.tags = [];\n      this.fileList = [];\n      this.selectedItems = [];\n      this.dynamicValidateForm = {\n        properties: []\n      };\n      this.componentKey += 1;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}