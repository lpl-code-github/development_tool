{"ast":null,"code":"import { warning } from '../../../vc-util/warning';\nimport { ref } from 'vue';\n/**\n * Keep input cursor in the correct position if possible.\n * Is this necessary since we have `formatter` which may mass the content?\n */\nexport default function useCursor(inputRef, focused) {\n  const selectionRef = ref(null);\n  function recordCursor() {\n    // Record position\n    try {\n      const {\n        selectionStart: start,\n        selectionEnd: end,\n        value\n      } = inputRef.value;\n      const beforeTxt = value.substring(0, start);\n      const afterTxt = value.substring(end);\n      selectionRef.value = {\n        start,\n        end,\n        value,\n        beforeTxt,\n        afterTxt\n      };\n    } catch (e) {\n      // Fix error in Chrome:\n      // Failed to read the 'selectionStart' property from 'HTMLInputElement'\n      // http://stackoverflow.com/q/21177489/3040605\n    }\n  }\n  /**\n   * Restore logic:\n   *  1. back string same\n   *  2. start string same\n   */\n  function restoreCursor() {\n    if (inputRef.value && selectionRef.value && focused.value) {\n      try {\n        const {\n          value\n        } = inputRef.value;\n        const {\n          beforeTxt,\n          afterTxt,\n          start\n        } = selectionRef.value;\n        let startPos = value.length;\n        if (value.endsWith(afterTxt)) {\n          startPos = value.length - selectionRef.value.afterTxt.length;\n        } else if (value.startsWith(beforeTxt)) {\n          startPos = beforeTxt.length;\n        } else {\n          const beforeLastChar = beforeTxt[start - 1];\n          const newIndex = value.indexOf(beforeLastChar, start - 1);\n          if (newIndex !== -1) {\n            startPos = newIndex + 1;\n          }\n        }\n        inputRef.value.setSelectionRange(startPos, startPos);\n      } catch (e) {\n        warning(false, `Something warning of cursor restore. Please fire issue about this: ${e.message}`);\n      }\n    }\n  }\n  return [recordCursor, restoreCursor];\n}","map":{"version":3,"names":["warning","ref","useCursor","inputRef","focused","selectionRef","recordCursor","selectionStart","start","selectionEnd","end","value","beforeTxt","substring","afterTxt","e","restoreCursor","startPos","length","endsWith","startsWith","beforeLastChar","newIndex","indexOf","setSelectionRange","message"],"sources":["/Users/lpl/工作/Teamsupport/develop_help/node_modules/ant-design-vue/es/input-number/src/hooks/useCursor.js"],"sourcesContent":["import { warning } from '../../../vc-util/warning';\nimport { ref } from 'vue';\n/**\n * Keep input cursor in the correct position if possible.\n * Is this necessary since we have `formatter` which may mass the content?\n */\nexport default function useCursor(inputRef, focused) {\n  const selectionRef = ref(null);\n  function recordCursor() {\n    // Record position\n    try {\n      const {\n        selectionStart: start,\n        selectionEnd: end,\n        value\n      } = inputRef.value;\n      const beforeTxt = value.substring(0, start);\n      const afterTxt = value.substring(end);\n      selectionRef.value = {\n        start,\n        end,\n        value,\n        beforeTxt,\n        afterTxt\n      };\n    } catch (e) {\n      // Fix error in Chrome:\n      // Failed to read the 'selectionStart' property from 'HTMLInputElement'\n      // http://stackoverflow.com/q/21177489/3040605\n    }\n  }\n  /**\n   * Restore logic:\n   *  1. back string same\n   *  2. start string same\n   */\n  function restoreCursor() {\n    if (inputRef.value && selectionRef.value && focused.value) {\n      try {\n        const {\n          value\n        } = inputRef.value;\n        const {\n          beforeTxt,\n          afterTxt,\n          start\n        } = selectionRef.value;\n        let startPos = value.length;\n        if (value.endsWith(afterTxt)) {\n          startPos = value.length - selectionRef.value.afterTxt.length;\n        } else if (value.startsWith(beforeTxt)) {\n          startPos = beforeTxt.length;\n        } else {\n          const beforeLastChar = beforeTxt[start - 1];\n          const newIndex = value.indexOf(beforeLastChar, start - 1);\n          if (newIndex !== -1) {\n            startPos = newIndex + 1;\n          }\n        }\n        inputRef.value.setSelectionRange(startPos, startPos);\n      } catch (e) {\n        warning(false, `Something warning of cursor restore. Please fire issue about this: ${e.message}`);\n      }\n    }\n  }\n  return [recordCursor, restoreCursor];\n}"],"mappings":"AAAA,SAASA,OAAO,QAAQ,0BAA0B;AAClD,SAASC,GAAG,QAAQ,KAAK;AACzB;AACA;AACA;AACA;AACA,eAAe,SAASC,SAASA,CAACC,QAAQ,EAAEC,OAAO,EAAE;EACnD,MAAMC,YAAY,GAAGJ,GAAG,CAAC,IAAI,CAAC;EAC9B,SAASK,YAAYA,CAAA,EAAG;IACtB;IACA,IAAI;MACF,MAAM;QACJC,cAAc,EAAEC,KAAK;QACrBC,YAAY,EAAEC,GAAG;QACjBC;MACF,CAAC,GAAGR,QAAQ,CAACQ,KAAK;MAClB,MAAMC,SAAS,GAAGD,KAAK,CAACE,SAAS,CAAC,CAAC,EAAEL,KAAK,CAAC;MAC3C,MAAMM,QAAQ,GAAGH,KAAK,CAACE,SAAS,CAACH,GAAG,CAAC;MACrCL,YAAY,CAACM,KAAK,GAAG;QACnBH,KAAK;QACLE,GAAG;QACHC,KAAK;QACLC,SAAS;QACTE;MACF,CAAC;IACH,CAAC,CAAC,OAAOC,CAAC,EAAE;MACV;MACA;MACA;IAAA;EAEJ;EACA;AACF;AACA;AACA;AACA;EACE,SAASC,aAAaA,CAAA,EAAG;IACvB,IAAIb,QAAQ,CAACQ,KAAK,IAAIN,YAAY,CAACM,KAAK,IAAIP,OAAO,CAACO,KAAK,EAAE;MACzD,IAAI;QACF,MAAM;UACJA;QACF,CAAC,GAAGR,QAAQ,CAACQ,KAAK;QAClB,MAAM;UACJC,SAAS;UACTE,QAAQ;UACRN;QACF,CAAC,GAAGH,YAAY,CAACM,KAAK;QACtB,IAAIM,QAAQ,GAAGN,KAAK,CAACO,MAAM;QAC3B,IAAIP,KAAK,CAACQ,QAAQ,CAACL,QAAQ,CAAC,EAAE;UAC5BG,QAAQ,GAAGN,KAAK,CAACO,MAAM,GAAGb,YAAY,CAACM,KAAK,CAACG,QAAQ,CAACI,MAAM;QAC9D,CAAC,MAAM,IAAIP,KAAK,CAACS,UAAU,CAACR,SAAS,CAAC,EAAE;UACtCK,QAAQ,GAAGL,SAAS,CAACM,MAAM;QAC7B,CAAC,MAAM;UACL,MAAMG,cAAc,GAAGT,SAAS,CAACJ,KAAK,GAAG,CAAC,CAAC;UAC3C,MAAMc,QAAQ,GAAGX,KAAK,CAACY,OAAO,CAACF,cAAc,EAAEb,KAAK,GAAG,CAAC,CAAC;UACzD,IAAIc,QAAQ,KAAK,CAAC,CAAC,EAAE;YACnBL,QAAQ,GAAGK,QAAQ,GAAG,CAAC;UACzB;QACF;QACAnB,QAAQ,CAACQ,KAAK,CAACa,iBAAiB,CAACP,QAAQ,EAAEA,QAAQ,CAAC;MACtD,CAAC,CAAC,OAAOF,CAAC,EAAE;QACVf,OAAO,CAAC,KAAK,EAAG,sEAAqEe,CAAC,CAACU,OAAQ,EAAC,CAAC;MACnG;IACF;EACF;EACA,OAAO,CAACnB,YAAY,EAAEU,aAAa,CAAC;AACtC"},"metadata":{},"sourceType":"module","externalDependencies":[]}