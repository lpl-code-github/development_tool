{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport AddBackUp from \"@/components/backup/AddBackUp\";\nimport fileDownload from 'js-file-download';\nexport default {\n  name: \"Backup\",\n  components: {\n    AddBackUp\n  },\n  data() {\n    return {\n      openAddScriptModel: false,\n      // 控制AddScript的modal的开关\n      dbList: [],\n      // 数据库列表\n      getDatabaseListFlag: false,\n      // 是否获取dbList的标志\n      columns: [{\n        title: '名称',\n        width: 200,\n        dataIndex: 'name',\n        scopedSlots: {\n          customRender: 'name'\n        }\n      }, {\n        title: '描述',\n        width: 350,\n        dataIndex: 'description',\n        scopedSlots: {\n          customRender: 'description'\n        }\n      }, {\n        title: '数据库',\n        width: 200,\n        dataIndex: 'db_name',\n        key: 'db_name',\n        filters: [],\n        filteredValue: []\n      }, {\n        title: '创建时间',\n        width: 150,\n        dataIndex: 'created_at',\n        key: 'created_at',\n        sorter: (a, b) => new Date(a.created_at) - new Date(b.created_at)\n      }, {\n        title: 'Action',\n        dataIndex: '',\n        key: 'x',\n        scopedSlots: {\n          customRender: 'action'\n        }\n      }],\n      // table的数据\n      backupList: [],\n      // 后台请求到数据\n      paginationConfig: {\n        defaultCurrent: 1,\n        defaultPageSize: 5\n      },\n      // 分页数据\n      tableData: [],\n      // 表格数据\n      cacheData: [],\n      // 缓存数据 用于编辑表格时，缓存之前的数据\n      editingKey: '',\n      // 被编辑的行\n      componentKey: 0 // 组件key\n    };\n  },\n\n  created() {\n    this.getBackupList();\n  },\n  methods: {\n    /*\n      表格的一些事件\n     */\n    handleChange(pagination, filters) {\n      var tagFilterChecked = filters.db_name;\n      if (filters.db_name !== undefined && filters.db_name.length === 0) {\n        this.tableData = this.backupList;\n        //重置columns的filteredValue\n        var columns = this.columns;\n        columns.forEach(item => {\n          if (item.key === 'db_name') {\n            this.$set(item, 'filteredValue', []);\n          }\n        });\n        this.$set(this, 'columns', [...columns]);\n        return;\n      }\n      if (tagFilterChecked !== undefined) {\n        this.tableData = this.backupList.filter(item => {\n          return tagFilterChecked.includes(item.db_name);\n        });\n        var columns = this.columns;\n        columns.forEach(item => {\n          if (item.key === 'db_name') {\n            this.$set(item, 'filteredValue', tagFilterChecked);\n          }\n        });\n        this.$set(this, 'columns', [...columns]);\n      }\n    },\n    /*\n      请求db的list，请求成功打开备份数据库的modal表单\n     */\n    async backUp() {\n      await this.getDatabaseList();\n      if (this.getDatabaseListFlag) {\n        this.openAddScriptModel = true;\n      } else {\n        this.$message.error(\"获取数据库列表失败\");\n      }\n    },\n    /*\n       一些请求事件\n     */\n    //搜索\n    onSearch(value) {\n      var params = \"?key=\" + value;\n      this.getBackupList(params);\n    },\n    // 获取BackupList\n    getBackupList(params) {\n      if (params == null) {\n        params = \"\";\n      }\n      this.$request.getDatabaseBackup(params).then(res => {\n        if (res.status === 200) {\n          this.backupList = res.data.data;\n          const dbFilters = [];\n          this.backupList.forEach(item => {\n            const existingTag = dbFilters.find(filter => filter.text === item.db_name);\n            if (!existingTag) {\n              dbFilters.push({\n                text: item.db_name,\n                value: item.db_name\n              });\n            }\n            item.key = item.id;\n          });\n          this.columns.forEach(item => {\n            if (item.key === 'db_name') {\n              item.filters = dbFilters;\n            }\n          });\n          this.tableData = [...this.backupList];\n          this.cacheData = this.tableData.map(item => ({\n            ...item\n          }));\n        }\n      });\n    },\n    // 获取db的list，用于添加时from表单的选择框\n    async getDatabaseList() {\n      await this.$request.getDatabaseList().then(res => {\n        if (res.status === 200) {\n          this.dbList = res.data.data;\n          this.getDatabaseListFlag = true;\n        } else {\n          this.getDatabaseListFlag = false;\n        }\n      });\n    },\n    /*\n      modal框的回调\n     */\n    getModelStatus(status) {\n      this.openAddScriptModel = status;\n    },\n    updateTable(object) {\n      if (object !== null) {\n        var newData = object[0];\n        newData.key = newData.id;\n\n        // 在backupList头部添加元素\n        this.backupList.unshift(newData);\n        this.$set(this, 'backupList', [...this.backupList]);\n\n        // 添加过滤器 如果存在就不添加\n        var columns = this.columns;\n        columns.forEach(item => {\n          if (item.key === 'db_name') {\n            var filters = [...item.filters]; // 创建 filters 的副本\n            const existingTag = filters.find(filter => filter.text === newData.db_name);\n            if (!existingTag) {\n              filters.push({\n                text: newData.db_name,\n                value: newData.db_name\n              });\n            }\n            item.filters = filters;\n          }\n        });\n        this.$set(this, 'columns', [...columns]);\n\n        // 更新tableData\n        this.tableData = [...this.backupList];\n        this.cacheData = this.tableData.map(item => ({\n          ...item\n        })); // 更新 cacheData\n      }\n    },\n\n    /*\n      table编辑功能\n     */\n    handleChangeEdit(value, key, column) {\n      const newData = [...this.tableData];\n      const target = newData.find(item => key === item.key);\n      if (target) {\n        target[column] = value;\n        this.tableData = newData;\n      }\n    },\n    edit(key) {\n      const newData = [...this.tableData];\n      const target = newData.find(item => key === item.key);\n      this.editingKey = key;\n      if (target) {\n        target.editable = true;\n        this.tableData = newData;\n      }\n    },\n    save(key) {\n      const newData = [...this.tableData];\n      const newCacheData = [...this.cacheData];\n      const target = newData.find(item => key === item.key);\n      const targetCache = newCacheData.find(item => key === item.key);\n      if (target && targetCache) {\n        // 校验\n        let nameLength = target.name.length;\n        if (!(nameLength >= 5 && nameLength <= 50)) {\n          this.$message.warning(\"名称长度应该在5～50之间\");\n          return;\n        }\n        var param = {\n          data: {\n            id: target.id,\n            name: target.name,\n            description: target.description\n          }\n        };\n        this.$request.putDatabaseBackup(param).then(res => {\n          if (res.status === 200) {\n            delete target.editable;\n            this.tableData = newData;\n            Object.assign(targetCache, target);\n            this.cacheData = newCacheData;\n            this.$message.success(\"更新成功\");\n          } else {\n            this.$message.error(\"更新失败\");\n          }\n        });\n      }\n      this.editingKey = '';\n    },\n    cancel(key) {\n      const newData = [...this.tableData];\n      const target = newData.find(item => key === item.key);\n      this.editingKey = '';\n      if (target) {\n        Object.assign(target, this.cacheData.find(item => key === item.key));\n        delete target.editable;\n        this.tableData = newData;\n      }\n    },\n    /*\n       导入数据库\n     */\n    importDb(key) {\n      const h = this.$createElement;\n      this.$confirm({\n        title: '确认导入数据库吗？',\n        content: h => h(\"div\", {\n          \"style\": \"color:red;\"\n        }, [\"\\u8FD9\\u5C06\\u4F1A\\u8986\\u76D6\\u60A8\\u5F53\\u524D\\u7684\\u6570\\u636E\\u5E93\"]),\n        okText: '导入',\n        cancelText: '不了',\n        onOk: () => {\n          var message = this.$message;\n          var target = this.cacheData.find(item => key === item.key);\n          var param = {\n            data: {\n              id: target.id\n            }\n          };\n          var loadingMessage = message.loading('正在导入数据库，该操作有点耗时，请等待....', 0);\n          this.$request.importDatabaseBackup(param).then(res => {\n            if (res.status === 200) {\n              message.success(\"导入成功\");\n              setTimeout(loadingMessage, 0);\n            } else {\n              setTimeout(loadingMessage, 0);\n            }\n          });\n        },\n        onCancel() {\n          console.log('Cancel');\n        },\n        class: 'test'\n      });\n    },\n    /*\n      删除数据库备份记录\n     */\n    deleteDatabaseBackup(key) {\n      this.$confirm({\n        title: '确认删除备份吗?',\n        content: '将会删除您的SQL备份文件',\n        okText: '删除',\n        okType: 'danger',\n        cancelText: '不了',\n        onOk: () => {\n          var target = this.cacheData.find(item => key === item.key);\n          var param = {\n            data: {\n              id: target.id\n            }\n          };\n          this.$request.deleteDatabaseBackup(param).then(res => {\n            if (res.status === 200) {\n              // 删除backupList，重新设置tableData\n              const newBackupList = [...this.backupList];\n              this.backupList = newBackupList.filter(item => item.key !== key);\n              this.tableData = [...this.backupList];\n              this.$message.success(\"删除成功\");\n\n              // 重新分配筛选器\n              const dbFilters = [];\n              this.backupList.forEach(item => {\n                const existingTag = dbFilters.find(filter => filter.text === item.db_name);\n                if (!existingTag) {\n                  dbFilters.push({\n                    text: item.db_name,\n                    value: item.db_name\n                  });\n                }\n                item.key = item.id;\n              });\n              var columns = this.columns;\n              columns.forEach(item => {\n                if (item.key === 'db_name') {\n                  item.filters = [...dbFilters];\n                  this.$set(item, 'filteredValue', []);\n                }\n              });\n              this.$set(this, 'columns', [...columns]);\n\n              // 重新分配cacheData\n              this.cacheData = this.tableData.map(item => ({\n                ...item\n              }));\n            } else {\n              this.$message.error(\"删除失败\");\n            }\n          });\n        },\n        onCancel() {\n          console.log('Cancel');\n        }\n      });\n    },\n    /*\n     下载备份的数据库sql文件\n     */\n    downloadSQLFile(path) {\n      let fileName = path.substring(path.lastIndexOf('/') + 1);\n      this.$request.downloadFile(path).then(res => {\n        if (res.status === 200) {\n          fileDownload(res.data, fileName);\n        }\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}