{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode, resolveDirective as _resolveDirective } from \"vue\";\nimport { defineComponent, onBeforeUnmount, onMounted, onUpdated, ref } from 'vue';\nimport omit from '../_util/omit';\nimport initDefaultProps from '../_util/props-util/initDefaultProps';\nimport { someType } from '../_util/type';\nimport Statistic, { statisticProps } from './Statistic';\nimport { formatCountdown as formatCD } from './utils';\nconst REFRESH_INTERVAL = 1000 / 30;\nfunction getTime(value) {\n  return new Date(value).getTime();\n}\nexport const countdownProps = () => {\n  return _extends(_extends({}, statisticProps()), {\n    value: someType([Number, String, Object]),\n    format: String,\n    onFinish: Function,\n    onChange: Function\n  });\n};\nexport default defineComponent({\n  compatConfig: {\n    MODE: 3\n  },\n  name: 'AStatisticCountdown',\n  props: initDefaultProps(countdownProps(), {\n    format: 'HH:mm:ss'\n  }),\n  // emits: ['finish', 'change'],\n  setup(props, _ref) {\n    let {\n      emit,\n      slots\n    } = _ref;\n    const countdownId = ref();\n    const statistic = ref();\n    const syncTimer = () => {\n      const {\n        value\n      } = props;\n      const timestamp = getTime(value);\n      if (timestamp >= Date.now()) {\n        startTimer();\n      } else {\n        stopTimer();\n      }\n    };\n    const startTimer = () => {\n      if (countdownId.value) return;\n      const timestamp = getTime(props.value);\n      countdownId.value = setInterval(() => {\n        statistic.value.$forceUpdate();\n        if (timestamp > Date.now()) {\n          emit('change', timestamp - Date.now());\n        }\n        syncTimer();\n      }, REFRESH_INTERVAL);\n    };\n    const stopTimer = () => {\n      const {\n        value\n      } = props;\n      if (countdownId.value) {\n        clearInterval(countdownId.value);\n        countdownId.value = undefined;\n        const timestamp = getTime(value);\n        if (timestamp < Date.now()) {\n          emit('finish');\n        }\n      }\n    };\n    const formatCountdown = _ref2 => {\n      let {\n        value,\n        config\n      } = _ref2;\n      const {\n        format\n      } = props;\n      return formatCD(value, _extends(_extends({}, config), {\n        format\n      }));\n    };\n    const valueRenderHtml = node => node;\n    onMounted(() => {\n      syncTimer();\n    });\n    onUpdated(() => {\n      syncTimer();\n    });\n    onBeforeUnmount(() => {\n      stopTimer();\n    });\n    return () => {\n      const value = props.value;\n      return _createVNode(Statistic, _objectSpread({\n        \"ref\": statistic\n      }, _extends(_extends({}, omit(props, ['onFinish', 'onChange'])), {\n        value,\n        valueRender: valueRenderHtml,\n        formatter: formatCountdown\n      })), slots);\n    };\n  }\n});","map":{"version":3,"names":["_objectSpread","_extends","createVNode","_createVNode","resolveDirective","_resolveDirective","defineComponent","onBeforeUnmount","onMounted","onUpdated","ref","omit","initDefaultProps","someType","Statistic","statisticProps","formatCountdown","formatCD","REFRESH_INTERVAL","getTime","value","Date","countdownProps","Number","String","Object","format","onFinish","Function","onChange","compatConfig","MODE","name","props","setup","_ref","emit","slots","countdownId","statistic","syncTimer","timestamp","now","startTimer","stopTimer","setInterval","$forceUpdate","clearInterval","undefined","_ref2","config","valueRenderHtml","node","valueRender","formatter"],"sources":["/Users/lpl/工作/Teamsupport/develop_help/node_modules/ant-design-vue/es/statistic/Countdown.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode, resolveDirective as _resolveDirective } from \"vue\";\nimport { defineComponent, onBeforeUnmount, onMounted, onUpdated, ref } from 'vue';\nimport omit from '../_util/omit';\nimport initDefaultProps from '../_util/props-util/initDefaultProps';\nimport { someType } from '../_util/type';\nimport Statistic, { statisticProps } from './Statistic';\nimport { formatCountdown as formatCD } from './utils';\nconst REFRESH_INTERVAL = 1000 / 30;\nfunction getTime(value) {\n  return new Date(value).getTime();\n}\nexport const countdownProps = () => {\n  return _extends(_extends({}, statisticProps()), {\n    value: someType([Number, String, Object]),\n    format: String,\n    onFinish: Function,\n    onChange: Function\n  });\n};\nexport default defineComponent({\n  compatConfig: {\n    MODE: 3\n  },\n  name: 'AStatisticCountdown',\n  props: initDefaultProps(countdownProps(), {\n    format: 'HH:mm:ss'\n  }),\n  // emits: ['finish', 'change'],\n  setup(props, _ref) {\n    let {\n      emit,\n      slots\n    } = _ref;\n    const countdownId = ref();\n    const statistic = ref();\n    const syncTimer = () => {\n      const {\n        value\n      } = props;\n      const timestamp = getTime(value);\n      if (timestamp >= Date.now()) {\n        startTimer();\n      } else {\n        stopTimer();\n      }\n    };\n    const startTimer = () => {\n      if (countdownId.value) return;\n      const timestamp = getTime(props.value);\n      countdownId.value = setInterval(() => {\n        statistic.value.$forceUpdate();\n        if (timestamp > Date.now()) {\n          emit('change', timestamp - Date.now());\n        }\n        syncTimer();\n      }, REFRESH_INTERVAL);\n    };\n    const stopTimer = () => {\n      const {\n        value\n      } = props;\n      if (countdownId.value) {\n        clearInterval(countdownId.value);\n        countdownId.value = undefined;\n        const timestamp = getTime(value);\n        if (timestamp < Date.now()) {\n          emit('finish');\n        }\n      }\n    };\n    const formatCountdown = _ref2 => {\n      let {\n        value,\n        config\n      } = _ref2;\n      const {\n        format\n      } = props;\n      return formatCD(value, _extends(_extends({}, config), {\n        format\n      }));\n    };\n    const valueRenderHtml = node => node;\n    onMounted(() => {\n      syncTimer();\n    });\n    onUpdated(() => {\n      syncTimer();\n    });\n    onBeforeUnmount(() => {\n      stopTimer();\n    });\n    return () => {\n      const value = props.value;\n      return _createVNode(Statistic, _objectSpread({\n        \"ref\": statistic\n      }, _extends(_extends({}, omit(props, ['onFinish', 'onChange'])), {\n        value,\n        valueRender: valueRenderHtml,\n        formatter: formatCountdown\n      })), slots);\n    };\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}