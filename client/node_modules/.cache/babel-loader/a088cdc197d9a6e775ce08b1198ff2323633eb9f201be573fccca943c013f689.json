{"ast":null,"code":"// https://stackoverflow.com/questions/46176165/ways-to-get-string-literal-type-of-array-values-without-enum-overhead\nexport const tuple = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return args;\n};\nexport const tupleNum = function () {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n  return args;\n};\nexport const withInstall = comp => {\n  const c = comp;\n  c.install = function (app) {\n    app.component(c.displayName || c.name, comp);\n  };\n  return comp;\n};\nexport function eventType() {\n  return {\n    type: [Function, Array]\n  };\n}\nexport function objectType(defaultVal) {\n  return {\n    type: Object,\n    default: defaultVal\n  };\n}\nexport function booleanType(defaultVal) {\n  return {\n    type: Boolean,\n    default: defaultVal\n  };\n}\nexport function functionType(defaultVal) {\n  return {\n    type: Function,\n    default: defaultVal\n  };\n}\nexport function anyType(defaultVal, required) {\n  const type = {\n    validator: () => true,\n    default: defaultVal\n  };\n  return required ? type : type;\n}\nexport function vNodeType() {\n  return {\n    validator: () => true\n  };\n}\nexport function arrayType(defaultVal) {\n  return {\n    type: Array,\n    default: defaultVal\n  };\n}\nexport function stringType(defaultVal) {\n  return {\n    type: String,\n    default: defaultVal\n  };\n}\nexport function someType(types, defaultVal) {\n  return types ? {\n    type: types,\n    default: defaultVal\n  } : anyType(defaultVal);\n}","map":{"version":3,"names":["tuple","_len","arguments","length","args","Array","_key","tupleNum","_len2","_key2","withInstall","comp","c","install","app","component","displayName","name","eventType","type","Function","objectType","defaultVal","Object","default","booleanType","Boolean","functionType","anyType","required","validator","vNodeType","arrayType","stringType","String","someType","types"],"sources":["/Users/lpl/工作/Teamsupport/develop_help/node_modules/ant-design-vue/es/_util/type.js"],"sourcesContent":["// https://stackoverflow.com/questions/46176165/ways-to-get-string-literal-type-of-array-values-without-enum-overhead\nexport const tuple = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return args;\n};\nexport const tupleNum = function () {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n  return args;\n};\nexport const withInstall = comp => {\n  const c = comp;\n  c.install = function (app) {\n    app.component(c.displayName || c.name, comp);\n  };\n  return comp;\n};\nexport function eventType() {\n  return {\n    type: [Function, Array]\n  };\n}\nexport function objectType(defaultVal) {\n  return {\n    type: Object,\n    default: defaultVal\n  };\n}\nexport function booleanType(defaultVal) {\n  return {\n    type: Boolean,\n    default: defaultVal\n  };\n}\nexport function functionType(defaultVal) {\n  return {\n    type: Function,\n    default: defaultVal\n  };\n}\nexport function anyType(defaultVal, required) {\n  const type = {\n    validator: () => true,\n    default: defaultVal\n  };\n  return required ? type : type;\n}\nexport function vNodeType() {\n  return {\n    validator: () => true\n  };\n}\nexport function arrayType(defaultVal) {\n  return {\n    type: Array,\n    default: defaultVal\n  };\n}\nexport function stringType(defaultVal) {\n  return {\n    type: String,\n    default: defaultVal\n  };\n}\nexport function someType(types, defaultVal) {\n  return types ? {\n    type: types,\n    default: defaultVal\n  } : anyType(defaultVal);\n}"],"mappings":"AAAA;AACA,OAAO,MAAMA,KAAK,GAAG,SAAAA,CAAA,EAAY;EAC/B,KAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAAM,EAAEC,IAAI,GAAG,IAAIC,KAAK,CAACJ,IAAI,CAAC,EAAEK,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGL,IAAI,EAAEK,IAAI,EAAE,EAAE;IACvFF,IAAI,CAACE,IAAI,CAAC,GAAGJ,SAAS,CAACI,IAAI,CAAC;EAC9B;EACA,OAAOF,IAAI;AACb,CAAC;AACD,OAAO,MAAMG,QAAQ,GAAG,SAAAA,CAAA,EAAY;EAClC,KAAK,IAAIC,KAAK,GAAGN,SAAS,CAACC,MAAM,EAAEC,IAAI,GAAG,IAAIC,KAAK,CAACG,KAAK,CAAC,EAAEC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGD,KAAK,EAAEC,KAAK,EAAE,EAAE;IAC7FL,IAAI,CAACK,KAAK,CAAC,GAAGP,SAAS,CAACO,KAAK,CAAC;EAChC;EACA,OAAOL,IAAI;AACb,CAAC;AACD,OAAO,MAAMM,WAAW,GAAGC,IAAI,IAAI;EACjC,MAAMC,CAAC,GAAGD,IAAI;EACdC,CAAC,CAACC,OAAO,GAAG,UAAUC,GAAG,EAAE;IACzBA,GAAG,CAACC,SAAS,CAACH,CAAC,CAACI,WAAW,IAAIJ,CAAC,CAACK,IAAI,EAAEN,IAAI,CAAC;EAC9C,CAAC;EACD,OAAOA,IAAI;AACb,CAAC;AACD,OAAO,SAASO,SAASA,CAAA,EAAG;EAC1B,OAAO;IACLC,IAAI,EAAE,CAACC,QAAQ,EAAEf,KAAK;EACxB,CAAC;AACH;AACA,OAAO,SAASgB,UAAUA,CAACC,UAAU,EAAE;EACrC,OAAO;IACLH,IAAI,EAAEI,MAAM;IACZC,OAAO,EAAEF;EACX,CAAC;AACH;AACA,OAAO,SAASG,WAAWA,CAACH,UAAU,EAAE;EACtC,OAAO;IACLH,IAAI,EAAEO,OAAO;IACbF,OAAO,EAAEF;EACX,CAAC;AACH;AACA,OAAO,SAASK,YAAYA,CAACL,UAAU,EAAE;EACvC,OAAO;IACLH,IAAI,EAAEC,QAAQ;IACdI,OAAO,EAAEF;EACX,CAAC;AACH;AACA,OAAO,SAASM,OAAOA,CAACN,UAAU,EAAEO,QAAQ,EAAE;EAC5C,MAAMV,IAAI,GAAG;IACXW,SAAS,EAAEA,CAAA,KAAM,IAAI;IACrBN,OAAO,EAAEF;EACX,CAAC;EACD,OAAOO,QAAQ,GAAGV,IAAI,GAAGA,IAAI;AAC/B;AACA,OAAO,SAASY,SAASA,CAAA,EAAG;EAC1B,OAAO;IACLD,SAAS,EAAEA,CAAA,KAAM;EACnB,CAAC;AACH;AACA,OAAO,SAASE,SAASA,CAACV,UAAU,EAAE;EACpC,OAAO;IACLH,IAAI,EAAEd,KAAK;IACXmB,OAAO,EAAEF;EACX,CAAC;AACH;AACA,OAAO,SAASW,UAAUA,CAACX,UAAU,EAAE;EACrC,OAAO;IACLH,IAAI,EAAEe,MAAM;IACZV,OAAO,EAAEF;EACX,CAAC;AACH;AACA,OAAO,SAASa,QAAQA,CAACC,KAAK,EAAEd,UAAU,EAAE;EAC1C,OAAOc,KAAK,GAAG;IACbjB,IAAI,EAAEiB,KAAK;IACXZ,OAAO,EAAEF;EACX,CAAC,GAAGM,OAAO,CAACN,UAAU,CAAC;AACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}