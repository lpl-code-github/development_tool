{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\";\nimport { computed, ref, defineComponent } from 'vue';\nimport VcTreeSelect, { TreeNode, SHOW_ALL, SHOW_PARENT, SHOW_CHILD, treeSelectProps as vcTreeSelectProps } from '../vc-tree-select';\nimport classNames from '../_util/classNames';\nimport initDefaultProps from '../_util/props-util/initDefaultProps';\nimport omit from '../_util/omit';\nimport PropTypes from '../_util/vue-types';\nimport useConfigInject from '../config-provider/hooks/useConfigInject';\nimport devWarning from '../vc-util/devWarning';\nimport getIcons from '../select/utils/iconUtil';\nimport renderSwitcherIcon from '../tree/utils/iconUtil';\nimport { warning } from '../vc-util/warning';\nimport { flattenChildren } from '../_util/props-util';\nimport { FormItemInputContext, useInjectFormItemContext } from '../form/FormItemContext';\nimport { getTransitionDirection } from '../_util/transition';\nimport { getStatusClassNames, getMergedStatus } from '../_util/statusUtils';\nimport { booleanType, stringType, objectType, someType, functionType } from '../_util/type';\n// CSSINJS\nimport useSelectStyle from '../select/style';\nimport useStyle from './style';\nimport { useCompactItemContext } from '../space/Compact';\nimport { useInjectDisabled } from '../config-provider/DisabledContext';\nconst getTransitionName = (rootPrefixCls, motion, transitionName) => {\n  if (transitionName !== undefined) {\n    return transitionName;\n  }\n  return `${rootPrefixCls}-${motion}`;\n};\nexport function treeSelectProps() {\n  return _extends(_extends({}, omit(vcTreeSelectProps(), ['showTreeIcon', 'treeMotion', 'inputIcon', 'getInputElement', 'treeLine', 'customSlots'])), {\n    suffixIcon: PropTypes.any,\n    size: stringType(),\n    bordered: booleanType(),\n    treeLine: someType([Boolean, Object]),\n    replaceFields: objectType(),\n    placement: stringType(),\n    status: stringType(),\n    popupClassName: String,\n    /** @deprecated Please use `popupClassName` instead */\n    dropdownClassName: String,\n    'onUpdate:value': functionType(),\n    'onUpdate:treeExpandedKeys': functionType(),\n    'onUpdate:searchValue': functionType()\n  });\n}\nconst TreeSelect = defineComponent({\n  compatConfig: {\n    MODE: 3\n  },\n  name: 'ATreeSelect',\n  inheritAttrs: false,\n  props: initDefaultProps(treeSelectProps(), {\n    choiceTransitionName: '',\n    listHeight: 256,\n    treeIcon: false,\n    listItemHeight: 26,\n    bordered: true\n  }),\n  slots: Object,\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots,\n      expose,\n      emit\n    } = _ref;\n    warning(!(props.treeData === undefined && slots.default), '`children` of TreeSelect is deprecated. Please use `treeData` instead.');\n    devWarning(props.multiple !== false || !props.treeCheckable, 'TreeSelect', '`multiple` will always be `true` when `treeCheckable` is true');\n    devWarning(props.replaceFields === undefined, 'TreeSelect', '`replaceFields` is deprecated, please use fieldNames instead');\n    devWarning(!props.dropdownClassName, 'TreeSelect', '`dropdownClassName` is deprecated. Please use `popupClassName` instead.');\n    const formItemContext = useInjectFormItemContext();\n    const formItemInputContext = FormItemInputContext.useInject();\n    const mergedStatus = computed(() => getMergedStatus(formItemInputContext.status, props.status));\n    const {\n      prefixCls,\n      renderEmpty,\n      direction,\n      virtual,\n      dropdownMatchSelectWidth,\n      size: contextSize,\n      getPopupContainer,\n      getPrefixCls,\n      disabled\n    } = useConfigInject('select', props);\n    const {\n      compactSize,\n      compactItemClassnames\n    } = useCompactItemContext(prefixCls, direction);\n    const mergedSize = computed(() => compactSize.value || contextSize.value);\n    const contextDisabled = useInjectDisabled();\n    const mergedDisabled = computed(() => {\n      var _a;\n      return (_a = disabled.value) !== null && _a !== void 0 ? _a : contextDisabled.value;\n    });\n    const rootPrefixCls = computed(() => getPrefixCls());\n    // ===================== Placement =====================\n    const placement = computed(() => {\n      if (props.placement !== undefined) {\n        return props.placement;\n      }\n      return direction.value === 'rtl' ? 'bottomRight' : 'bottomLeft';\n    });\n    const transitionName = computed(() => getTransitionName(rootPrefixCls.value, getTransitionDirection(placement.value), props.transitionName));\n    const choiceTransitionName = computed(() => getTransitionName(rootPrefixCls.value, '', props.choiceTransitionName));\n    const treePrefixCls = computed(() => getPrefixCls('select-tree', props.prefixCls));\n    const treeSelectPrefixCls = computed(() => getPrefixCls('tree-select', props.prefixCls));\n    // style\n    const [wrapSelectSSR, hashId] = useSelectStyle(prefixCls);\n    const [wrapTreeSelectSSR] = useStyle(treeSelectPrefixCls, treePrefixCls);\n    const mergedDropdownClassName = computed(() => classNames(props.popupClassName || props.dropdownClassName, `${treeSelectPrefixCls.value}-dropdown`, {\n      [`${treeSelectPrefixCls.value}-dropdown-rtl`]: direction.value === 'rtl'\n    }, hashId.value));\n    const isMultiple = computed(() => !!(props.treeCheckable || props.multiple));\n    const mergedShowArrow = computed(() => props.showArrow !== undefined ? props.showArrow : props.loading || !isMultiple.value);\n    const treeSelectRef = ref();\n    expose({\n      focus() {\n        var _a, _b;\n        (_b = (_a = treeSelectRef.value).focus) === null || _b === void 0 ? void 0 : _b.call(_a);\n      },\n      blur() {\n        var _a, _b;\n        (_b = (_a = treeSelectRef.value).blur) === null || _b === void 0 ? void 0 : _b.call(_a);\n      }\n    });\n    const handleChange = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      emit('update:value', args[0]);\n      emit('change', ...args);\n      formItemContext.onFieldChange();\n    };\n    const handleTreeExpand = keys => {\n      emit('update:treeExpandedKeys', keys);\n      emit('treeExpand', keys);\n    };\n    const handleSearch = value => {\n      emit('update:searchValue', value);\n      emit('search', value);\n    };\n    const handleBlur = e => {\n      emit('blur', e);\n      formItemContext.onFieldBlur();\n    };\n    return () => {\n      var _a, _b;\n      const {\n        notFoundContent = (_a = slots.notFoundContent) === null || _a === void 0 ? void 0 : _a.call(slots),\n        prefixCls: customizePrefixCls,\n        bordered,\n        listHeight,\n        listItemHeight,\n        multiple,\n        treeIcon,\n        treeLine,\n        showArrow,\n        switcherIcon = (_b = slots.switcherIcon) === null || _b === void 0 ? void 0 : _b.call(slots),\n        fieldNames = props.replaceFields,\n        id = formItemContext.id.value\n      } = props;\n      const {\n        isFormItemInput,\n        hasFeedback,\n        feedbackIcon\n      } = formItemInputContext;\n      // ===================== Icons =====================\n      const {\n        suffixIcon,\n        removeIcon,\n        clearIcon\n      } = getIcons(_extends(_extends({}, props), {\n        multiple: isMultiple.value,\n        showArrow: mergedShowArrow.value,\n        hasFeedback,\n        feedbackIcon,\n        prefixCls: prefixCls.value\n      }), slots);\n      // ===================== Empty =====================\n      let mergedNotFound;\n      if (notFoundContent !== undefined) {\n        mergedNotFound = notFoundContent;\n      } else {\n        mergedNotFound = renderEmpty('Select');\n      }\n      // ==================== Render =====================\n      const selectProps = omit(props, ['suffixIcon', 'itemIcon', 'removeIcon', 'clearIcon', 'switcherIcon', 'bordered', 'status', 'onUpdate:value', 'onUpdate:treeExpandedKeys', 'onUpdate:searchValue']);\n      const mergedClassName = classNames(!customizePrefixCls && treeSelectPrefixCls.value, {\n        [`${prefixCls.value}-lg`]: mergedSize.value === 'large',\n        [`${prefixCls.value}-sm`]: mergedSize.value === 'small',\n        [`${prefixCls.value}-rtl`]: direction.value === 'rtl',\n        [`${prefixCls.value}-borderless`]: !bordered,\n        [`${prefixCls.value}-in-form-item`]: isFormItemInput\n      }, getStatusClassNames(prefixCls.value, mergedStatus.value, hasFeedback), compactItemClassnames.value, attrs.class, hashId.value);\n      const otherProps = {};\n      if (props.treeData === undefined && slots.default) {\n        otherProps.children = flattenChildren(slots.default());\n      }\n      return wrapSelectSSR(wrapTreeSelectSSR(_createVNode(VcTreeSelect, _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, attrs), selectProps), {}, {\n        \"disabled\": mergedDisabled.value,\n        \"virtual\": virtual.value,\n        \"dropdownMatchSelectWidth\": dropdownMatchSelectWidth.value,\n        \"id\": id,\n        \"fieldNames\": fieldNames,\n        \"ref\": treeSelectRef,\n        \"prefixCls\": prefixCls.value,\n        \"class\": mergedClassName,\n        \"listHeight\": listHeight,\n        \"listItemHeight\": listItemHeight,\n        \"treeLine\": !!treeLine,\n        \"inputIcon\": suffixIcon,\n        \"multiple\": multiple,\n        \"removeIcon\": removeIcon,\n        \"clearIcon\": clearIcon,\n        \"switcherIcon\": nodeProps => renderSwitcherIcon(treePrefixCls.value, switcherIcon, nodeProps, slots.leafIcon, treeLine),\n        \"showTreeIcon\": treeIcon,\n        \"notFoundContent\": mergedNotFound,\n        \"getPopupContainer\": getPopupContainer === null || getPopupContainer === void 0 ? void 0 : getPopupContainer.value,\n        \"treeMotion\": null,\n        \"dropdownClassName\": mergedDropdownClassName.value,\n        \"choiceTransitionName\": choiceTransitionName.value,\n        \"onChange\": handleChange,\n        \"onBlur\": handleBlur,\n        \"onSearch\": handleSearch,\n        \"onTreeExpand\": handleTreeExpand\n      }, otherProps), {}, {\n        \"transitionName\": transitionName.value,\n        \"customSlots\": _extends(_extends({}, slots), {\n          treeCheckable: () => _createVNode(\"span\", {\n            \"class\": `${prefixCls.value}-tree-checkbox-inner`\n          }, null)\n        }),\n        \"maxTagPlaceholder\": props.maxTagPlaceholder || slots.maxTagPlaceholder,\n        \"placement\": placement.value,\n        \"showArrow\": hasFeedback || showArrow\n      }), _extends(_extends({}, slots), {\n        treeCheckable: () => _createVNode(\"span\", {\n          \"class\": `${prefixCls.value}-tree-checkbox-inner`\n        }, null)\n      }))));\n    };\n  }\n});\n/* istanbul ignore next */\nexport const TreeSelectNode = TreeNode;\nexport default _extends(TreeSelect, {\n  TreeNode,\n  SHOW_ALL: SHOW_ALL,\n  SHOW_PARENT: SHOW_PARENT,\n  SHOW_CHILD: SHOW_CHILD,\n  install: app => {\n    app.component(TreeSelect.name, TreeSelect);\n    app.component(TreeSelectNode.displayName, TreeSelectNode);\n    return app;\n  }\n});","map":{"version":3,"names":["_objectSpread","_extends","resolveDirective","_resolveDirective","createVNode","_createVNode","computed","ref","defineComponent","VcTreeSelect","TreeNode","SHOW_ALL","SHOW_PARENT","SHOW_CHILD","treeSelectProps","vcTreeSelectProps","classNames","initDefaultProps","omit","PropTypes","useConfigInject","devWarning","getIcons","renderSwitcherIcon","warning","flattenChildren","FormItemInputContext","useInjectFormItemContext","getTransitionDirection","getStatusClassNames","getMergedStatus","booleanType","stringType","objectType","someType","functionType","useSelectStyle","useStyle","useCompactItemContext","useInjectDisabled","getTransitionName","rootPrefixCls","motion","transitionName","undefined","suffixIcon","any","size","bordered","treeLine","Boolean","Object","replaceFields","placement","status","popupClassName","String","dropdownClassName","TreeSelect","compatConfig","MODE","name","inheritAttrs","props","choiceTransitionName","listHeight","treeIcon","listItemHeight","slots","setup","_ref","attrs","expose","emit","treeData","default","multiple","treeCheckable","formItemContext","formItemInputContext","useInject","mergedStatus","prefixCls","renderEmpty","direction","virtual","dropdownMatchSelectWidth","contextSize","getPopupContainer","getPrefixCls","disabled","compactSize","compactItemClassnames","mergedSize","value","contextDisabled","mergedDisabled","_a","treePrefixCls","treeSelectPrefixCls","wrapSelectSSR","hashId","wrapTreeSelectSSR","mergedDropdownClassName","isMultiple","mergedShowArrow","showArrow","loading","treeSelectRef","focus","_b","call","blur","handleChange","_len","arguments","length","args","Array","_key","onFieldChange","handleTreeExpand","keys","handleSearch","handleBlur","e","onFieldBlur","notFoundContent","customizePrefixCls","switcherIcon","fieldNames","id","isFormItemInput","hasFeedback","feedbackIcon","removeIcon","clearIcon","mergedNotFound","selectProps","mergedClassName","class","otherProps","children","nodeProps","leafIcon","maxTagPlaceholder","TreeSelectNode","install","app","component","displayName"],"sources":["/Users/lpl/工作/Teamsupport/develop_help/node_modules/ant-design-vue/es/tree-select/index.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\";\nimport { computed, ref, defineComponent } from 'vue';\nimport VcTreeSelect, { TreeNode, SHOW_ALL, SHOW_PARENT, SHOW_CHILD, treeSelectProps as vcTreeSelectProps } from '../vc-tree-select';\nimport classNames from '../_util/classNames';\nimport initDefaultProps from '../_util/props-util/initDefaultProps';\nimport omit from '../_util/omit';\nimport PropTypes from '../_util/vue-types';\nimport useConfigInject from '../config-provider/hooks/useConfigInject';\nimport devWarning from '../vc-util/devWarning';\nimport getIcons from '../select/utils/iconUtil';\nimport renderSwitcherIcon from '../tree/utils/iconUtil';\nimport { warning } from '../vc-util/warning';\nimport { flattenChildren } from '../_util/props-util';\nimport { FormItemInputContext, useInjectFormItemContext } from '../form/FormItemContext';\nimport { getTransitionDirection } from '../_util/transition';\nimport { getStatusClassNames, getMergedStatus } from '../_util/statusUtils';\nimport { booleanType, stringType, objectType, someType, functionType } from '../_util/type';\n// CSSINJS\nimport useSelectStyle from '../select/style';\nimport useStyle from './style';\nimport { useCompactItemContext } from '../space/Compact';\nimport { useInjectDisabled } from '../config-provider/DisabledContext';\nconst getTransitionName = (rootPrefixCls, motion, transitionName) => {\n  if (transitionName !== undefined) {\n    return transitionName;\n  }\n  return `${rootPrefixCls}-${motion}`;\n};\nexport function treeSelectProps() {\n  return _extends(_extends({}, omit(vcTreeSelectProps(), ['showTreeIcon', 'treeMotion', 'inputIcon', 'getInputElement', 'treeLine', 'customSlots'])), {\n    suffixIcon: PropTypes.any,\n    size: stringType(),\n    bordered: booleanType(),\n    treeLine: someType([Boolean, Object]),\n    replaceFields: objectType(),\n    placement: stringType(),\n    status: stringType(),\n    popupClassName: String,\n    /** @deprecated Please use `popupClassName` instead */\n    dropdownClassName: String,\n    'onUpdate:value': functionType(),\n    'onUpdate:treeExpandedKeys': functionType(),\n    'onUpdate:searchValue': functionType()\n  });\n}\nconst TreeSelect = defineComponent({\n  compatConfig: {\n    MODE: 3\n  },\n  name: 'ATreeSelect',\n  inheritAttrs: false,\n  props: initDefaultProps(treeSelectProps(), {\n    choiceTransitionName: '',\n    listHeight: 256,\n    treeIcon: false,\n    listItemHeight: 26,\n    bordered: true\n  }),\n  slots: Object,\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots,\n      expose,\n      emit\n    } = _ref;\n    warning(!(props.treeData === undefined && slots.default), '`children` of TreeSelect is deprecated. Please use `treeData` instead.');\n    devWarning(props.multiple !== false || !props.treeCheckable, 'TreeSelect', '`multiple` will always be `true` when `treeCheckable` is true');\n    devWarning(props.replaceFields === undefined, 'TreeSelect', '`replaceFields` is deprecated, please use fieldNames instead');\n    devWarning(!props.dropdownClassName, 'TreeSelect', '`dropdownClassName` is deprecated. Please use `popupClassName` instead.');\n    const formItemContext = useInjectFormItemContext();\n    const formItemInputContext = FormItemInputContext.useInject();\n    const mergedStatus = computed(() => getMergedStatus(formItemInputContext.status, props.status));\n    const {\n      prefixCls,\n      renderEmpty,\n      direction,\n      virtual,\n      dropdownMatchSelectWidth,\n      size: contextSize,\n      getPopupContainer,\n      getPrefixCls,\n      disabled\n    } = useConfigInject('select', props);\n    const {\n      compactSize,\n      compactItemClassnames\n    } = useCompactItemContext(prefixCls, direction);\n    const mergedSize = computed(() => compactSize.value || contextSize.value);\n    const contextDisabled = useInjectDisabled();\n    const mergedDisabled = computed(() => {\n      var _a;\n      return (_a = disabled.value) !== null && _a !== void 0 ? _a : contextDisabled.value;\n    });\n    const rootPrefixCls = computed(() => getPrefixCls());\n    // ===================== Placement =====================\n    const placement = computed(() => {\n      if (props.placement !== undefined) {\n        return props.placement;\n      }\n      return direction.value === 'rtl' ? 'bottomRight' : 'bottomLeft';\n    });\n    const transitionName = computed(() => getTransitionName(rootPrefixCls.value, getTransitionDirection(placement.value), props.transitionName));\n    const choiceTransitionName = computed(() => getTransitionName(rootPrefixCls.value, '', props.choiceTransitionName));\n    const treePrefixCls = computed(() => getPrefixCls('select-tree', props.prefixCls));\n    const treeSelectPrefixCls = computed(() => getPrefixCls('tree-select', props.prefixCls));\n    // style\n    const [wrapSelectSSR, hashId] = useSelectStyle(prefixCls);\n    const [wrapTreeSelectSSR] = useStyle(treeSelectPrefixCls, treePrefixCls);\n    const mergedDropdownClassName = computed(() => classNames(props.popupClassName || props.dropdownClassName, `${treeSelectPrefixCls.value}-dropdown`, {\n      [`${treeSelectPrefixCls.value}-dropdown-rtl`]: direction.value === 'rtl'\n    }, hashId.value));\n    const isMultiple = computed(() => !!(props.treeCheckable || props.multiple));\n    const mergedShowArrow = computed(() => props.showArrow !== undefined ? props.showArrow : props.loading || !isMultiple.value);\n    const treeSelectRef = ref();\n    expose({\n      focus() {\n        var _a, _b;\n        (_b = (_a = treeSelectRef.value).focus) === null || _b === void 0 ? void 0 : _b.call(_a);\n      },\n      blur() {\n        var _a, _b;\n        (_b = (_a = treeSelectRef.value).blur) === null || _b === void 0 ? void 0 : _b.call(_a);\n      }\n    });\n    const handleChange = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      emit('update:value', args[0]);\n      emit('change', ...args);\n      formItemContext.onFieldChange();\n    };\n    const handleTreeExpand = keys => {\n      emit('update:treeExpandedKeys', keys);\n      emit('treeExpand', keys);\n    };\n    const handleSearch = value => {\n      emit('update:searchValue', value);\n      emit('search', value);\n    };\n    const handleBlur = e => {\n      emit('blur', e);\n      formItemContext.onFieldBlur();\n    };\n    return () => {\n      var _a, _b;\n      const {\n        notFoundContent = (_a = slots.notFoundContent) === null || _a === void 0 ? void 0 : _a.call(slots),\n        prefixCls: customizePrefixCls,\n        bordered,\n        listHeight,\n        listItemHeight,\n        multiple,\n        treeIcon,\n        treeLine,\n        showArrow,\n        switcherIcon = (_b = slots.switcherIcon) === null || _b === void 0 ? void 0 : _b.call(slots),\n        fieldNames = props.replaceFields,\n        id = formItemContext.id.value\n      } = props;\n      const {\n        isFormItemInput,\n        hasFeedback,\n        feedbackIcon\n      } = formItemInputContext;\n      // ===================== Icons =====================\n      const {\n        suffixIcon,\n        removeIcon,\n        clearIcon\n      } = getIcons(_extends(_extends({}, props), {\n        multiple: isMultiple.value,\n        showArrow: mergedShowArrow.value,\n        hasFeedback,\n        feedbackIcon,\n        prefixCls: prefixCls.value\n      }), slots);\n      // ===================== Empty =====================\n      let mergedNotFound;\n      if (notFoundContent !== undefined) {\n        mergedNotFound = notFoundContent;\n      } else {\n        mergedNotFound = renderEmpty('Select');\n      }\n      // ==================== Render =====================\n      const selectProps = omit(props, ['suffixIcon', 'itemIcon', 'removeIcon', 'clearIcon', 'switcherIcon', 'bordered', 'status', 'onUpdate:value', 'onUpdate:treeExpandedKeys', 'onUpdate:searchValue']);\n      const mergedClassName = classNames(!customizePrefixCls && treeSelectPrefixCls.value, {\n        [`${prefixCls.value}-lg`]: mergedSize.value === 'large',\n        [`${prefixCls.value}-sm`]: mergedSize.value === 'small',\n        [`${prefixCls.value}-rtl`]: direction.value === 'rtl',\n        [`${prefixCls.value}-borderless`]: !bordered,\n        [`${prefixCls.value}-in-form-item`]: isFormItemInput\n      }, getStatusClassNames(prefixCls.value, mergedStatus.value, hasFeedback), compactItemClassnames.value, attrs.class, hashId.value);\n      const otherProps = {};\n      if (props.treeData === undefined && slots.default) {\n        otherProps.children = flattenChildren(slots.default());\n      }\n      return wrapSelectSSR(wrapTreeSelectSSR(_createVNode(VcTreeSelect, _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, attrs), selectProps), {}, {\n        \"disabled\": mergedDisabled.value,\n        \"virtual\": virtual.value,\n        \"dropdownMatchSelectWidth\": dropdownMatchSelectWidth.value,\n        \"id\": id,\n        \"fieldNames\": fieldNames,\n        \"ref\": treeSelectRef,\n        \"prefixCls\": prefixCls.value,\n        \"class\": mergedClassName,\n        \"listHeight\": listHeight,\n        \"listItemHeight\": listItemHeight,\n        \"treeLine\": !!treeLine,\n        \"inputIcon\": suffixIcon,\n        \"multiple\": multiple,\n        \"removeIcon\": removeIcon,\n        \"clearIcon\": clearIcon,\n        \"switcherIcon\": nodeProps => renderSwitcherIcon(treePrefixCls.value, switcherIcon, nodeProps, slots.leafIcon, treeLine),\n        \"showTreeIcon\": treeIcon,\n        \"notFoundContent\": mergedNotFound,\n        \"getPopupContainer\": getPopupContainer === null || getPopupContainer === void 0 ? void 0 : getPopupContainer.value,\n        \"treeMotion\": null,\n        \"dropdownClassName\": mergedDropdownClassName.value,\n        \"choiceTransitionName\": choiceTransitionName.value,\n        \"onChange\": handleChange,\n        \"onBlur\": handleBlur,\n        \"onSearch\": handleSearch,\n        \"onTreeExpand\": handleTreeExpand\n      }, otherProps), {}, {\n        \"transitionName\": transitionName.value,\n        \"customSlots\": _extends(_extends({}, slots), {\n          treeCheckable: () => _createVNode(\"span\", {\n            \"class\": `${prefixCls.value}-tree-checkbox-inner`\n          }, null)\n        }),\n        \"maxTagPlaceholder\": props.maxTagPlaceholder || slots.maxTagPlaceholder,\n        \"placement\": placement.value,\n        \"showArrow\": hasFeedback || showArrow\n      }), _extends(_extends({}, slots), {\n        treeCheckable: () => _createVNode(\"span\", {\n          \"class\": `${prefixCls.value}-tree-checkbox-inner`\n        }, null)\n      }))));\n    };\n  }\n});\n/* istanbul ignore next */\nexport const TreeSelectNode = TreeNode;\nexport default _extends(TreeSelect, {\n  TreeNode,\n  SHOW_ALL: SHOW_ALL,\n  SHOW_PARENT: SHOW_PARENT,\n  SHOW_CHILD: SHOW_CHILD,\n  install: app => {\n    app.component(TreeSelect.name, TreeSelect);\n    app.component(TreeSelectNode.displayName, TreeSelectNode);\n    return app;\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}