{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { computed } from 'vue';\nimport { fillLegacyProps } from '../utils/legacyUtil';\nexport default ((treeData, searchValue, _ref) => {\n  let {\n    treeNodeFilterProp,\n    filterTreeNode,\n    fieldNames\n  } = _ref;\n  return computed(() => {\n    const {\n      children: fieldChildren\n    } = fieldNames.value;\n    const searchValueVal = searchValue.value;\n    const treeNodeFilterPropValue = treeNodeFilterProp === null || treeNodeFilterProp === void 0 ? void 0 : treeNodeFilterProp.value;\n    if (!searchValueVal || filterTreeNode.value === false) {\n      return treeData.value;\n    }\n    let filterOptionFunc;\n    if (typeof filterTreeNode.value === 'function') {\n      filterOptionFunc = filterTreeNode.value;\n    } else {\n      const upperStr = searchValueVal.toUpperCase();\n      filterOptionFunc = (_, dataNode) => {\n        const value = dataNode[treeNodeFilterPropValue];\n        return String(value).toUpperCase().includes(upperStr);\n      };\n    }\n    function dig(list) {\n      let keepAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      const res = [];\n      for (let index = 0, len = list.length; index < len; index++) {\n        const dataNode = list[index];\n        const children = dataNode[fieldChildren];\n        const match = keepAll || filterOptionFunc(searchValueVal, fillLegacyProps(dataNode));\n        const childList = dig(children || [], match);\n        if (match || childList.length) {\n          res.push(_extends(_extends({}, dataNode), {\n            [fieldChildren]: childList\n          }));\n        }\n      }\n      return res;\n    }\n    return dig(treeData.value);\n  });\n});","map":{"version":3,"names":["_extends","computed","fillLegacyProps","treeData","searchValue","_ref","treeNodeFilterProp","filterTreeNode","fieldNames","children","fieldChildren","value","searchValueVal","treeNodeFilterPropValue","filterOptionFunc","upperStr","toUpperCase","_","dataNode","String","includes","dig","list","keepAll","arguments","length","undefined","res","index","len","match","childList","push"],"sources":["/Users/lpl/å·¥ä½œ/Teamsupport/develop_help/node_modules/ant-design-vue/es/vc-tree-select/hooks/useFilterTreeData.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { computed } from 'vue';\nimport { fillLegacyProps } from '../utils/legacyUtil';\nexport default ((treeData, searchValue, _ref) => {\n  let {\n    treeNodeFilterProp,\n    filterTreeNode,\n    fieldNames\n  } = _ref;\n  return computed(() => {\n    const {\n      children: fieldChildren\n    } = fieldNames.value;\n    const searchValueVal = searchValue.value;\n    const treeNodeFilterPropValue = treeNodeFilterProp === null || treeNodeFilterProp === void 0 ? void 0 : treeNodeFilterProp.value;\n    if (!searchValueVal || filterTreeNode.value === false) {\n      return treeData.value;\n    }\n    let filterOptionFunc;\n    if (typeof filterTreeNode.value === 'function') {\n      filterOptionFunc = filterTreeNode.value;\n    } else {\n      const upperStr = searchValueVal.toUpperCase();\n      filterOptionFunc = (_, dataNode) => {\n        const value = dataNode[treeNodeFilterPropValue];\n        return String(value).toUpperCase().includes(upperStr);\n      };\n    }\n    function dig(list) {\n      let keepAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      const res = [];\n      for (let index = 0, len = list.length; index < len; index++) {\n        const dataNode = list[index];\n        const children = dataNode[fieldChildren];\n        const match = keepAll || filterOptionFunc(searchValueVal, fillLegacyProps(dataNode));\n        const childList = dig(children || [], match);\n        if (match || childList.length) {\n          res.push(_extends(_extends({}, dataNode), {\n            [fieldChildren]: childList\n          }));\n        }\n      }\n      return res;\n    }\n    return dig(treeData.value);\n  });\n});"],"mappings":";AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,SAASC,QAAQ,QAAQ,KAAK;AAC9B,SAASC,eAAe,QAAQ,qBAAqB;AACrD,gBAAgB,CAACC,QAAQ,EAAEC,WAAW,EAAEC,IAAI,KAAK;EAC/C,IAAI;IACFC,kBAAkB;IAClBC,cAAc;IACdC;EACF,CAAC,GAAGH,IAAI;EACR,OAAOJ,QAAQ,CAAC,MAAM;IACpB,MAAM;MACJQ,QAAQ,EAAEC;IACZ,CAAC,GAAGF,UAAU,CAACG,KAAK;IACpB,MAAMC,cAAc,GAAGR,WAAW,CAACO,KAAK;IACxC,MAAME,uBAAuB,GAAGP,kBAAkB,KAAK,IAAI,IAAIA,kBAAkB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,kBAAkB,CAACK,KAAK;IAChI,IAAI,CAACC,cAAc,IAAIL,cAAc,CAACI,KAAK,KAAK,KAAK,EAAE;MACrD,OAAOR,QAAQ,CAACQ,KAAK;IACvB;IACA,IAAIG,gBAAgB;IACpB,IAAI,OAAOP,cAAc,CAACI,KAAK,KAAK,UAAU,EAAE;MAC9CG,gBAAgB,GAAGP,cAAc,CAACI,KAAK;IACzC,CAAC,MAAM;MACL,MAAMI,QAAQ,GAAGH,cAAc,CAACI,WAAW,CAAC,CAAC;MAC7CF,gBAAgB,GAAGA,CAACG,CAAC,EAAEC,QAAQ,KAAK;QAClC,MAAMP,KAAK,GAAGO,QAAQ,CAACL,uBAAuB,CAAC;QAC/C,OAAOM,MAAM,CAACR,KAAK,CAAC,CAACK,WAAW,CAAC,CAAC,CAACI,QAAQ,CAACL,QAAQ,CAAC;MACvD,CAAC;IACH;IACA,SAASM,GAAGA,CAACC,IAAI,EAAE;MACjB,IAAIC,OAAO,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK;MACvF,MAAMG,GAAG,GAAG,EAAE;MACd,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEC,GAAG,GAAGP,IAAI,CAACG,MAAM,EAAEG,KAAK,GAAGC,GAAG,EAAED,KAAK,EAAE,EAAE;QAC3D,MAAMV,QAAQ,GAAGI,IAAI,CAACM,KAAK,CAAC;QAC5B,MAAMnB,QAAQ,GAAGS,QAAQ,CAACR,aAAa,CAAC;QACxC,MAAMoB,KAAK,GAAGP,OAAO,IAAIT,gBAAgB,CAACF,cAAc,EAAEV,eAAe,CAACgB,QAAQ,CAAC,CAAC;QACpF,MAAMa,SAAS,GAAGV,GAAG,CAACZ,QAAQ,IAAI,EAAE,EAAEqB,KAAK,CAAC;QAC5C,IAAIA,KAAK,IAAIC,SAAS,CAACN,MAAM,EAAE;UAC7BE,GAAG,CAACK,IAAI,CAAChC,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEkB,QAAQ,CAAC,EAAE;YACxC,CAACR,aAAa,GAAGqB;UACnB,CAAC,CAAC,CAAC;QACL;MACF;MACA,OAAOJ,GAAG;IACZ;IACA,OAAON,GAAG,CAAClB,QAAQ,CAACQ,KAAK,CAAC;EAC5B,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}