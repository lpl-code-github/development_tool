{"ast":null,"code":"/**\n * Cut input selection into 2 part and return text before selection start\n */\nexport function getBeforeSelectionText(input) {\n  const {\n    selectionStart\n  } = input;\n  return input.value.slice(0, selectionStart);\n}\n/**\n * Find the last match prefix index\n */\nexport function getLastMeasureIndex(text) {\n  let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  const prefixList = Array.isArray(prefix) ? prefix : [prefix];\n  return prefixList.reduce((lastMatch, prefixStr) => {\n    const lastIndex = text.lastIndexOf(prefixStr);\n    if (lastIndex > lastMatch.location) {\n      return {\n        location: lastIndex,\n        prefix: prefixStr\n      };\n    }\n    return lastMatch;\n  }, {\n    location: -1,\n    prefix: ''\n  });\n}\nfunction lower(char) {\n  return (char || '').toLowerCase();\n}\nfunction reduceText(text, targetText, split) {\n  const firstChar = text[0];\n  if (!firstChar || firstChar === split) {\n    return text;\n  }\n  // Reuse rest text as it can\n  let restText = text;\n  const targetTextLen = targetText.length;\n  for (let i = 0; i < targetTextLen; i += 1) {\n    if (lower(restText[i]) !== lower(targetText[i])) {\n      restText = restText.slice(i);\n      break;\n    } else if (i === targetTextLen - 1) {\n      restText = restText.slice(targetTextLen);\n    }\n  }\n  return restText;\n}\n/**\n * Paint targetText into current text:\n *  text: little@litest\n *  targetText: light\n *  => little @light test\n */\nexport function replaceWithMeasure(text, measureConfig) {\n  const {\n    measureLocation,\n    prefix,\n    targetText,\n    selectionStart,\n    split\n  } = measureConfig;\n  // Before text will append one space if have other text\n  let beforeMeasureText = text.slice(0, measureLocation);\n  if (beforeMeasureText[beforeMeasureText.length - split.length] === split) {\n    beforeMeasureText = beforeMeasureText.slice(0, beforeMeasureText.length - split.length);\n  }\n  if (beforeMeasureText) {\n    beforeMeasureText = `${beforeMeasureText}${split}`;\n  }\n  // Cut duplicate string with current targetText\n  let restText = reduceText(text.slice(selectionStart), targetText.slice(selectionStart - measureLocation - prefix.length), split);\n  if (restText.slice(0, split.length) === split) {\n    restText = restText.slice(split.length);\n  }\n  const connectedStartText = `${beforeMeasureText}${prefix}${targetText}${split}`;\n  return {\n    text: `${connectedStartText}${restText}`,\n    selectionLocation: connectedStartText.length\n  };\n}\nexport function setInputSelection(input, location) {\n  input.setSelectionRange(location, location);\n  /**\n   * Reset caret into view.\n   * Since this function always called by user control, it's safe to focus element.\n   */\n  input.blur();\n  input.focus();\n}\nexport function validateSearch(text, props) {\n  const {\n    split\n  } = props;\n  return !split || text.indexOf(split) === -1;\n}\nexport function filterOption(input, _ref) {\n  let {\n    value = ''\n  } = _ref;\n  const lowerCase = input.toLowerCase();\n  return value.toLowerCase().indexOf(lowerCase) !== -1;\n}","map":{"version":3,"names":["getBeforeSelectionText","input","selectionStart","value","slice","getLastMeasureIndex","text","prefix","arguments","length","undefined","prefixList","Array","isArray","reduce","lastMatch","prefixStr","lastIndex","lastIndexOf","location","lower","char","toLowerCase","reduceText","targetText","split","firstChar","restText","targetTextLen","i","replaceWithMeasure","measureConfig","measureLocation","beforeMeasureText","connectedStartText","selectionLocation","setInputSelection","setSelectionRange","blur","focus","validateSearch","props","indexOf","filterOption","_ref","lowerCase"],"sources":["/Users/lpl/工作/Teamsupport/develop_help/node_modules/ant-design-vue/es/vc-mentions/src/util.js"],"sourcesContent":["/**\n * Cut input selection into 2 part and return text before selection start\n */\nexport function getBeforeSelectionText(input) {\n  const {\n    selectionStart\n  } = input;\n  return input.value.slice(0, selectionStart);\n}\n/**\n * Find the last match prefix index\n */\nexport function getLastMeasureIndex(text) {\n  let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  const prefixList = Array.isArray(prefix) ? prefix : [prefix];\n  return prefixList.reduce((lastMatch, prefixStr) => {\n    const lastIndex = text.lastIndexOf(prefixStr);\n    if (lastIndex > lastMatch.location) {\n      return {\n        location: lastIndex,\n        prefix: prefixStr\n      };\n    }\n    return lastMatch;\n  }, {\n    location: -1,\n    prefix: ''\n  });\n}\nfunction lower(char) {\n  return (char || '').toLowerCase();\n}\nfunction reduceText(text, targetText, split) {\n  const firstChar = text[0];\n  if (!firstChar || firstChar === split) {\n    return text;\n  }\n  // Reuse rest text as it can\n  let restText = text;\n  const targetTextLen = targetText.length;\n  for (let i = 0; i < targetTextLen; i += 1) {\n    if (lower(restText[i]) !== lower(targetText[i])) {\n      restText = restText.slice(i);\n      break;\n    } else if (i === targetTextLen - 1) {\n      restText = restText.slice(targetTextLen);\n    }\n  }\n  return restText;\n}\n/**\n * Paint targetText into current text:\n *  text: little@litest\n *  targetText: light\n *  => little @light test\n */\nexport function replaceWithMeasure(text, measureConfig) {\n  const {\n    measureLocation,\n    prefix,\n    targetText,\n    selectionStart,\n    split\n  } = measureConfig;\n  // Before text will append one space if have other text\n  let beforeMeasureText = text.slice(0, measureLocation);\n  if (beforeMeasureText[beforeMeasureText.length - split.length] === split) {\n    beforeMeasureText = beforeMeasureText.slice(0, beforeMeasureText.length - split.length);\n  }\n  if (beforeMeasureText) {\n    beforeMeasureText = `${beforeMeasureText}${split}`;\n  }\n  // Cut duplicate string with current targetText\n  let restText = reduceText(text.slice(selectionStart), targetText.slice(selectionStart - measureLocation - prefix.length), split);\n  if (restText.slice(0, split.length) === split) {\n    restText = restText.slice(split.length);\n  }\n  const connectedStartText = `${beforeMeasureText}${prefix}${targetText}${split}`;\n  return {\n    text: `${connectedStartText}${restText}`,\n    selectionLocation: connectedStartText.length\n  };\n}\nexport function setInputSelection(input, location) {\n  input.setSelectionRange(location, location);\n  /**\n   * Reset caret into view.\n   * Since this function always called by user control, it's safe to focus element.\n   */\n  input.blur();\n  input.focus();\n}\nexport function validateSearch(text, props) {\n  const {\n    split\n  } = props;\n  return !split || text.indexOf(split) === -1;\n}\nexport function filterOption(input, _ref) {\n  let {\n    value = ''\n  } = _ref;\n  const lowerCase = input.toLowerCase();\n  return value.toLowerCase().indexOf(lowerCase) !== -1;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}