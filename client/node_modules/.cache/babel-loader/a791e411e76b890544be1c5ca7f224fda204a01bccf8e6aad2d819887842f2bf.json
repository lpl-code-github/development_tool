{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport zhCN from 'ant-design-vue/es/locale/zh_CN'; //引入antd中文包\nimport moment from 'moment';\nimport OneLog from \"@/components/log/OneLog\";\n//引入moment\nmoment.locale('zh-cn');\nexport default {\n  name: \"Index\",\n  components: {\n    OneLog\n  },\n  data() {\n    return {\n      locale: zhCN,\n      //传值给a-config-provider组件\n      logData: [],\n      calendarData: null,\n      componentKey: 0,\n      openLogModelFlag: false,\n      currentDate: \"\"\n    };\n  },\n  watch: {\n    calendarData: {\n      handler: function (newVal, oldVal) {\n        console.log(newVal);\n        this.getLogs(newVal);\n      },\n      // 深度观察监听\n      deep: true\n    }\n  },\n  async created() {\n    await this.getLogs(new moment());\n    // 监听自定义事件\n    this.$bus.$on('requestCompleted', () => {\n      console.log('reloadComponent called');\n      this.getLogs(new moment());\n      this.componentKey += 1;\n    });\n  },\n  methods: {\n    getListData(value) {\n      var temp = value;\n      let listData = [];\n      this.logData.forEach(item => {\n        if (item.created_at.split(\" \")[0] === temp.format('YYYY-MM-DD')) {\n          listData.push({\n            type: item.status === 'failure' ? 'warning' : \"success\",\n            content: item.type + \": \" + item.name\n          });\n        }\n      });\n      return listData || [];\n    },\n    getPanelChange(moment) {\n      console.log(moment);\n      this.getLogs(moment);\n    },\n    openLogModel() {\n      this.openLogModelFlag = true;\n    },\n    getRunNewmanModelStatus(status) {\n      this.openRunNewmanModelFlag = status;\n    },\n    getNewmanModelTaskStatus(status) {\n      this.openNewmanTaskModelFlag = status;\n    },\n    getLogs(moment) {\n      const temp = moment.clone();\n      var startDate = temp.startOf('month').subtract(1, 'month').format('YYYY-MM-DD');\n      var endDate = temp.endOf('month').add(2, 'month').format('YYYY-MM-DD');\n      var param = \"?start=\" + startDate + \"&target=\" + endDate;\n      this.$request.getLog(param).then(res => {\n        this.logData = res.data.data;\n      });\n    },\n    onSelect(value) {\n      const date = moment(value);\n      const formattedDate = date.format('YYYY-MM-DD');\n      this.currentDate = formattedDate;\n      var param = \"?created_at=\" + formattedDate;\n      this.$request.getLog(param).then(res => {});\n    }\n  }\n};","map":{"version":3,"names":["zhCN","moment","OneLog","locale","name","components","data","logData","calendarData","componentKey","openLogModelFlag","currentDate","watch","handler","newVal","oldVal","console","log","getLogs","deep","created","$bus","$on","methods","getListData","value","temp","listData","forEach","item","created_at","split","format","push","type","status","content","getPanelChange","openLogModel","getRunNewmanModelStatus","openRunNewmanModelFlag","getNewmanModelTaskStatus","openNewmanTaskModelFlag","clone","startDate","startOf","subtract","endDate","endOf","add","param","$request","getLog","then","res","onSelect","date","formattedDate"],"sources":["src/Index.vue"],"sourcesContent":["<template>\n  <div class=\"index\">\n    <OneLog :task-log=\"\" :date=\"currentDate\" @updateModelStatus=\"getRunNewmanModelStatus\"\n                :open-flag=\"openLogModelFlag\"></OneLog>\n    <a-calendar :locale=\"locale\" @select=\"onSelect\"  @panelChange=\"getPanelChange\" :key=\"componentKey\">\n      <ul slot=\"dateCellRender\" slot-scope=\"value\" class=\"events\" >\n        <li v-for=\"(item,index) in getListData(value)\" :key=\"index\">\n          <a-badge :status=\"item.type\" :text=\"item.content\" />\n        </li>\n      </ul>\n    </a-calendar>\n  </div>\n</template>\n\n<script>\nimport zhCN from 'ant-design-vue/es/locale/zh_CN'; //引入antd中文包\nimport moment from 'moment';\nimport OneLog from \"@/components/log/OneLog\";\n//引入moment\nmoment.locale('zh-cn');\nexport default {\n  name: \"Index\",\n  components: {OneLog},\n  data(){\n    return{\n      locale:zhCN,//传值给a-config-provider组件\n      logData:[],\n      calendarData:null,\n      componentKey: 0,\n      openLogModelFlag: false,\n      currentDate:\"\"\n    }\n  },\n  watch: {\n    calendarData: {\n      handler: function (newVal,oldVal) {\n        console.log(newVal)\n        this.getLogs(newVal)\n      },\n      // 深度观察监听\n      deep: true\n    }\n  },\n  async created() {\n    await this.getLogs(new moment())\n    // 监听自定义事件\n    this.$bus.$on('requestCompleted', () => {\n      console.log('reloadComponent called')\n      this.getLogs(new moment())\n      this.componentKey += 1;\n    });\n  },\n  methods: {\n    getListData(value) {\n      var temp = value\n      let listData = [];\n      this.logData.forEach(item=>{\n        if (item.created_at.split(\" \")[0] === temp.format('YYYY-MM-DD')){\n          listData.push({ type: item.status === 'failure' ? 'warning' : \"success\", content:item.type +\": \"+item.name })\n        }\n      })\n      return listData || [];\n    },\n\n    getPanelChange(moment){\n      console.log(moment)\n      this.getLogs(moment)\n    },\n\n    openLogModel() {\n      this.openLogModelFlag = true\n    },\n    getRunNewmanModelStatus(status) {\n      this.openRunNewmanModelFlag = status\n    },\n    getNewmanModelTaskStatus(status) {\n      this.openNewmanTaskModelFlag = status\n    },\n\n    getLogs(moment){\n      const temp = moment.clone();\n      var startDate =  temp.startOf('month').subtract(1, 'month').format('YYYY-MM-DD');\n      var endDate =  temp.endOf('month').add(2, 'month').format('YYYY-MM-DD');\n\n      var param = \"?start=\"+startDate+\"&target=\"+endDate\n      this.$request.getLog(param).then(res=>{\n        this.logData = res.data.data\n      })\n    },\n\n    onSelect(value) {\n      const date = moment(value);\n      const formattedDate = date.format('YYYY-MM-DD');\n      this.currentDate = formattedDate\n      var param = \"?created_at=\"+formattedDate\n      this.$request.getLog(param).then(res=>{\n      })\n    },\n  }\n}\n</script>\n\n<style scoped>\n.events {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n.events .ant-badge-status {\n  overflow: hidden;\n  white-space: nowrap;\n  width: 100%;\n  text-overflow: ellipsis;\n  font-size: 12px;\n}\n.notes-month {\n  text-align: center;\n  font-size: 28px;\n}\n.notes-month section {\n  font-size: 28px;\n}\n/deep/ .ant-radio-group {\n  display: none!important;\n}\n\n</style>\n"],"mappings":";AAeA,OAAAA,IAAA;AACA,OAAAC,MAAA;AACA,OAAAC,MAAA;AACA;AACAD,MAAA,CAAAE,MAAA;AACA;EACAC,IAAA;EACAC,UAAA;IAAAH;EAAA;EACAI,KAAA;IACA;MACAH,MAAA,EAAAH,IAAA;MAAA;MACAO,OAAA;MACAC,YAAA;MACAC,YAAA;MACAC,gBAAA;MACAC,WAAA;IACA;EACA;EACAC,KAAA;IACAJ,YAAA;MACAK,OAAA,WAAAA,CAAAC,MAAA,EAAAC,MAAA;QACAC,OAAA,CAAAC,GAAA,CAAAH,MAAA;QACA,KAAAI,OAAA,CAAAJ,MAAA;MACA;MACA;MACAK,IAAA;IACA;EACA;EACA,MAAAC,QAAA;IACA,WAAAF,OAAA,KAAAjB,MAAA;IACA;IACA,KAAAoB,IAAA,CAAAC,GAAA;MACAN,OAAA,CAAAC,GAAA;MACA,KAAAC,OAAA,KAAAjB,MAAA;MACA,KAAAQ,YAAA;IACA;EACA;EACAc,OAAA;IACAC,YAAAC,KAAA;MACA,IAAAC,IAAA,GAAAD,KAAA;MACA,IAAAE,QAAA;MACA,KAAApB,OAAA,CAAAqB,OAAA,CAAAC,IAAA;QACA,IAAAA,IAAA,CAAAC,UAAA,CAAAC,KAAA,aAAAL,IAAA,CAAAM,MAAA;UACAL,QAAA,CAAAM,IAAA;YAAAC,IAAA,EAAAL,IAAA,CAAAM,MAAA;YAAAC,OAAA,EAAAP,IAAA,CAAAK,IAAA,UAAAL,IAAA,CAAAzB;UAAA;QACA;MACA;MACA,OAAAuB,QAAA;IACA;IAEAU,eAAApC,MAAA;MACAe,OAAA,CAAAC,GAAA,CAAAhB,MAAA;MACA,KAAAiB,OAAA,CAAAjB,MAAA;IACA;IAEAqC,aAAA;MACA,KAAA5B,gBAAA;IACA;IACA6B,wBAAAJ,MAAA;MACA,KAAAK,sBAAA,GAAAL,MAAA;IACA;IACAM,yBAAAN,MAAA;MACA,KAAAO,uBAAA,GAAAP,MAAA;IACA;IAEAjB,QAAAjB,MAAA;MACA,MAAAyB,IAAA,GAAAzB,MAAA,CAAA0C,KAAA;MACA,IAAAC,SAAA,GAAAlB,IAAA,CAAAmB,OAAA,UAAAC,QAAA,aAAAd,MAAA;MACA,IAAAe,OAAA,GAAArB,IAAA,CAAAsB,KAAA,UAAAC,GAAA,aAAAjB,MAAA;MAEA,IAAAkB,KAAA,eAAAN,SAAA,gBAAAG,OAAA;MACA,KAAAI,QAAA,CAAAC,MAAA,CAAAF,KAAA,EAAAG,IAAA,CAAAC,GAAA;QACA,KAAA/C,OAAA,GAAA+C,GAAA,CAAAhD,IAAA,CAAAA,IAAA;MACA;IACA;IAEAiD,SAAA9B,KAAA;MACA,MAAA+B,IAAA,GAAAvD,MAAA,CAAAwB,KAAA;MACA,MAAAgC,aAAA,GAAAD,IAAA,CAAAxB,MAAA;MACA,KAAArB,WAAA,GAAA8C,aAAA;MACA,IAAAP,KAAA,oBAAAO,aAAA;MACA,KAAAN,QAAA,CAAAC,MAAA,CAAAF,KAAA,EAAAG,IAAA,CAAAC,GAAA,KACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}