{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport AddScript from \"@/components/Script/AddScript\";\nimport fileDownload from \"js-file-download\";\nimport AddTag from \"@/components/Script/AddTag\";\nexport default {\n  name: \"Script\",\n  components: {\n    AddTag,\n    AddScript,\n    VNodes: {\n      functional: true,\n      render: (h, ctx) => ctx.props.vnodes\n    }\n  },\n  data() {\n    return {\n      columns: [{\n        title: '名称',\n        width: 200,\n        dataIndex: 'name',\n        key: 'name',\n        scopedSlots: {\n          customRender: 'name'\n        }\n      }, {\n        title: '描述',\n        width: 350,\n        dataIndex: 'description',\n        scopedSlots: {\n          customRender: 'description'\n        }\n      }, {\n        title: '标签',\n        key: 'tags',\n        width: 250,\n        dataIndex: 'tags',\n        filters: [],\n        scopedSlots: {\n          customRender: 'tags'\n        }\n      }, {\n        title: '创建时间',\n        width: 150,\n        dataIndex: 'created_at',\n        key: 'created_at',\n        sorter: (a, b) => new Date(a.created_at) - new Date(b.created_at)\n      }, {\n        title: 'Action',\n        dataIndex: '',\n        key: 'x',\n        scopedSlots: {\n          customRender: 'action'\n        }\n      }],\n      // table信息\n      paginationConfig: {\n        defaultCurrent: 1,\n        defaultPageSize: 5\n      },\n      // 分页数据\n      allTags: [],\n      // 所有tags\n      tmpTags: [],\n      // 编辑模式下某行数据的允许新添加的tag\n      scriptData: [],\n      // api请求来的数据\n      tableData: [],\n      // table的数据\n      cacheData: [],\n      // 缓存数据 用于编辑表格时，缓存之前的数据\n      editingKey: '',\n      // 被编辑的行\n      expandedRowKeys: [],\n      //表格默认展开的行\n      filteredTags: [],\n      tagsFilterDropdownVisible: false,\n      openAddScriptModel: false,\n      openAddTagModel: false,\n      fileList: [],\n      // 更新某行数据时，上传组件的file列表\n      componentKey: 0,\n      selectedTagsItems: '' // 编辑模式下，选中的tag\n    };\n  },\n\n  created() {\n    this.getScriptData();\n    this.getAllTag();\n  },\n  methods: {\n    // 获取所有tag并打开add的modal框\n    getAllTag() {\n      this.$request.getTags().then(res => {\n        if (res.status === 200) {\n          this.allTags = res.data.data;\n        } else {\n          this.$message.error(\"获取tags列表错误\");\n        }\n      });\n    },\n    //获取全部ScriptData\n    getScriptData(params) {\n      if (params == null) {\n        params = \"\";\n      }\n      this.$request.getScriptData(params).then(res => {\n        if (res.status === 200) {\n          this.scriptData = res.data.data;\n          const tagsFilters = [];\n          this.scriptData.forEach(item => {\n            item.tags.forEach(tag => {\n              const existingTag = tagsFilters.find(filter => filter.text === tag.name);\n              if (!existingTag) {\n                tagsFilters.push({\n                  text: tag.name,\n                  value: tag.name\n                });\n              }\n            });\n            item.key = item.id;\n          });\n          this.columns.forEach(item => {\n            if (item.key === 'tags') {\n              item.filters = tagsFilters;\n            }\n          });\n          this.tableData = [...this.scriptData];\n          this.cacheData = this.tableData.map(item => JSON.parse(JSON.stringify(item)));\n        }\n      });\n    },\n    /*\n      table编辑功能\n     */\n    // 编辑状态默认展开行\n    handleExpandedRowsChange(expandedRowKeys) {\n      this.expandedRowKeys = expandedRowKeys;\n    },\n    // 编辑事件\n    handleChangeEdit(value, key, column, index) {\n      const newData = [...this.tableData];\n      const target = newData.find(item => key === item.key);\n      if (target) {\n        if (column === 'properties') {\n          target[column][index] = value;\n        } else {\n          target[column] = value;\n        }\n        this.tableData = newData;\n      }\n    },\n    edit(key) {\n      const newData = [...this.tableData];\n      const target = newData.find(item => key === item.key);\n      this.handleExpandedRowsChange([key]);\n      this.editingKey = key;\n      if (target) {\n        var tmp = [];\n        this.allTags.forEach(item => {\n          if (!target.tags.find(i => item.id === i.id)) {\n            tmp.push(item);\n          }\n        });\n        this.tmpTags = [...tmp];\n        target.editable = true;\n        this.tableData = newData;\n      }\n    },\n    save(key) {\n      const newData = [...this.tableData];\n      const newCacheData = JSON.parse(JSON.stringify(this.cacheData));\n      const target = newData.find(item => key === item.key);\n      const targetCache = newCacheData.find(item => key === item.key);\n      if (target && targetCache) {\n        let nameLength = target.name.length;\n        if (!(nameLength >= 5 && nameLength <= 50)) {\n          this.$message.warning(\"名称长度应该在5～50之间\");\n          return;\n        }\n        var message = '';\n        target.properties.forEach((item, index) => {\n          if (item === \"\") {\n            const num = parseInt(index) + 1;\n            message = \"命令行参数存在空字段\";\n          }\n        });\n        if (message !== '') {\n          this.$message.warning(message);\n          return;\n        }\n        var param = {\n          data: {\n            id: target.id,\n            name: target.name,\n            description: target.description,\n            properties: target.properties,\n            path: target.path,\n            tags: target.tags\n          }\n        };\n        this.$request.putScriptData(param).then(res => {\n          if (res.status === 200) {\n            delete target.editable;\n            this.tableData = newData;\n            Object.assign(targetCache, target);\n            this.cacheData = this.tableData.map(item => JSON.parse(JSON.stringify(item)));\n            this.$message.success(\"更新成功\");\n          } else {\n            this.$message.error(\"更新失败\");\n          }\n        });\n      }\n      this.expandedRowKeys = [];\n      this.editingKey = '';\n    },\n    cancel(key) {\n      const newData = [...this.tableData];\n      const target = newData.find(item => key === item.key);\n      this.editingKey = '';\n      if (target) {\n        Object.assign(target, this.cacheData.find(item => key === item.key));\n        delete target.editable;\n        this.tableData = newData;\n        this.cacheData = this.tableData.map(item => JSON.parse(JSON.stringify(item)));\n      }\n      this.expandedRowKeys = [];\n    },\n    // 确认重新上传后点击upload组件\n    confirmUpload() {\n      this.$refs.uploadComponent.$el.querySelector('input[type=file]').click();\n    },\n    // 修改上传的文件 上传前：\n    beforeUpload(file) {\n      // return new Promise((resolve, reject) => {\n      let type = file.name.toLowerCase().substr(file.name.lastIndexOf('.'));\n      if (type !== '.sh') {\n        this.$message.warning('请上传sh文件');\n        // return reject(false)\n        return false;\n      }\n      this.fileList = [file];\n      return true;\n      // })\n    },\n\n    // 文件上传 并保存其他属性\n    uploadUpdateScriptFileAndOther(key) {\n      if (this.fileList.length !== 0) {\n        // 如果上传了新的文件\n        const file = this.fileList[0];\n        let type = file.name.toLowerCase().substr(file.name.lastIndexOf('.'));\n        if (type !== '.sh') {\n          this.$message.warning('请上传sh文件');\n          return false;\n        }\n        this.fileList = [file];\n        const fd = new FormData();\n        this.fileList.forEach(file => {\n          fd.append('file', file);\n        });\n        // 上传文件\n        this.$request.uploadFile(fd, 'script').then(res => {\n          if (res.status === 200) {\n            const path = res.data.data.path;\n            this.handleChangeEdit(path, key, 'path');\n            this.fileList = [];\n            this.$message.success(\"更新脚本文件成功\");\n          } else {\n            this.$message.error(\"更新脚本文件失败\");\n          }\n        });\n      }\n    },\n    // 移除PropertiesItems\n    removePropertiesItems(key, index) {\n      const newData = [...this.tableData];\n      const target = newData.find(item => key === item.key);\n      if (target) {\n        target['properties'].splice(index, 1);\n        this.tableData = newData;\n      }\n    },\n    // 添加新的PropertiesItems\n    addPropertiesItems(key) {\n      const newData = [...this.tableData];\n      const target = newData.find(item => key === item.key);\n      if (target) {\n        target['properties'].push(\"\");\n        this.tableData = newData;\n      }\n    },\n    // 移除一个标签\n    removeTagItem(tagId, key, event) {\n      event.preventDefault();\n      const newData = [...this.tableData];\n      const target = newData.find(item => key === item.key);\n      if (target) {\n        const tmpTags = [];\n        target.tags.forEach(item => {\n          if (item.id !== tagId) {\n            tmpTags.push(item);\n          }\n        });\n        const tag = this.allTags.find(item => tagId === item.id);\n        var tmp = [...this.tmpTags];\n        tmp.push(tag);\n        this.tmpTags = [...tmp];\n        target.tags = tmpTags;\n        this.tableData = newData;\n      }\n    },\n    // 添加一个新的标签\n    addTags() {\n      this.openAddTagModel = true;\n    },\n    // 添加tag的select选择器 搜索功能\n    filterOption(input, option) {\n      return option.componentOptions.children[1].text.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n    },\n    // 选中事件\n    handleEditModeSelectTag(value, option) {\n      this.selectedTagsItems = '';\n      var key = this.editingKey;\n      const newData = this.tableData.slice(); // 创建新的数组副本\n      const target = newData.find(item => key === item.key);\n      var tag = this.tmpTags.find(item => value === item.id);\n      if (target && tag) {\n        target.tags.push(tag);\n        this.tableData = newData; // 更新 this.tableData\n        this.componentKey += 1;\n        var tmp = [];\n        this.allTags.forEach(item => {\n          if (!target.tags.find(i => item.id === i.id)) {\n            tmp.push(item);\n          }\n        });\n        this.tmpTags = [...tmp];\n      }\n    },\n    // 删除脚本\n    deleteScript(key) {\n      this.$confirm({\n        title: '确认删除脚本吗?',\n        content: '将会删除您的脚本文件',\n        okText: '删除',\n        okType: 'danger',\n        cancelText: '不了',\n        onOk: () => {\n          var target = this.cacheData.find(item => key === item.key);\n          var param = {\n            data: {\n              id: target.id\n            }\n          };\n          this.$request.deleteScriptData(param).then(res => {\n            if (res.status === 200) {\n              // 删除backupList，重新设置tableData\n              const newBackupList = [...this.scriptData];\n              this.scriptData = newBackupList.filter(item => item.key !== key);\n              this.tableData = [...this.scriptData];\n              this.$message.success(\"删除成功\");\n\n              // 重新分配筛选器\n              const tagsFilters = [];\n              this.scriptData.forEach(item => {\n                item.tags.forEach(tag => {\n                  const existingTag = tagsFilters.find(filter => filter.text === tag.name);\n                  if (!existingTag) {\n                    tagsFilters.push({\n                      text: tag.name,\n                      value: tag.name\n                    });\n                  }\n                });\n                item.key = item.id;\n              });\n              var columns = this.columns;\n              columns.forEach(item => {\n                if (item.key === 'tags') {\n                  item.filters = tagsFilters;\n                }\n              });\n              this.$set(this, 'columns', [...columns]);\n              this.tableData = [...this.scriptData];\n              // 重新分配cacheData\n              this.cacheData = this.tableData.map(item => JSON.parse(JSON.stringify(item)));\n            } else {\n              this.$message.error(\"删除失败\");\n            }\n          });\n        },\n        onCancel() {\n          console.log('Cancel');\n        }\n      });\n    },\n    // 搜索查询\n    onSearch(value) {\n      var params = \"?key=\" + value;\n      this.getScriptData(params);\n    },\n    // 表格变化事件\n    handleChange(pagination, filters) {\n      var tagFilterChecked = filters.tags;\n      if (filters.tags.length === 0) {\n        this.tableData = [...this.scriptData];\n        return;\n      }\n      this.tableData = this.scriptData.filter(item => {\n        return item.tags.some(tag => tagFilterChecked.includes(tag.name));\n      });\n    },\n    // 添加新脚本\n    addScript() {\n      var allTags = [...this.allTags];\n      this.allTags = [];\n      this.allTags = allTags;\n      this.openAddScriptModel = true;\n    },\n    // 执行一个脚本 并获取响应 直接下载\n    runScript(key) {\n      var message = this.$message;\n      var loadingMessage = message.loading('正在执行脚本，您可以继续进行其他操作，但不要刷新页面', 0);\n      var target = this.scriptData.find(item => key === item.key);\n      var param = {\n        data: {\n          script_id: target.id\n        }\n      };\n      this.$request.runScript(param).then(res => {\n        if (res.status === 200) {\n          setTimeout(loadingMessage, 0);\n          message.success('脚本执行成功', 2.5);\n          // 下载响应\n          const fileName = 'run_' + target.name + '_' + this.getNow();\n          fileDownload(res.data, fileName);\n        } else {\n          setTimeout(loadingMessage, 0);\n          message.error('脚本执行失败', 2.5);\n        }\n      });\n    },\n    // 当新增数据后 更新表格数据\n    updateTable(object) {\n      if (object !== null) {\n        var newData = object[0];\n        newData.key = newData.id;\n\n        // 在scriptData头部添加元素\n        this.scriptData.unshift(newData);\n        this.$set(this, 'scriptData', [...this.scriptData]);\n\n        // 添加过滤器 如果存在就不添加\n        var columns = this.columns;\n        columns.forEach(item => {\n          if (item.key === 'tags') {\n            var filters = [...item.filters]; // 创建 filters 的副本\n\n            newData.tags.forEach(tag => {\n              const existingTag = filters.find(filter => filter.text === tag.name);\n              if (!existingTag) {\n                filters.push({\n                  text: tag.name,\n                  value: tag.name\n                });\n              }\n            });\n            item.filters = filters;\n          }\n        });\n        this.$set(this, 'columns', [...columns]);\n\n        // 更新tableData\n        this.tableData = [...this.scriptData];\n        this.cacheData = this.tableData.map(item => JSON.parse(JSON.stringify(item)));\n      }\n    },\n    // 更新新添加的tag到数组中\n    updateTags(object) {\n      if (object !== null) {\n        const newData = object[0];\n        newData.key = newData.id;\n        // 在tags头部添加元素\n        this.allTags.unshift(newData);\n        this.tmpTags.unshift(newData);\n        this.$set(this, 'tags', [...this.allTags]);\n      }\n    },\n    // 获取modal的状态\n    getAddScriptModelStatus(status) {\n      this.openAddScriptModel = status;\n    },\n    getAddTagModelStatus(status) {\n      this.openAddTagModel = status;\n    },\n    // 下载文件\n    downloadScriptFile(path) {\n      let fileName = path.substring(path.lastIndexOf('/') + 1);\n      this.$request.downloadFile(path).then(res => {\n        if (res.status === 200) {\n          fileDownload(res.data, fileName);\n        }\n      });\n    },\n    // 获取当前时间\n    getNow() {\n      var date = new Date();\n      var year = date.getFullYear();\n      var month = (\"0\" + (date.getMonth() + 1)).slice(-2); //月份从0开始，所以要加1\n      var day = (\"0\" + date.getDate()).slice(-2);\n      var hours = (\"0\" + date.getHours()).slice(-2);\n      var minutes = (\"0\" + date.getMinutes()).slice(-2);\n      var seconds = (\"0\" + date.getSeconds()).slice(-2);\n      return year + month + day + hours + minutes + seconds;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}