{"ast":null,"code":"import { useStyleInject } from '../StyleContext';\nimport useHMR from './useHMR';\nimport { onBeforeUnmount, watch, watchEffect, shallowRef } from 'vue';\nexport default function useClientCache(prefix, keyPath, cacheFn, onCacheRemove) {\n  const styleContext = useStyleInject();\n  const fullPathStr = shallowRef('');\n  const res = shallowRef();\n  watchEffect(() => {\n    fullPathStr.value = [prefix, ...keyPath.value].join('%');\n  });\n  const HMRUpdate = useHMR();\n  const clearCache = pathStr => {\n    styleContext.value.cache.update(pathStr, prevCache => {\n      const [times = 0, cache] = prevCache || [];\n      const nextCount = times - 1;\n      if (nextCount === 0) {\n        onCacheRemove === null || onCacheRemove === void 0 ? void 0 : onCacheRemove(cache, false);\n        return null;\n      }\n      return [times - 1, cache];\n    });\n  };\n  watch(fullPathStr, (newStr, oldStr) => {\n    if (oldStr) clearCache(oldStr);\n    // Create cache\n    styleContext.value.cache.update(newStr, prevCache => {\n      const [times = 0, cache] = prevCache || [];\n      // HMR should always ignore cache since developer may change it\n      let tmpCache = cache;\n      if (process.env.NODE_ENV !== 'production' && cache && HMRUpdate) {\n        onCacheRemove === null || onCacheRemove === void 0 ? void 0 : onCacheRemove(tmpCache, HMRUpdate);\n        tmpCache = null;\n      }\n      const mergedCache = tmpCache || cacheFn();\n      return [times + 1, mergedCache];\n    });\n    res.value = styleContext.value.cache.get(fullPathStr.value)[1];\n  }, {\n    immediate: true\n  });\n  onBeforeUnmount(() => {\n    clearCache(fullPathStr.value);\n  });\n  return res;\n}","map":{"version":3,"names":["useStyleInject","useHMR","onBeforeUnmount","watch","watchEffect","shallowRef","useClientCache","prefix","keyPath","cacheFn","onCacheRemove","styleContext","fullPathStr","res","value","join","HMRUpdate","clearCache","pathStr","cache","update","prevCache","times","nextCount","newStr","oldStr","tmpCache","process","env","NODE_ENV","mergedCache","get","immediate"],"sources":["/Users/lpl/工作/Teamsupport/develop_help/node_modules/ant-design-vue/es/_util/cssinjs/hooks/useGlobalCache.js"],"sourcesContent":["import { useStyleInject } from '../StyleContext';\nimport useHMR from './useHMR';\nimport { onBeforeUnmount, watch, watchEffect, shallowRef } from 'vue';\nexport default function useClientCache(prefix, keyPath, cacheFn, onCacheRemove) {\n  const styleContext = useStyleInject();\n  const fullPathStr = shallowRef('');\n  const res = shallowRef();\n  watchEffect(() => {\n    fullPathStr.value = [prefix, ...keyPath.value].join('%');\n  });\n  const HMRUpdate = useHMR();\n  const clearCache = pathStr => {\n    styleContext.value.cache.update(pathStr, prevCache => {\n      const [times = 0, cache] = prevCache || [];\n      const nextCount = times - 1;\n      if (nextCount === 0) {\n        onCacheRemove === null || onCacheRemove === void 0 ? void 0 : onCacheRemove(cache, false);\n        return null;\n      }\n      return [times - 1, cache];\n    });\n  };\n  watch(fullPathStr, (newStr, oldStr) => {\n    if (oldStr) clearCache(oldStr);\n    // Create cache\n    styleContext.value.cache.update(newStr, prevCache => {\n      const [times = 0, cache] = prevCache || [];\n      // HMR should always ignore cache since developer may change it\n      let tmpCache = cache;\n      if (process.env.NODE_ENV !== 'production' && cache && HMRUpdate) {\n        onCacheRemove === null || onCacheRemove === void 0 ? void 0 : onCacheRemove(tmpCache, HMRUpdate);\n        tmpCache = null;\n      }\n      const mergedCache = tmpCache || cacheFn();\n      return [times + 1, mergedCache];\n    });\n    res.value = styleContext.value.cache.get(fullPathStr.value)[1];\n  }, {\n    immediate: true\n  });\n  onBeforeUnmount(() => {\n    clearCache(fullPathStr.value);\n  });\n  return res;\n}"],"mappings":"AAAA,SAASA,cAAc,QAAQ,iBAAiB;AAChD,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,eAAe,EAAEC,KAAK,EAAEC,WAAW,EAAEC,UAAU,QAAQ,KAAK;AACrE,eAAe,SAASC,cAAcA,CAACC,MAAM,EAAEC,OAAO,EAAEC,OAAO,EAAEC,aAAa,EAAE;EAC9E,MAAMC,YAAY,GAAGX,cAAc,CAAC,CAAC;EACrC,MAAMY,WAAW,GAAGP,UAAU,CAAC,EAAE,CAAC;EAClC,MAAMQ,GAAG,GAAGR,UAAU,CAAC,CAAC;EACxBD,WAAW,CAAC,MAAM;IAChBQ,WAAW,CAACE,KAAK,GAAG,CAACP,MAAM,EAAE,GAAGC,OAAO,CAACM,KAAK,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EAC1D,CAAC,CAAC;EACF,MAAMC,SAAS,GAAGf,MAAM,CAAC,CAAC;EAC1B,MAAMgB,UAAU,GAAGC,OAAO,IAAI;IAC5BP,YAAY,CAACG,KAAK,CAACK,KAAK,CAACC,MAAM,CAACF,OAAO,EAAEG,SAAS,IAAI;MACpD,MAAM,CAACC,KAAK,GAAG,CAAC,EAAEH,KAAK,CAAC,GAAGE,SAAS,IAAI,EAAE;MAC1C,MAAME,SAAS,GAAGD,KAAK,GAAG,CAAC;MAC3B,IAAIC,SAAS,KAAK,CAAC,EAAE;QACnBb,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,aAAa,CAACS,KAAK,EAAE,KAAK,CAAC;QACzF,OAAO,IAAI;MACb;MACA,OAAO,CAACG,KAAK,GAAG,CAAC,EAAEH,KAAK,CAAC;IAC3B,CAAC,CAAC;EACJ,CAAC;EACDhB,KAAK,CAACS,WAAW,EAAE,CAACY,MAAM,EAAEC,MAAM,KAAK;IACrC,IAAIA,MAAM,EAAER,UAAU,CAACQ,MAAM,CAAC;IAC9B;IACAd,YAAY,CAACG,KAAK,CAACK,KAAK,CAACC,MAAM,CAACI,MAAM,EAAEH,SAAS,IAAI;MACnD,MAAM,CAACC,KAAK,GAAG,CAAC,EAAEH,KAAK,CAAC,GAAGE,SAAS,IAAI,EAAE;MAC1C;MACA,IAAIK,QAAQ,GAAGP,KAAK;MACpB,IAAIQ,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAIV,KAAK,IAAIH,SAAS,EAAE;QAC/DN,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,aAAa,CAACgB,QAAQ,EAAEV,SAAS,CAAC;QAChGU,QAAQ,GAAG,IAAI;MACjB;MACA,MAAMI,WAAW,GAAGJ,QAAQ,IAAIjB,OAAO,CAAC,CAAC;MACzC,OAAO,CAACa,KAAK,GAAG,CAAC,EAAEQ,WAAW,CAAC;IACjC,CAAC,CAAC;IACFjB,GAAG,CAACC,KAAK,GAAGH,YAAY,CAACG,KAAK,CAACK,KAAK,CAACY,GAAG,CAACnB,WAAW,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC;EAChE,CAAC,EAAE;IACDkB,SAAS,EAAE;EACb,CAAC,CAAC;EACF9B,eAAe,CAAC,MAAM;IACpBe,UAAU,CAACL,WAAW,CAACE,KAAK,CAAC;EAC/B,CAAC,CAAC;EACF,OAAOD,GAAG;AACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}