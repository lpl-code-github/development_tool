{"ast":null,"code":"import _mergeJSXProps from 'babel-helper-vue-jsx-merge-props';\nimport _extends from 'babel-runtime/helpers/extends';\n/**\n * Wrap of sub component which need use as Button capacity (like Icon component).\n * This helps accessibility reader to tread as a interactive button to operation.\n */\nimport KeyCode from './KeyCode';\nimport PropTypes from './vue-types';\nvar inlineStyle = {\n  border: 0,\n  background: 'transparent',\n  padding: 0,\n  lineHeight: 'inherit',\n  display: 'inline-block'\n};\nvar TransButton = {\n  props: {\n    noStyle: PropTypes.bool\n  },\n  methods: {\n    onKeyDown: function onKeyDown(event) {\n      var keyCode = event.keyCode;\n      if (keyCode === KeyCode.ENTER) {\n        event.preventDefault();\n      }\n    },\n    onKeyUp: function onKeyUp(event) {\n      var keyCode = event.keyCode;\n      if (keyCode === KeyCode.ENTER) {\n        this.$emit('click', event);\n      }\n    },\n    setRef: function setRef(btn) {\n      this.div = btn;\n    },\n    focus: function focus() {\n      if (this.div) {\n        this.div.focus();\n      }\n    },\n    blur: function blur() {\n      if (this.div) {\n        this.div.blur();\n      }\n    }\n  },\n  render: function render() {\n    var h = arguments[0];\n    var noStyle = this.$props.noStyle;\n    return h('div', _mergeJSXProps([{\n      attrs: {\n        role: 'button',\n        tabIndex: 0\n      }\n    }, {\n      directives: [{\n        name: 'ant-ref',\n        value: this.setRef\n      }],\n      on: _extends({}, this.$listeners, {\n        keydown: this.onKeyDown,\n        keyup: this.onKeyUp\n      })\n    }, {\n      style: _extends({}, !noStyle ? inlineStyle : null)\n    }]), [this.$slots['default']]);\n  }\n};\nexport default TransButton;","map":{"version":3,"names":["_mergeJSXProps","_extends","KeyCode","PropTypes","inlineStyle","border","background","padding","lineHeight","display","TransButton","props","noStyle","bool","methods","onKeyDown","event","keyCode","ENTER","preventDefault","onKeyUp","$emit","setRef","btn","div","focus","blur","render","h","arguments","$props","attrs","role","tabIndex","directives","name","value","on","$listeners","keydown","keyup","style","$slots"],"sources":["/Users/lpl/工作/Teamsupport/develop_help/client/node_modules/ant-design-vue/es/_util/transButton.js"],"sourcesContent":["import _mergeJSXProps from 'babel-helper-vue-jsx-merge-props';\nimport _extends from 'babel-runtime/helpers/extends';\n/**\n * Wrap of sub component which need use as Button capacity (like Icon component).\n * This helps accessibility reader to tread as a interactive button to operation.\n */\nimport KeyCode from './KeyCode';\nimport PropTypes from './vue-types';\n\nvar inlineStyle = {\n  border: 0,\n  background: 'transparent',\n  padding: 0,\n  lineHeight: 'inherit',\n  display: 'inline-block'\n};\n\nvar TransButton = {\n  props: {\n    noStyle: PropTypes.bool\n  },\n\n  methods: {\n    onKeyDown: function onKeyDown(event) {\n      var keyCode = event.keyCode;\n\n      if (keyCode === KeyCode.ENTER) {\n        event.preventDefault();\n      }\n    },\n    onKeyUp: function onKeyUp(event) {\n      var keyCode = event.keyCode;\n\n      if (keyCode === KeyCode.ENTER) {\n        this.$emit('click', event);\n      }\n    },\n    setRef: function setRef(btn) {\n      this.div = btn;\n    },\n    focus: function focus() {\n      if (this.div) {\n        this.div.focus();\n      }\n    },\n    blur: function blur() {\n      if (this.div) {\n        this.div.blur();\n      }\n    }\n  },\n\n  render: function render() {\n    var h = arguments[0];\n    var noStyle = this.$props.noStyle;\n\n\n    return h(\n      'div',\n      _mergeJSXProps([{\n        attrs: {\n          role: 'button',\n          tabIndex: 0\n        }\n      }, {\n        directives: [{\n          name: 'ant-ref',\n          value: this.setRef\n        }],\n        on: _extends({}, this.$listeners, {\n          keydown: this.onKeyDown,\n          keyup: this.onKeyUp\n        })\n      }, {\n        style: _extends({}, !noStyle ? inlineStyle : null)\n      }]),\n      [this.$slots['default']]\n    );\n  }\n};\n\nexport default TransButton;"],"mappings":"AAAA,OAAOA,cAAc,MAAM,kCAAkC;AAC7D,OAAOC,QAAQ,MAAM,+BAA+B;AACpD;AACA;AACA;AACA;AACA,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,SAAS,MAAM,aAAa;AAEnC,IAAIC,WAAW,GAAG;EAChBC,MAAM,EAAE,CAAC;EACTC,UAAU,EAAE,aAAa;EACzBC,OAAO,EAAE,CAAC;EACVC,UAAU,EAAE,SAAS;EACrBC,OAAO,EAAE;AACX,CAAC;AAED,IAAIC,WAAW,GAAG;EAChBC,KAAK,EAAE;IACLC,OAAO,EAAET,SAAS,CAACU;EACrB,CAAC;EAEDC,OAAO,EAAE;IACPC,SAAS,EAAE,SAASA,SAASA,CAACC,KAAK,EAAE;MACnC,IAAIC,OAAO,GAAGD,KAAK,CAACC,OAAO;MAE3B,IAAIA,OAAO,KAAKf,OAAO,CAACgB,KAAK,EAAE;QAC7BF,KAAK,CAACG,cAAc,CAAC,CAAC;MACxB;IACF,CAAC;IACDC,OAAO,EAAE,SAASA,OAAOA,CAACJ,KAAK,EAAE;MAC/B,IAAIC,OAAO,GAAGD,KAAK,CAACC,OAAO;MAE3B,IAAIA,OAAO,KAAKf,OAAO,CAACgB,KAAK,EAAE;QAC7B,IAAI,CAACG,KAAK,CAAC,OAAO,EAAEL,KAAK,CAAC;MAC5B;IACF,CAAC;IACDM,MAAM,EAAE,SAASA,MAAMA,CAACC,GAAG,EAAE;MAC3B,IAAI,CAACC,GAAG,GAAGD,GAAG;IAChB,CAAC;IACDE,KAAK,EAAE,SAASA,KAAKA,CAAA,EAAG;MACtB,IAAI,IAAI,CAACD,GAAG,EAAE;QACZ,IAAI,CAACA,GAAG,CAACC,KAAK,CAAC,CAAC;MAClB;IACF,CAAC;IACDC,IAAI,EAAE,SAASA,IAAIA,CAAA,EAAG;MACpB,IAAI,IAAI,CAACF,GAAG,EAAE;QACZ,IAAI,CAACA,GAAG,CAACE,IAAI,CAAC,CAAC;MACjB;IACF;EACF,CAAC;EAEDC,MAAM,EAAE,SAASA,MAAMA,CAAA,EAAG;IACxB,IAAIC,CAAC,GAAGC,SAAS,CAAC,CAAC,CAAC;IACpB,IAAIjB,OAAO,GAAG,IAAI,CAACkB,MAAM,CAAClB,OAAO;IAGjC,OAAOgB,CAAC,CACN,KAAK,EACL5B,cAAc,CAAC,CAAC;MACd+B,KAAK,EAAE;QACLC,IAAI,EAAE,QAAQ;QACdC,QAAQ,EAAE;MACZ;IACF,CAAC,EAAE;MACDC,UAAU,EAAE,CAAC;QACXC,IAAI,EAAE,SAAS;QACfC,KAAK,EAAE,IAAI,CAACd;MACd,CAAC,CAAC;MACFe,EAAE,EAAEpC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAACqC,UAAU,EAAE;QAChCC,OAAO,EAAE,IAAI,CAACxB,SAAS;QACvByB,KAAK,EAAE,IAAI,CAACpB;MACd,CAAC;IACH,CAAC,EAAE;MACDqB,KAAK,EAAExC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAACW,OAAO,GAAGR,WAAW,GAAG,IAAI;IACnD,CAAC,CAAC,CAAC,EACH,CAAC,IAAI,CAACsC,MAAM,CAAC,SAAS,CAAC,CACzB,CAAC;EACH;AACF,CAAC;AAED,eAAehC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}