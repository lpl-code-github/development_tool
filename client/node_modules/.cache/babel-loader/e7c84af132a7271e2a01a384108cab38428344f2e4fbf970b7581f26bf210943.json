{"ast":null,"code":"import { supportBigInt } from './supportUtil';\n/**\n * Format string number to readable number\n */\nexport function trimNumber(numStr) {\n  let str = numStr.trim();\n  let negative = str.startsWith('-');\n  if (negative) {\n    str = str.slice(1);\n  }\n  str = str\n  // Remove decimal 0. `1.000` => `1.`, `1.100` => `1.1`\n  .replace(/(\\.\\d*[^0])0*$/, '$1')\n  // Remove useless decimal. `1.` => `1`\n  .replace(/\\.0*$/, '')\n  // Remove integer 0. `0001` => `1`, 000.1' => `.1`\n  .replace(/^0+/, '');\n  if (str.startsWith('.')) {\n    str = `0${str}`;\n  }\n  const trimStr = str || '0';\n  const splitNumber = trimStr.split('.');\n  const integerStr = splitNumber[0] || '0';\n  const decimalStr = splitNumber[1] || '0';\n  if (integerStr === '0' && decimalStr === '0') {\n    negative = false;\n  }\n  const negativeStr = negative ? '-' : '';\n  return {\n    negative,\n    negativeStr,\n    trimStr,\n    integerStr,\n    decimalStr,\n    fullStr: `${negativeStr}${trimStr}`\n  };\n}\nexport function isE(number) {\n  const str = String(number);\n  return !Number.isNaN(Number(str)) && str.includes('e');\n}\n/**\n * [Legacy] Convert 1e-9 to 0.000000001.\n * This may lose some precision if user really want 1e-9.\n */\nexport function getNumberPrecision(number) {\n  const numStr = String(number);\n  if (isE(number)) {\n    let precision = Number(numStr.slice(numStr.indexOf('e-') + 2));\n    const decimalMatch = numStr.match(/\\.(\\d+)/);\n    if (decimalMatch === null || decimalMatch === void 0 ? void 0 : decimalMatch[1]) {\n      precision += decimalMatch[1].length;\n    }\n    return precision;\n  }\n  return numStr.includes('.') && validateNumber(numStr) ? numStr.length - numStr.indexOf('.') - 1 : 0;\n}\n/**\n * Convert number (includes scientific notation) to -xxx.yyy format\n */\nexport function num2str(number) {\n  let numStr = String(number);\n  if (isE(number)) {\n    if (number > Number.MAX_SAFE_INTEGER) {\n      return String(supportBigInt() ? BigInt(number).toString() : Number.MAX_SAFE_INTEGER);\n    }\n    if (number < Number.MIN_SAFE_INTEGER) {\n      return String(supportBigInt() ? BigInt(number).toString() : Number.MIN_SAFE_INTEGER);\n    }\n    numStr = number.toFixed(getNumberPrecision(numStr));\n  }\n  return trimNumber(numStr).fullStr;\n}\nexport function validateNumber(num) {\n  if (typeof num === 'number') {\n    return !Number.isNaN(num);\n  }\n  // Empty\n  if (!num) {\n    return false;\n  }\n  return (\n    // Normal type: 11.28\n    /^\\s*-?\\d+(\\.\\d+)?\\s*$/.test(num) ||\n    // Pre-number: 1.\n    /^\\s*-?\\d+\\.\\s*$/.test(num) ||\n    // Post-number: .1\n    /^\\s*-?\\.\\d+\\s*$/.test(num)\n  );\n}","map":{"version":3,"names":["supportBigInt","trimNumber","numStr","str","trim","negative","startsWith","slice","replace","trimStr","splitNumber","split","integerStr","decimalStr","negativeStr","fullStr","isE","number","String","Number","isNaN","includes","getNumberPrecision","precision","indexOf","decimalMatch","match","length","validateNumber","num2str","MAX_SAFE_INTEGER","BigInt","toString","MIN_SAFE_INTEGER","toFixed","num","test"],"sources":["/Users/lpl/工作/Teamsupport/develop_help/node_modules/ant-design-vue/es/input-number/src/utils/numberUtil.js"],"sourcesContent":["import { supportBigInt } from './supportUtil';\n/**\n * Format string number to readable number\n */\nexport function trimNumber(numStr) {\n  let str = numStr.trim();\n  let negative = str.startsWith('-');\n  if (negative) {\n    str = str.slice(1);\n  }\n  str = str\n  // Remove decimal 0. `1.000` => `1.`, `1.100` => `1.1`\n  .replace(/(\\.\\d*[^0])0*$/, '$1')\n  // Remove useless decimal. `1.` => `1`\n  .replace(/\\.0*$/, '')\n  // Remove integer 0. `0001` => `1`, 000.1' => `.1`\n  .replace(/^0+/, '');\n  if (str.startsWith('.')) {\n    str = `0${str}`;\n  }\n  const trimStr = str || '0';\n  const splitNumber = trimStr.split('.');\n  const integerStr = splitNumber[0] || '0';\n  const decimalStr = splitNumber[1] || '0';\n  if (integerStr === '0' && decimalStr === '0') {\n    negative = false;\n  }\n  const negativeStr = negative ? '-' : '';\n  return {\n    negative,\n    negativeStr,\n    trimStr,\n    integerStr,\n    decimalStr,\n    fullStr: `${negativeStr}${trimStr}`\n  };\n}\nexport function isE(number) {\n  const str = String(number);\n  return !Number.isNaN(Number(str)) && str.includes('e');\n}\n/**\n * [Legacy] Convert 1e-9 to 0.000000001.\n * This may lose some precision if user really want 1e-9.\n */\nexport function getNumberPrecision(number) {\n  const numStr = String(number);\n  if (isE(number)) {\n    let precision = Number(numStr.slice(numStr.indexOf('e-') + 2));\n    const decimalMatch = numStr.match(/\\.(\\d+)/);\n    if (decimalMatch === null || decimalMatch === void 0 ? void 0 : decimalMatch[1]) {\n      precision += decimalMatch[1].length;\n    }\n    return precision;\n  }\n  return numStr.includes('.') && validateNumber(numStr) ? numStr.length - numStr.indexOf('.') - 1 : 0;\n}\n/**\n * Convert number (includes scientific notation) to -xxx.yyy format\n */\nexport function num2str(number) {\n  let numStr = String(number);\n  if (isE(number)) {\n    if (number > Number.MAX_SAFE_INTEGER) {\n      return String(supportBigInt() ? BigInt(number).toString() : Number.MAX_SAFE_INTEGER);\n    }\n    if (number < Number.MIN_SAFE_INTEGER) {\n      return String(supportBigInt() ? BigInt(number).toString() : Number.MIN_SAFE_INTEGER);\n    }\n    numStr = number.toFixed(getNumberPrecision(numStr));\n  }\n  return trimNumber(numStr).fullStr;\n}\nexport function validateNumber(num) {\n  if (typeof num === 'number') {\n    return !Number.isNaN(num);\n  }\n  // Empty\n  if (!num) {\n    return false;\n  }\n  return (\n    // Normal type: 11.28\n    /^\\s*-?\\d+(\\.\\d+)?\\s*$/.test(num) ||\n    // Pre-number: 1.\n    /^\\s*-?\\d+\\.\\s*$/.test(num) ||\n    // Post-number: .1\n    /^\\s*-?\\.\\d+\\s*$/.test(num)\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}