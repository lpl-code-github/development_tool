{"ast":null,"code":"import RunNewman from \"@/components/Newman/RunNewman\";\nimport NewmanTask from \"@/components/Newman/NewmanTask\";\nimport { getNewmanTasks } from \"@/api/request\";\nexport default {\n  name: \"Newman\",\n  components: {\n    NewmanTask,\n    RunNewman\n  },\n  data() {\n    return {\n      taskCount: 0,\n      columns: [{\n        title: '操作名称',\n        width: 150,\n        dataIndex: 'name',\n        key: 'name'\n      }, {\n        title: '开始时间',\n        width: 100,\n        dataIndex: 'created_at',\n        key: 'created_at'\n      }, {\n        title: '结束时间',\n        width: 100,\n        dataIndex: 'updated_at',\n        key: 'updated_at'\n      }, {\n        title: 'Action',\n        width: 200,\n        dataIndex: '',\n        key: 'x',\n        scopedSlots: {\n          customRender: 'action'\n        }\n      }],\n      paginationConfig: {\n        defaultCurrent: 1,\n        defaultPageSize: 5\n      },\n      scriptData: [],\n      tableData: [],\n      filteredTags: [],\n      tagsFilterDropdownVisible: false,\n      openRunNewmanModelFlag: false,\n      openNewmanTaskModelFlag: false,\n      runTestFlag: false,\n      timer: null,\n      taskName: \"\",\n      // flag 代表任务打开与关闭\n      tempTaskLog: [{\n        name: \"关闭测试环境的报错信息\",\n        flag: false,\n        status: \"\",\n        index: 1\n      }, {\n        name: \"导入备份/恢复数据库的测试接口\",\n        flag: false,\n        status: \"\",\n        index: 2\n      }, {\n        name: \"切换到测试环境\",\n        flag: false,\n        status: \"\",\n        index: 3\n      }, {\n        name: \"执行newman测试命令\",\n        flag: false,\n        status: \"\",\n        index: 4\n      }],\n      taskLog: [],\n      currentTask: null\n    };\n  },\n  watch: {\n    taskLog: {\n      handler: function (newVal, oldVal) {},\n      // 深度观察监听\n      deep: true\n    }\n  },\n  created() {\n    this.getUnfinishedNewmanTasks();\n    this.getScriptData();\n  },\n  mounted() {\n    if (this.timer == null) {\n      this.timer = setInterval(this.getUnfinishedNewmanTasks, 3000);\n    }\n  },\n  beforeDestroy() {\n    clearInterval(this.timer);\n  },\n  methods: {\n    onSearch(value) {\n      console.log(value);\n    },\n    handleChange(pagination, filters) {\n      var tagFilterChecked = filters.tags;\n      if (filters.tags.length === 0) {\n        this.tableData = this.scriptData;\n        return;\n      }\n      this.tableData = this.scriptData.filter(item => {\n        return item.tags.some(tag => tagFilterChecked.includes(tag.text));\n      });\n    },\n    getScriptData() {\n      this.scriptData = [{\n        id: 1,\n        name: 'John Brown',\n        created_at: 'New York No. 1 Lake Park',\n        updated_at: 'New York No. 1 Lake Park',\n        description: 'My name is John Brown, I am 32 years old, living in New York No. 1 Lake Park.'\n      }, {\n        id: 2,\n        name: 'Jim Green',\n        created_at: 'New York No. 1 Lake Park',\n        updated_at: 'New York No. 1 Lake Park',\n        description: 'My name is Jim Green, I am 42 years old, living in London No. 1 Lake Park.'\n      }, {\n        id: 3,\n        name: 'Joe Black',\n        created_at: 'New York No. 1 Lake Park',\n        updated_at: 'New York No. 1 Lake Park',\n        description: 'My name is Joe Black, I am 32 years old, living in Sidney No. 1 Lake Park.'\n      }, {\n        id: 4,\n        name: 'Joe Black',\n        created_at: 'New York No. 1 Lake Park',\n        updated_at: 'New York No. 1 Lake Park',\n        description: 'My name is Joe Black, I am 32 years old, living in Sidney No. 1 Lake Park.'\n      }];\n      this.tableData = this.scriptData;\n    },\n    openRunNewmanModel() {\n      this.openRunNewmanModelFlag = true;\n    },\n    openNewmanTaskModel() {\n      this.openNewmanTaskModelFlag = true;\n    },\n    getRunNewmanModelStatus(status) {\n      this.openRunNewmanModelFlag = status;\n    },\n    getNewmanModelTaskStatus(status) {\n      this.openNewmanTaskModelFlag = status;\n    },\n    getRunTaskObj(taskObj) {\n      if (taskObj != null) {\n        this.runTestFlag = true;\n        console.log(taskObj);\n      }\n    },\n    // 获取未完成的任务\n    getUnfinishedNewmanTasks() {\n      var param = \"?is_unfinished=true\";\n      this.$request.getNewmanTasks(param).then(res => {\n        if (res.status === 200) {\n          var data = res.data.data;\n          if (data.length !== 0) {\n            var task = data[0];\n            this.currentTask = task;\n            this.taskName = task.name;\n            this.taskCount = 1;\n            if (task.log == null) {\n              var putParam = {\n                data: {\n                  log: this.tempTaskLog,\n                  id: task.id\n                }\n              };\n              this.$request.putNewmanTasksLog(putParam).then(res => {\n                if (res.status === 200) {\n                  if (res.data.data.log != null && res.data.data.log.length !== 0) {\n                    this.taskLog = res.data.data.log;\n                  } else {\n                    this.taskLog = [];\n                  }\n                } else {\n                  this.taskLog = [];\n                }\n              });\n            } else {\n              this.taskLog = task.log;\n              // 有log的时候，根据log判断需要发什么请求\n            }\n          } else {\n            this.currentTask = null;\n            this.taskName = \"\";\n            this.taskCount = 0;\n            this.taskLog = [];\n          }\n        }\n      });\n    },\n    async startPostmanTest(taskLog) {\n      for (let i = 0; i < taskLog.length; i++) {\n        var item = taskLog[i];\n        if (item.flag === false) {\n          // 任务未开始\n          // 执行任务\n          if (item.index === 1) {\n            // 关闭测试环境的报错信息\n            await this.$request.switchApi('test_env_error_message', false).then(res => {\n              if (res.status === 200) {// 关闭成功\n              } else {}\n            });\n          } else if (item.index === 2) {// 导入备份/恢复数据库的测试接口\n          } else if (item.index === 3) {// 切换到测试环境\n          }\n          // 更新log\n          break;\n        }\n      }\n    },\n    // 更新日志及状态\n    modifyTaskLog(log, status, id) {\n      var putParam = {\n        data: {\n          log: log,\n          status: status,\n          id: id\n        }\n      };\n      this.$request.putNewmanTasksLog(putParam).then();\n    },\n    initTaskLog() {\n      this.taskLog = [...this.tempTaskLog];\n    }\n  }\n};","map":{"version":3,"names":["RunNewman","NewmanTask","getNewmanTasks","name","components","data","taskCount","columns","title","width","dataIndex","key","scopedSlots","customRender","paginationConfig","defaultCurrent","defaultPageSize","scriptData","tableData","filteredTags","tagsFilterDropdownVisible","openRunNewmanModelFlag","openNewmanTaskModelFlag","runTestFlag","timer","taskName","tempTaskLog","flag","status","index","taskLog","currentTask","watch","handler","newVal","oldVal","deep","created","getUnfinishedNewmanTasks","getScriptData","mounted","setInterval","beforeDestroy","clearInterval","methods","onSearch","value","console","log","handleChange","pagination","filters","tagFilterChecked","tags","length","filter","item","some","tag","includes","text","id","created_at","updated_at","description","openRunNewmanModel","openNewmanTaskModel","getRunNewmanModelStatus","getNewmanModelTaskStatus","getRunTaskObj","taskObj","param","$request","then","res","task","putParam","putNewmanTasksLog","startPostmanTest","i","switchApi","modifyTaskLog","initTaskLog"],"sources":["src/views/Newman.vue"],"sourcesContent":["<template>\n  <div class=\"my-newman\">\n    <RunNewman @newmanTask=\"getRunTaskObj\" @updateModelStatus=\"getRunNewmanModelStatus\"\n               :open-flag=\"openRunNewmanModelFlag\"></RunNewman>\n    <NewmanTask :task-log=\"taskLog\" :taskName=\"taskName\" @updateModelStatus=\"getNewmanModelTaskStatus\"\n                :open-flag=\"openNewmanTaskModelFlag\"></NewmanTask>\n    <div class=\"my-n-button\">\n      <a-input-search placeholder=\"输入脚本名或描述搜索\" style=\"width: 200px\" @search=\"onSearch\"/>\n      <div>\n        <a-button type=\"primary\" @click=\"openRunNewmanModel\" style=\"margin-right: 10px\">\n          创建任务\n        </a-button>\n        <a-badge :count=\"taskCount\" style=\"margin-right: 10px\">\n          <a-button @click=\"openNewmanTaskModel\">\n            任务详情\n            <a-icon v-if=\"taskCount !== 0\" type=\"sync\" spin/>\n          </a-button>\n        </a-badge>\n        <!--        <a-button @click=\"openNewmanLogModel\" style=\"margin-right: 10px\">-->\n        <!--          日志-->\n        <!--        </a-button>-->\n      </div>\n    </div>\n    <div class=\"my-n-table\">\n      <a-table\n          :columns=\"columns\"\n          :data-source=\"tableData\"\n          @change=\"handleChange\"\n          :pagination=\"paginationConfig\"\n      >\n        <span slot=\"action\" slot-scope=\"text, record\">\n          <a style=\"color: #286d9f\">Html报告</a>\n          <a-divider type=\"vertical\" style=\"background-color: #a8a7a7!important;\"/>\n          <a style=\"color: #16750c\">Excel报告</a>\n          <a-divider type=\"vertical\" style=\"background-color: #a8a7a7!important;\"/>\n          <a style=\"color: #e01735\">删除记录</a>\n        </span>\n        <p slot=\"expandedRowRender\" slot-scope=\"record\" style=\"margin: 0\">\n          {{ record.description }}\n        </p>\n      </a-table>\n    </div>\n  </div>\n</template>\n\n<script>\nimport RunNewman from \"@/components/Newman/RunNewman\";\nimport NewmanTask from \"@/components/Newman/NewmanTask\";\nimport {getNewmanTasks} from \"@/api/request\";\n\nexport default {\n  name: \"Newman\",\n  components: {NewmanTask, RunNewman},\n  data() {\n    return {\n      taskCount: 0,\n      columns: [\n        {title: '操作名称', width: 150, dataIndex: 'name', key: 'name'},\n        {title: '开始时间', width: 100, dataIndex: 'created_at', key: 'created_at'},\n        {title: '结束时间', width: 100, dataIndex: 'updated_at', key: 'updated_at'},\n        {title: 'Action', width: 200, dataIndex: '', key: 'x', scopedSlots: {customRender: 'action'}},\n      ],\n      paginationConfig: {\n        defaultCurrent: 1,\n        defaultPageSize: 5,\n      },\n      scriptData: [],\n      tableData: [],\n      filteredTags: [],\n      tagsFilterDropdownVisible: false,\n      openRunNewmanModelFlag: false,\n      openNewmanTaskModelFlag: false,\n      runTestFlag: false,\n      timer: null,\n      taskName: \"\",\n      // flag 代表任务打开与关闭\n      tempTaskLog: [\n        {\n          name: \"关闭测试环境的报错信息\",\n          flag: false,\n          status: \"\",\n          index: 1\n        },\n        {\n          name: \"导入备份/恢复数据库的测试接口\",\n          flag: false,\n          status: \"\",\n          index: 2\n        },\n        {\n          name: \"切换到测试环境\",\n          flag: false,\n          status: \"\",\n          index: 3\n        },\n        {\n          name: \"执行newman测试命令\",\n          flag: false,\n          status: \"\",\n          index: 4\n        }\n      ],\n      taskLog: [],\n      currentTask: null\n    }\n  },\n  watch: {\n    taskLog: {\n      handler: function (newVal, oldVal) {\n\n      },\n      // 深度观察监听\n      deep: true\n    }\n  },\n  created() {\n    this.getUnfinishedNewmanTasks()\n    this.getScriptData()\n  },\n  mounted() {\n    if (this.timer == null) {\n      this.timer = setInterval(this.getUnfinishedNewmanTasks, 3000);\n    }\n  },\n  beforeDestroy() {\n    clearInterval(this.timer);\n  },\n  methods: {\n    onSearch(value) {\n      console.log(value);\n    },\n    handleChange(pagination, filters) {\n      var tagFilterChecked = filters.tags\n      if (filters.tags.length === 0) {\n        this.tableData = this.scriptData\n        return\n      }\n      this.tableData = this.scriptData.filter(item => {\n        return item.tags.some(tag => tagFilterChecked.includes(tag.text));\n      })\n    },\n    getScriptData() {\n      this.scriptData = [\n        {\n          id: 1,\n          name: 'John Brown',\n          created_at: 'New York No. 1 Lake Park',\n          updated_at: 'New York No. 1 Lake Park',\n          description: 'My name is John Brown, I am 32 years old, living in New York No. 1 Lake Park.',\n        },\n        {\n          id: 2,\n          name: 'Jim Green',\n          created_at: 'New York No. 1 Lake Park',\n          updated_at: 'New York No. 1 Lake Park',\n          description: 'My name is Jim Green, I am 42 years old, living in London No. 1 Lake Park.',\n        },\n        {\n          id: 3,\n          name: 'Joe Black',\n          created_at: 'New York No. 1 Lake Park',\n          updated_at: 'New York No. 1 Lake Park',\n          description: 'My name is Joe Black, I am 32 years old, living in Sidney No. 1 Lake Park.',\n        },\n        {\n          id: 4,\n          name: 'Joe Black',\n          created_at: 'New York No. 1 Lake Park',\n          updated_at: 'New York No. 1 Lake Park',\n          description: 'My name is Joe Black, I am 32 years old, living in Sidney No. 1 Lake Park.',\n        }\n      ]\n\n      this.tableData = this.scriptData\n    },\n\n    openRunNewmanModel() {\n      this.openRunNewmanModelFlag = true\n    },\n    openNewmanTaskModel() {\n      this.openNewmanTaskModelFlag = true\n    },\n    getRunNewmanModelStatus(status) {\n      this.openRunNewmanModelFlag = status\n    },\n    getNewmanModelTaskStatus(status) {\n      this.openNewmanTaskModelFlag = status\n    },\n    getRunTaskObj(taskObj) {\n      if (taskObj != null) {\n        this.runTestFlag = true\n        console.log(taskObj)\n      }\n    },\n\n    // 获取未完成的任务\n    getUnfinishedNewmanTasks() {\n      var param = \"?is_unfinished=true\"\n      this.$request.getNewmanTasks(param).then(res => {\n        if (res.status === 200) {\n          var data = res.data.data\n          if (data.length !== 0) {\n            var task = data[0];\n            this.currentTask = task\n            this.taskName = task.name;\n            this.taskCount = 1;\n            if (task.log == null) {\n              var putParam = {data: {log: this.tempTaskLog, id: task.id}}\n              this.$request.putNewmanTasksLog(putParam).then(res => {\n                if (res.status === 200) {\n                  if (res.data.data.log != null && res.data.data.log.length !== 0) {\n                    this.taskLog = res.data.data.log\n                  } else {\n                    this.taskLog = []\n                  }\n                } else {\n                  this.taskLog = []\n                }\n              })\n            } else {\n              this.taskLog = task.log\n              // 有log的时候，根据log判断需要发什么请求\n\n            }\n          } else {\n            this.currentTask = null\n            this.taskName = \"\";\n            this.taskCount = 0;\n            this.taskLog = []\n          }\n        }\n      })\n    },\n\n    async startPostmanTest(taskLog) {\n      for (let i = 0; i < taskLog.length; i++) {\n        var item = taskLog[i];\n        if (item.flag === false) { // 任务未开始\n          // 执行任务\n          if (item.index === 1) {// 关闭测试环境的报错信息\n            await this.$request.switchApi('test_env_error_message', false).then(res => {\n              if (res.status === 200) { // 关闭成功\n                \n              } else {\n\n              }\n            });\n          } else if (item.index === 2) { // 导入备份/恢复数据库的测试接口\n\n          } else if (item.index === 3) { // 切换到测试环境\n\n          }\n          // 更新log\n          break;\n        }\n      }\n    },\n    // 更新日志及状态\n    modifyTaskLog(log, status, id) {\n      var putParam = {data: {log: log, status: status, id: id}}\n      this.$request.putNewmanTasksLog(putParam).then()\n    },\n    initTaskLog() {\n      this.taskLog = [...this.tempTaskLog]\n    }\n  }\n}\n</script>\n\n<style scoped>\n\n\n.my-n-button {\n  margin-top: 10px;\n  display: flex;\n  justify-content: space-between;\n}\n\n.my-n-table {\n  margin-top: 10px;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}