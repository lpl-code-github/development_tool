{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport RunNewman from \"@/components/Newman/RunNewman\";\nimport NewmanTask from \"@/components/Newman/NewmanTask\";\nimport fileDownload from \"js-file-download\";\nimport { getNewmanTasks } from \"@/api/request\";\nexport default {\n  name: \"Newman\",\n  components: {\n    NewmanTask,\n    RunNewman\n  },\n  data() {\n    return {\n      taskCount: 0,\n      // 当前任务的数量，只能是0和1\n      columns: [{\n        title: '名称',\n        width: 150,\n        dataIndex: 'name',\n        scopedSlots: {\n          customRender: 'name'\n        }\n      }, {\n        title: '描述',\n        width: 250,\n        dataIndex: 'description',\n        scopedSlots: {\n          customRender: 'description'\n        }\n      }, {\n        title: '状态',\n        width: 50,\n        dataIndex: 'status',\n        key: 'status',\n        scopedSlots: {\n          customRender: 'status'\n        }\n      }, {\n        title: '开始时间',\n        width: 100,\n        dataIndex: 'created_at',\n        key: 'created_at',\n        sorter: (a, b) => new Date(a.created_at) - new Date(b.created_at)\n      }, {\n        title: '结束时间',\n        width: 100,\n        dataIndex: 'updated_at',\n        key: 'updated_at',\n        sorter: (a, b) => new Date(a.created_at) - new Date(b.created_at)\n      }, {\n        title: 'Action',\n        width: 200,\n        dataIndex: '',\n        key: 'x',\n        scopedSlots: {\n          customRender: 'action'\n        }\n      }],\n      // 表格属性\n      paginationConfig: {\n        defaultCurrent: 1,\n        defaultPageSize: 5\n      },\n      // table的分页\n      newmanTaskList: [],\n      // 从后台拿来的数据\n      tableData: [],\n      // table的数据\n      cacheData: [],\n      // 当编辑table取消时，需要从这里获取原来的数据\n      filters: [],\n      // 对status的filters，所有筛选选项\n      filteredValue: [],\n      // // 对status的filters，被选中的选项\n      openRunNewmanModelFlag: false,\n      // 显示RunNewman的Model开关\n      openNewmanTaskModelFlag: false,\n      // 显示NewmanTask的Model开关\n      runTestFlag: false,\n      // 是否开始执行newman的开关\n      taskName: \"\",\n      // 当前正在进行的task name\n      // 这是任务初始化的log，由前台定义，TaskLog中 flag 代表任务打开与关闭\n      tempTaskLog: [{\n        name: \"关闭测试环境的报错信息\",\n        flag: false,\n        status: \"\",\n        index: 1\n      }, {\n        name: \"导入备份及恢复数据库的测试接口\",\n        flag: false,\n        status: \"\",\n        index: 2\n      }, {\n        name: \"切换到测试环境\",\n        flag: false,\n        status: \"\",\n        index: 3\n      }, {\n        name: \"执行newman测试命令\",\n        flag: false,\n        status: \"\",\n        index: 4\n      }],\n      taskLog: [],\n      // 当前任务的taskLog\n      currentTask: null,\n      // 当前任务的对象\n      editingKey: '' // table当前编辑选中行\n    };\n  },\n\n  watch: {\n    currentTask: {\n      handler: function (newVal, oldVal) {\n        // 如果currentTask值变化 从不是null变为null 说明正在进行的任务已完成，刷新table\n        if (oldVal !== null && newVal === null) {\n          this.getAllTaskList();\n        }\n      },\n      deep: true\n    }\n  },\n  created() {\n    this.getUnfinishedNewmanTasks();\n    this.getAllTaskList();\n  },\n  mounted() {\n    var currentTaskId = localStorage.getItem(\"run_postman_flag\");\n    if (currentTaskId == null) {\n      localStorage.setItem('run_postman_flag', \"0\");\n    }\n  },\n  methods: {\n    // 搜索组件，拼接模糊匹配的参数 请求查询接口\n    onSearch(value) {\n      var params = \"?key=\" + value;\n      this.getAllTaskList(params);\n    },\n    // 表格变化的处理，这里主要对filters做处理\n    handleChange(pagination, filters) {\n      var tagFilterChecked = filters.status;\n      if (filters.status !== undefined && filters.status.length === 0) {\n        this.tableData = this.newmanTaskList;\n        //重置columns的filteredValue\n        var columns = this.columns;\n        columns.forEach(item => {\n          if (item.key === 'status') {\n            this.$set(item, 'filteredValue', []);\n          }\n        });\n        this.$set(this, 'columns', [...columns]);\n        return;\n      }\n      if (tagFilterChecked !== undefined) {\n        this.tableData = this.newmanTaskList.filter(item => {\n          return tagFilterChecked.includes(item.status);\n        });\n        var columns = this.columns;\n        columns.forEach(item => {\n          if (item.key === 'status') {\n            this.$set(item, 'filteredValue', tagFilterChecked);\n          }\n        });\n        this.$set(this, 'columns', [...columns]);\n      }\n    },\n    // 获取全部任务列表\n    getAllTaskList(params) {\n      if (params == null) {\n        params = \"\";\n      }\n      this.$request.getNewmanTasks(params).then(res => {\n        if (res.status === 200) {\n          this.newmanTaskList = res.data.data;\n          const statusFilters = [];\n          this.newmanTaskList.forEach(item => {\n            const existingStatus = statusFilters.find(filter => filter.text === item.status);\n            if (!existingStatus) {\n              statusFilters.push({\n                text: item.status,\n                value: item.status\n              });\n            }\n            item.key = item.id;\n          });\n          this.columns.forEach(item => {\n            if (item.key === 'status') {\n              item.filters = statusFilters;\n            }\n          });\n          this.tableData = this.newmanTaskList;\n          this.cacheData = this.tableData.map(item => ({\n            ...item\n          }));\n        }\n      });\n    },\n    // table编辑\n    handleChangeEdit(value, key, column) {\n      const newData = [...this.tableData];\n      const target = newData.find(item => key === item.key);\n      if (target) {\n        target[column] = value;\n        this.tableData = newData;\n      }\n    },\n    // 编辑表格基本信息\n    edit(key) {\n      const newData = [...this.tableData];\n      const target = newData.find(item => key === item.key);\n      this.editingKey = key;\n      if (target) {\n        target.editable = true;\n        this.tableData = newData;\n      }\n    },\n    save(key) {\n      const newData = [...this.tableData];\n      const newCacheData = [...this.cacheData];\n      const target = newData.find(item => key === item.key);\n      const targetCache = newCacheData.find(item => key === item.key);\n      if (target && targetCache) {\n        let nameLength = target.name.length;\n        let descriptionLength = target.description.length;\n        if (!(nameLength >= 5 && length <= 50)) {\n          this.$message.warning(\"名称长度应该在5～50之间\");\n          return;\n        }\n        if (descriptionLength === 0) {\n          this.$message.warning(\"描述不能为空\");\n          return;\n        }\n        var param = {\n          data: {\n            id: target.id,\n            name: target.name,\n            description: target.description\n          }\n        };\n        this.$request.putNewmanTasks(param).then(res => {\n          if (res.status === 200) {\n            delete target.editable;\n            this.tableData = newData;\n            Object.assign(targetCache, target);\n            this.cacheData = newCacheData;\n            this.$message.success(\"更新成功\");\n          } else {\n            this.$message.error(\"更新失败\");\n          }\n        });\n      }\n      this.editingKey = '';\n    },\n    // 取消更新，从cacheData\n    cancel(key) {\n      const newData = [...this.tableData];\n      const target = newData.find(item => key === item.key);\n      this.editingKey = '';\n      if (target) {\n        Object.assign(target, this.cacheData.find(item => key === item.key));\n        delete target.editable;\n        this.tableData = newData;\n      }\n    },\n    // 删除一个NewmanTask\n    deleteNewmanTask(key) {\n      this.$confirm({\n        title: '确认删除测试记录吗?',\n        content: '将会删除您的html报告、Excel报告等',\n        okText: '删除',\n        okType: 'danger',\n        cancelText: '不了',\n        onOk: () => {\n          var target = this.cacheData.find(item => key === item.key);\n          var param = {\n            data: {\n              id: target.id\n            }\n          };\n          this.$request.deleteNewmanTasks(param).then(res => {\n            if (res.status === 200) {\n              // 删除newmanTaskList，重新设置tableData\n              const newNewmanTaskList = [...this.newmanTaskList];\n              this.newmanTaskList = newNewmanTaskList.filter(item => item.key !== key);\n              this.tableData = [...this.newmanTaskList];\n              this.$message.success(\"删除成功\");\n\n              // 重新分配筛选器\n              const statusFilters = [];\n              this.newmanTaskList.forEach(item => {\n                const existingStatus = statusFilters.find(filter => filter.text === item.status);\n                if (!existingStatus) {\n                  statusFilters.push({\n                    text: item.status,\n                    value: item.status\n                  });\n                }\n                item.key = item.id;\n              });\n              var columns = this.columns;\n              columns.forEach(item => {\n                if (item.key === 'status') {\n                  item.filters = [...statusFilters];\n                  this.$set(item, 'filteredValue', []);\n                }\n              });\n              this.$set(this, 'columns', [...columns]);\n\n              // 重新分配cacheData\n              this.cacheData = this.tableData.map(item => ({\n                ...item\n              }));\n            } else {\n              this.$message.error(\"删除失败\");\n            }\n          });\n        },\n        onCancel() {\n          console.log('Cancel');\n        }\n      });\n    },\n    // 获取未完成的任务\n    getUnfinishedNewmanTasks() {\n      var param = \"?is_unfinished=true\";\n      this.$request.getNewmanTasks(param).then(async res => {\n        if (res.status === 200) {\n          var data = res.data.data;\n          if (data.length !== 0) {\n            var task = data[0];\n            sessionStorage.setItem('currentTask', task.id);\n            this.currentTask = task;\n            this.taskName = task.name;\n            this.taskCount = 1;\n            if (task.log == null) {\n              var putParam = {\n                data: {\n                  log: this.tempTaskLog,\n                  id: task.id\n                }\n              };\n              this.$request.putNewmanTasks(putParam).then(res => {\n                if (res.status === 200) {\n                  if (res.data.data.log != null && res.data.data.log.length !== 0) {\n                    this.taskLog = res.data.data.log;\n                  } else {\n                    this.taskLog = [];\n                  }\n                } else {\n                  this.taskLog = [];\n                }\n              });\n            } else {\n              this.taskLog = task.log;\n              // start\n              if (task.status == null) {\n                await this.startPostmanTest(this.taskLog);\n              }\n            }\n          } else {\n            sessionStorage.removeItem('currentTask');\n            this.currentTask = null;\n            this.taskName = \"\";\n            this.taskCount = 0;\n            this.taskLog = [];\n          }\n        }\n        // 当路由不在newman时，如果sessionStorage不存在currentTask，就不再定时请求\n        if (this.$route.path === '/newman' || sessionStorage.getItem('currentTask') !== null) {\n          setTimeout(this.getUnfinishedNewmanTasks, 3000);\n        }\n      });\n    },\n    // 开始进行newman的测试任务\n    async startPostmanTest(taskLog) {\n      for (let i = 0; i < taskLog.length; i++) {\n        var item = taskLog[i];\n        if (item.flag === false) {\n          // 任务未开始\n          taskLog[i].flag = true; // 开始任务\n          // 执行任务\n          if (item.index === 1) {\n            // 关闭测试环境的报错信息\n            await this.$request.switchApi('test_env_error_message', false).then(async res => {\n              if (res.status === 200) {\n                // 关闭成功\n                taskLog[i].status = \"成功\";\n                await this.modifyTaskLog(this.taskLog, null, this.currentTask.id);\n              } else {\n                taskLog[i].status = \"error\" + res.data.message;\n                await this.modifyTaskLog(this.taskLog, \"error\", this.currentTask.id);\n              }\n            });\n          } else if (item.index === 2) {\n            // 导入备份/恢复数据库的测试接口\n            await this.$request.switchApi('back_api', true).then(async res => {\n              if (res.status === 200) {\n                // 关闭成功\n                taskLog[i].status = \"成功\";\n                await this.modifyTaskLog(this.taskLog, null, this.currentTask.id);\n              } else {\n                taskLog[i].status = \"error\" + res.data.message;\n                await this.modifyTaskLog(this.taskLog, \"error\", this.currentTask.id);\n              }\n            });\n          } else if (item.index === 3) {\n            // 切换到测试环境\n            await this.$request.switchApi('test_env', true).then(async res => {\n              if (res.status === 200) {\n                // 关闭成功\n                taskLog[i].status = \"成功\";\n                await this.modifyTaskLog(this.taskLog, null, this.currentTask.id);\n              } else {\n                taskLog[i].status = \"error\" + res.data.message;\n                await this.modifyTaskLog(this.taskLog, \"error\", this.currentTask.id);\n              }\n            });\n          } else if (item.index === 4) {\n            // 执行postman测试，只执行一次\n            var currentTaskId = localStorage.getItem(\"run_postman_flag\");\n            if (currentTaskId != this.currentTask.id) {\n              const param = {\n                data: {\n                  task_id: this.currentTask.id\n                }\n              };\n              await this.$request.runNewman(param).then(async res => {\n                if (res.status === 200) {\n                  // 执行成功\n                  localStorage.setItem(\"run_postman_flag\", this.currentTask.id);\n                } else {\n                  taskLog[i].status = \"error\" + res.data.message;\n                  await this.modifyTaskLog(this.taskLog, \"error\", this.currentTask.id);\n                }\n              });\n            }\n          }\n          break;\n        }\n      }\n    },\n    // 更新日志及状态\n    async modifyTaskLog(log, status, id) {\n      var putParam = {\n        data: {\n          log: log,\n          status: status,\n          id: id\n        }\n      };\n      await this.$request.putNewmanTasks(putParam).then();\n    },\n    /*\n      modal框的回调\n     */\n    openRunNewmanModel() {\n      this.openRunNewmanModelFlag = true;\n    },\n    openNewmanTaskModel() {\n      this.openNewmanTaskModelFlag = true;\n    },\n    getRunNewmanModelStatus(status) {\n      this.openRunNewmanModelFlag = status;\n    },\n    getNewmanModelTaskStatus(status) {\n      this.openNewmanTaskModelFlag = status;\n    },\n    getRunTaskObj(taskObj) {\n      if (taskObj != null) {\n        this.runTestFlag = true;\n      }\n    },\n    /*\n        下载文件\n     */\n    downloadFile(path) {\n      let fileName = path.substring(path.lastIndexOf('/') + 1);\n      this.$request.downloadFile(path).then(res => {\n        if (res.status === 200) {\n          fileDownload(res.data, fileName);\n        } else {\n          const hasHTML = fileName.includes(\"html\");\n          const hasExcel = fileName.includes(\".csv\");\n          const hasTxt = fileName.includes(\".txt\");\n          console.log(hasExcel);\n          if (hasHTML || hasExcel) {\n            this.$message.error(\"文件可能丢失，也可能不存在，详情请下载cli报告看\");\n          }\n          if (hasTxt) {\n            this.$message.error(\"cli报告文件已经丢失\");\n          }\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["RunNewman","NewmanTask","fileDownload","getNewmanTasks","name","components","data","taskCount","columns","title","width","dataIndex","scopedSlots","customRender","key","sorter","a","b","Date","created_at","paginationConfig","defaultCurrent","defaultPageSize","newmanTaskList","tableData","cacheData","filters","filteredValue","openRunNewmanModelFlag","openNewmanTaskModelFlag","runTestFlag","taskName","tempTaskLog","flag","status","index","taskLog","currentTask","editingKey","watch","handler","newVal","oldVal","getAllTaskList","deep","created","getUnfinishedNewmanTasks","mounted","currentTaskId","localStorage","getItem","setItem","methods","onSearch","value","params","handleChange","pagination","tagFilterChecked","undefined","length","forEach","item","$set","filter","includes","$request","then","res","statusFilters","existingStatus","find","text","push","id","map","handleChangeEdit","column","newData","target","edit","editable","save","newCacheData","targetCache","nameLength","descriptionLength","description","$message","warning","param","putNewmanTasks","Object","assign","success","error","cancel","deleteNewmanTask","$confirm","content","okText","okType","cancelText","onOk","deleteNewmanTasks","newNewmanTaskList","onCancel","console","log","task","sessionStorage","putParam","startPostmanTest","removeItem","$route","path","setTimeout","i","switchApi","modifyTaskLog","message","task_id","runNewman","openRunNewmanModel","openNewmanTaskModel","getRunNewmanModelStatus","getNewmanModelTaskStatus","getRunTaskObj","taskObj","downloadFile","fileName","substring","lastIndexOf","hasHTML","hasExcel","hasTxt"],"sources":["src/views/Newman.vue"],"sourcesContent":["<template>\n  <div class=\"my-newman\">\n    <RunNewman @newmanTask=\"getRunTaskObj\" @updateModelStatus=\"getRunNewmanModelStatus\"\n               :open-flag=\"openRunNewmanModelFlag\"></RunNewman>\n    <NewmanTask :task-log=\"taskLog\" :taskName=\"taskName\" @updateModelStatus=\"getNewmanModelTaskStatus\"\n                :open-flag=\"openNewmanTaskModelFlag\"></NewmanTask>\n\n    <!--表格上方的搜索框 按钮等 -->\n    <div class=\"my-n-button\">\n      <a-input-search placeholder=\"输入操作名称或描述搜索\" style=\"width: 200px\" @search=\"onSearch\"/>\n      <div>\n        <a-button type=\"primary\" @click=\"openRunNewmanModel\" style=\"margin-right: 10px\">\n          创建任务\n        </a-button>\n        <a-badge :count=\"taskCount\" style=\"margin-right: 10px\">\n          <a-button @click=\"openNewmanTaskModel\">\n            任务详情\n            <a-icon v-if=\"taskCount !== 0\" type=\"sync\" spin/>\n          </a-button>\n        </a-badge>\n      </div>\n    </div>\n\n    <div class=\"my-n-table\">\n      <a-table\n          :columns=\"columns\"\n          :data-source=\"tableData\"\n          @change=\"handleChange\"\n          :pagination=\"paginationConfig\"\n      >\n        <template\n            v-for=\"col in ['name','description']\"\n            :slot=\"col\"\n            slot-scope=\"text, record, index\"\n        >\n          <div :key=\"col\">\n            <a-input\n                :type=\"col=== 'description'?'textarea':''\"\n                rows=\"1\"\n                v-if=\"record.editable\"\n                style=\"margin: -5px 0\"\n                :value=\"text\"\n                @change=\"e => handleChangeEdit(e.target.value, record.key, col)\"\n            />\n            <template v-else>\n              {{ text === \"\" || text === null ? \"/\" : text }}\n            </template>\n          </div>\n        </template>\n        <span slot=\"status\" slot-scope=\"status\">\n          <a-tag\n              :color=\"status === '成功'? '#1ba81e' :'#d92f09' \"\n          >\n            {{ status }}\n          </a-tag>\n        </span>\n        <template slot=\"action\" slot-scope=\"text, record, index\">\n          <div class=\"editable-row-operations\">\n              <span v-if=\"record.editable\">\n                <a style=\"color: #5f92ef\" @click=\"() => save(record.key)\">更新</a>\n                <a-divider type=\"vertical\" style=\"background-color: #a8a7a7!important;\"/>\n                <a-popconfirm title=\"确定取消吗？\" @confirm=\"() => cancel(record.key)\">\n                  <a style=\"color: #5f6062\">取消</a>\n                </a-popconfirm>\n              </span>\n            <span v-else>\n         <a style=\"color: #5f92ef\" :disabled=\"editingKey !== ''\" @click=\"() => edit(record.key)\">编辑</a>\n              <a-divider type=\"vertical\" style=\"background-color: #a8a7a7!important;\"/>\n          <a style=\"color: #286d9f\" @click=\"downloadFile(record.html_report_path)\">Html报告</a>\n          <a-divider type=\"vertical\" style=\"background-color: #a8a7a7!important;\"/>\n          <a style=\"color: #16750c\" @click=\"downloadFile(record.excel_report_path)\">Excel报告</a>\n          <a-divider type=\"vertical\" style=\"background-color: #a8a7a7!important;\"/>\n          <a style=\"color: #e01735\" @click=\"deleteNewmanTask(record.key)\">删除</a>\n        </span>\n          </div>\n        </template>\n        <p slot=\"expandedRowRender\" slot-scope=\"record\" style=\"margin: 0\">\n          newman cli输出：&nbsp;<a @click=\"downloadFile(record.cli_output_path)\">{{ record.cli_output_path }}</a>\n        </p>\n      </a-table>\n    </div>\n  </div>\n</template>\n\n<script>\nimport RunNewman from \"@/components/Newman/RunNewman\";\nimport NewmanTask from \"@/components/Newman/NewmanTask\";\nimport fileDownload from \"js-file-download\";\nimport {getNewmanTasks} from \"@/api/request\";\n\nexport default {\n  name: \"Newman\",\n  components: {NewmanTask, RunNewman},\n  data() {\n    return {\n      taskCount: 0, // 当前任务的数量，只能是0和1\n      columns: [\n        {title: '名称', width: 150, dataIndex: 'name', scopedSlots: {customRender: 'name'}},\n        {title: '描述', width: 250, dataIndex: 'description', scopedSlots: {customRender: 'description'}},\n        {title: '状态', width: 50, dataIndex: 'status', key: 'status', scopedSlots: {customRender: 'status'}},\n        {\n          title: '开始时间', width: 100, dataIndex: 'created_at', key: 'created_at',\n          sorter: (a, b) => new Date(a.created_at) - new Date(b.created_at),\n        },\n        {\n          title: '结束时间', width: 100, dataIndex: 'updated_at', key: 'updated_at',\n          sorter: (a, b) => new Date(a.created_at) - new Date(b.created_at),\n        },\n        {title: 'Action', width: 200, dataIndex: '', key: 'x', scopedSlots: {customRender: 'action'}},\n      ], // 表格属性\n      paginationConfig: {\n        defaultCurrent: 1,\n        defaultPageSize: 5,\n      }, // table的分页\n      newmanTaskList: [], // 从后台拿来的数据\n      tableData: [], // table的数据\n      cacheData: [], // 当编辑table取消时，需要从这里获取原来的数据\n      filters: [], // 对status的filters，所有筛选选项\n      filteredValue: [],// // 对status的filters，被选中的选项\n      openRunNewmanModelFlag: false, // 显示RunNewman的Model开关\n      openNewmanTaskModelFlag: false,// 显示NewmanTask的Model开关\n      runTestFlag: false,// 是否开始执行newman的开关\n      taskName: \"\", // 当前正在进行的task name\n      // 这是任务初始化的log，由前台定义，TaskLog中 flag 代表任务打开与关闭\n      tempTaskLog: [\n        {\n          name: \"关闭测试环境的报错信息\",\n          flag: false,\n          status: \"\",\n          index: 1\n        },\n        {\n          name: \"导入备份及恢复数据库的测试接口\",\n          flag: false,\n          status: \"\",\n          index: 2\n        },\n        {\n          name: \"切换到测试环境\",\n          flag: false,\n          status: \"\",\n          index: 3\n        },\n        {\n          name: \"执行newman测试命令\",\n          flag: false,\n          status: \"\",\n          index: 4\n        }\n      ],\n      taskLog: [],// 当前任务的taskLog\n      currentTask: null, // 当前任务的对象\n      editingKey: '', // table当前编辑选中行\n    }\n  },\n  watch: {\n    currentTask: {\n      handler: function (newVal, oldVal) {\n        // 如果currentTask值变化 从不是null变为null 说明正在进行的任务已完成，刷新table\n        if (oldVal !== null && newVal === null) {\n          this.getAllTaskList();\n        }\n      },\n      deep: true\n    }\n  },\n  created() {\n    this.getUnfinishedNewmanTasks()\n    this.getAllTaskList();\n  },\n  mounted() {\n    var currentTaskId = localStorage.getItem(\"run_postman_flag\");\n    if (currentTaskId == null) {\n      localStorage.setItem('run_postman_flag', \"0\");\n    }\n  },\n  methods: {\n    // 搜索组件，拼接模糊匹配的参数 请求查询接口\n    onSearch(value) {\n      var params = \"?key=\" + value\n      this.getAllTaskList(params)\n    },\n\n    // 表格变化的处理，这里主要对filters做处理\n    handleChange(pagination, filters) {\n      var tagFilterChecked = filters.status\n      if (filters.status !== undefined && filters.status.length === 0) {\n        this.tableData = this.newmanTaskList\n        //重置columns的filteredValue\n        var columns = this.columns;\n        columns.forEach(item => {\n          if (item.key === 'status') {\n            this.$set(item, 'filteredValue', [])\n          }\n        })\n        this.$set(this, 'columns', [...columns]);\n        return\n      }\n\n      if (tagFilterChecked !== undefined) {\n        this.tableData = this.newmanTaskList.filter(item => {\n          return tagFilterChecked.includes(item.status);\n        })\n        var columns = this.columns;\n        columns.forEach(item => {\n          if (item.key === 'status') {\n            this.$set(item, 'filteredValue', tagFilterChecked)\n          }\n        })\n        this.$set(this, 'columns', [...columns]);\n      }\n    },\n\n\n\n    // 获取全部任务列表\n    getAllTaskList(params) {\n      if (params == null) {\n        params = \"\"\n      }\n      this.$request.getNewmanTasks(params).then(res => {\n        if (res.status === 200) {\n          this.newmanTaskList = res.data.data\n\n          const statusFilters = [];\n\n          this.newmanTaskList.forEach(item => {\n            const existingStatus = statusFilters.find(filter => filter.text === item.status);\n            if (!existingStatus) {\n              statusFilters.push({text: item.status, value: item.status});\n            }\n            item.key = item.id\n          })\n          this.columns.forEach(item => {\n            if (item.key === 'status') {\n              item.filters = statusFilters\n            }\n          })\n          this.tableData = this.newmanTaskList\n          this.cacheData = this.tableData.map(item => ({...item}));\n        }\n      })\n    },\n    // table编辑\n    handleChangeEdit(value, key, column) {\n      const newData = [...this.tableData];\n      const target = newData.find(item => key === item.key);\n\n      if (target) {\n        target[column] = value;\n        this.tableData = newData;\n      }\n    },\n    // 编辑表格基本信息\n    edit(key) {\n      const newData = [...this.tableData];\n      const target = newData.find(item => key === item.key);\n      this.editingKey = key;\n      if (target) {\n        target.editable = true;\n        this.tableData = newData;\n      }\n    },\n    save(key) {\n      const newData = [...this.tableData];\n      const newCacheData = [...this.cacheData];\n      const target = newData.find(item => key === item.key);\n      const targetCache = newCacheData.find(item => key === item.key);\n      if (target && targetCache) {\n        let nameLength = target.name.length;\n        let descriptionLength = target.description.length;\n\n        if (!(nameLength >= 5 && length <= 50)) {\n          this.$message.warning(\"名称长度应该在5～50之间\")\n          return\n        }\n        if (descriptionLength === 0) {\n          this.$message.warning(\"描述不能为空\")\n          return\n        }\n        var param = {\n          data: {\n            id: target.id,\n            name: target.name,\n            description: target.description\n          }\n        }\n        this.$request.putNewmanTasks(param).then(res => {\n          if (res.status === 200) {\n            delete target.editable;\n            this.tableData = newData;\n            Object.assign(targetCache, target);\n            this.cacheData = newCacheData;\n            this.$message.success(\"更新成功\")\n          } else {\n            this.$message.error(\"更新失败\")\n          }\n        })\n      }\n      this.editingKey = '';\n    },\n    // 取消更新，从cacheData\n    cancel(key) {\n      const newData = [...this.tableData];\n      const target = newData.find(item => key === item.key);\n      this.editingKey = '';\n      if (target) {\n        Object.assign(target, this.cacheData.find(item => key === item.key));\n        delete target.editable;\n        this.tableData = newData;\n      }\n    },\n    // 删除一个NewmanTask\n    deleteNewmanTask(key) {\n      this.$confirm({\n        title: '确认删除测试记录吗?',\n        content: '将会删除您的html报告、Excel报告等',\n        okText: '删除',\n        okType: 'danger',\n        cancelText: '不了',\n        onOk: () => {\n          var target = this.cacheData.find(item => key === item.key);\n          var param = {\n            data: {\n              id: target.id\n            }\n          }\n          this.$request.deleteNewmanTasks(param).then(res => {\n            if (res.status === 200) {\n              // 删除newmanTaskList，重新设置tableData\n              const newNewmanTaskList = [...this.newmanTaskList]\n              this.newmanTaskList = newNewmanTaskList.filter(item => item.key !== key);\n              this.tableData = [...this.newmanTaskList]\n\n              this.$message.success(\"删除成功\")\n\n              // 重新分配筛选器\n              const statusFilters = [];\n              this.newmanTaskList.forEach(item => {\n                const existingStatus = statusFilters.find(filter => filter.text === item.status);\n                if (!existingStatus) {\n                  statusFilters.push({text: item.status, value: item.status});\n                }\n                item.key = item.id\n              })\n              var columns = this.columns;\n              columns.forEach(item => {\n                if (item.key === 'status') {\n                  item.filters = [...statusFilters]\n                  this.$set(item, 'filteredValue', [])\n                }\n              })\n              this.$set(this, 'columns', [...columns]);\n\n              // 重新分配cacheData\n              this.cacheData = this.tableData.map(item => ({...item}));\n            } else {\n              this.$message.error(\"删除失败\")\n            }\n          })\n        },\n        onCancel() {\n          console.log('Cancel');\n        },\n      });\n\n    },\n\n\n    // 获取未完成的任务\n    getUnfinishedNewmanTasks() {\n      var param = \"?is_unfinished=true\"\n      this.$request.getNewmanTasks(param).then(async res => {\n        if (res.status === 200) {\n          var data = res.data.data\n          if (data.length !== 0) {\n            var task = data[0];\n            sessionStorage.setItem('currentTask',task.id)\n            this.currentTask = task\n            this.taskName = task.name;\n            this.taskCount = 1;\n            if (task.log == null) {\n              var putParam = {data: {log: this.tempTaskLog, id: task.id}}\n              this.$request.putNewmanTasks(putParam).then(res => {\n                if (res.status === 200) {\n                  if (res.data.data.log != null && res.data.data.log.length !== 0) {\n                    this.taskLog = res.data.data.log\n                  } else {\n                    this.taskLog = []\n                  }\n                } else {\n                  this.taskLog = []\n                }\n              })\n            } else {\n              this.taskLog = task.log\n              // start\n              if (task.status == null) {\n                await this.startPostmanTest(this.taskLog)\n              }\n            }\n          } else {\n            sessionStorage.removeItem('currentTask')\n            this.currentTask = null\n            this.taskName = \"\";\n            this.taskCount = 0;\n            this.taskLog = []\n          }\n        }\n        // 当路由不在newman时，如果sessionStorage不存在currentTask，就不再定时请求\n        if (this.$route.path === '/newman' ||\n            sessionStorage.getItem('currentTask') !== null\n        ){\n          setTimeout(this.getUnfinishedNewmanTasks, 3000);\n        }\n      });\n    },\n    // 开始进行newman的测试任务\n    async startPostmanTest(taskLog) {\n      for (let i = 0; i < taskLog.length; i++) {\n        var item = taskLog[i];\n        if (item.flag === false) { // 任务未开始\n          taskLog[i].flag = true // 开始任务\n          // 执行任务\n          if (item.index === 1) {// 关闭测试环境的报错信息\n            await this.$request.switchApi('test_env_error_message', false).then(async res => {\n              if (res.status === 200) { // 关闭成功\n                taskLog[i].status = \"成功\"\n                await this.modifyTaskLog(this.taskLog, null, this.currentTask.id)\n              } else {\n                taskLog[i].status = \"error\" + res.data.message;\n                await this.modifyTaskLog(this.taskLog, \"error\", this.currentTask.id)\n              }\n\n            });\n          } else if (item.index === 2) { // 导入备份/恢复数据库的测试接口\n            await this.$request.switchApi('back_api', true).then(async res => {\n              if (res.status === 200) { // 关闭成功\n                taskLog[i].status = \"成功\"\n                await this.modifyTaskLog(this.taskLog, null, this.currentTask.id)\n              } else {\n                taskLog[i].status = \"error\" + res.data.message;\n                await this.modifyTaskLog(this.taskLog, \"error\", this.currentTask.id)\n              }\n            });\n          } else if (item.index === 3) { // 切换到测试环境\n            await this.$request.switchApi('test_env', true).then(async res => {\n              if (res.status === 200) { // 关闭成功\n                taskLog[i].status = \"成功\"\n                await this.modifyTaskLog(this.taskLog, null, this.currentTask.id)\n              } else {\n                taskLog[i].status = \"error\" + res.data.message;\n                await this.modifyTaskLog(this.taskLog, \"error\", this.currentTask.id)\n              }\n            });\n          } else if (item.index === 4) { // 执行postman测试，只执行一次\n            var currentTaskId = localStorage.getItem(\"run_postman_flag\");\n            if (currentTaskId != this.currentTask.id) {\n              const param = {\n                data: {\n                  task_id: this.currentTask.id\n                }\n              };\n              await this.$request.runNewman(param).then(async res => {\n                if (res.status === 200) { // 执行成功\n                  localStorage.setItem(\"run_postman_flag\", this.currentTask.id);\n                } else {\n                  taskLog[i].status = \"error\" + res.data.message;\n                  await this.modifyTaskLog(this.taskLog, \"error\", this.currentTask.id);\n                }\n              });\n            }\n          }\n          break;\n        }\n      }\n    },\n    // 更新日志及状态\n    async modifyTaskLog(log, status, id) {\n      var putParam = {data: {log: log, status: status, id: id}}\n      await this.$request.putNewmanTasks(putParam).then()\n    },\n\n    /*\n      modal框的回调\n     */\n    openRunNewmanModel() {\n      this.openRunNewmanModelFlag = true\n    },\n    openNewmanTaskModel() {\n      this.openNewmanTaskModelFlag = true\n    },\n    getRunNewmanModelStatus(status) {\n      this.openRunNewmanModelFlag = status\n    },\n    getNewmanModelTaskStatus(status) {\n      this.openNewmanTaskModelFlag = status\n    },\n    getRunTaskObj(taskObj) {\n      if (taskObj != null) {\n        this.runTestFlag = true\n      }\n    },\n\n    /*\n        下载文件\n     */\n    downloadFile(path) {\n      let fileName = path.substring(path.lastIndexOf('/') + 1);\n      this.$request.downloadFile(path).then(res => {\n        if (res.status === 200) {\n          fileDownload(res.data, fileName);\n        } else {\n          const hasHTML = fileName.includes(\"html\");\n          const hasExcel = fileName.includes(\".csv\");\n          const hasTxt = fileName.includes(\".txt\");\n          console.log(hasExcel)\n          if (hasHTML || hasExcel) {\n            this.$message.error(\"文件可能丢失，也可能不存在，详情请下载cli报告看\")\n          }\n          if (hasTxt){\n            this.$message.error(\"cli报告文件已经丢失\")\n          }\n        }\n      })\n    },\n  }\n}\n</script>\n\n<style scoped>\n\n\n.my-n-button {\n  margin-top: 10px;\n  display: flex;\n  justify-content: space-between;\n}\n\n.my-n-table {\n  margin-top: 10px;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}