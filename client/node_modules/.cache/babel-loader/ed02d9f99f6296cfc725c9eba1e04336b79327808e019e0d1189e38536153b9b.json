{"ast":null,"code":"import infiniteScroll from 'vue-infinite-scroll';\nexport default {\n  name: \"InfiniteScroll\",\n  props: {\n    sourceData: {\n      type: Array,\n      required: true\n    }\n  },\n  directives: {\n    infiniteScroll\n  },\n  data() {\n    return {\n      loading: false,\n      busy: false,\n      listData: [],\n      showData: [],\n      loadedCount: 0,\n      // 已经加载的数据数量\n      perPage: 20,\n      // 每页的数据数量\n      showMessage: false\n    };\n  },\n  computed: {\n    splitTime() {\n      return function (item) {\n        const [date, time] = item.split(' ');\n        return time;\n      };\n    }\n  },\n  watch: {\n    sourceData: {\n      handler: function (newVal, oldVal) {},\n      // 深度观察监听\n      deep: true\n    }\n  },\n  mounted() {\n    this.loading = true;\n    this.loadedCount = 0;\n    this.showData = [];\n    this.listData = this.sourceData;\n    const startIndex = this.loadedCount;\n    const endIndex = this.loadedCount + this.perPage;\n    // 根据需要加载的数据范围从数据源中截取数据\n    const newData = this.listData.slice(startIndex, endIndex);\n    // 将新加载的数据添加到已有数据列表中\n    this.showData = [...this.showData, ...newData];\n    // 更新已加载数据的数量\n    this.loadedCount = endIndex;\n    this.loading = false;\n    this.showMessage = true;\n  },\n  methods: {\n    handleInfiniteOnLoad() {\n      // 开始加载\n      this.loading = true;\n\n      // 模拟异步加载数据\n      setTimeout(() => {\n        const startIndex = this.loadedCount;\n        const endIndex = this.loadedCount + this.perPage;\n\n        // 根据需要加载的数据范围从数据源中截取数据\n        const newData = this.listData.slice(startIndex, endIndex);\n\n        // 将新加载的数据添加到已有数据列表中\n        this.showData = [...this.showData, ...newData];\n\n        // 更新已加载数据的数量\n        this.loadedCount = endIndex;\n\n        // 加载结束\n\n        this.loading = false;\n        if (newData.length < this.perPage) {\n          // 如果新加载的数据少于 perPage 条，说明已经加载完全部数据\n          if (this.showMessage) {\n            this.$message.info(\"加载完毕\");\n            this.showMessage = false;\n          }\n          this.busy = true;\n        } else {\n          this.busy = false;\n        }\n      }, 1000);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}