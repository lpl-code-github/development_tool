{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { getPosition, isTreeNode } from '../util';\nimport { warning } from '../../vc-util/warning';\nimport { camelize, filterEmpty } from '../../_util/props-util';\nimport omit from '../../_util/omit';\nexport function getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n  return pos;\n}\nexport function fillFieldNames(fieldNames) {\n  const {\n    title,\n    _title,\n    key,\n    children\n  } = fieldNames || {};\n  const mergedTitle = title || 'title';\n  return {\n    title: mergedTitle,\n    _title: _title || [mergedTitle],\n    key: key || 'key',\n    children: children || 'children'\n  };\n}\n/**\n * Warning if TreeNode do not provides key\n */\nexport function warningWithoutKey(treeData, fieldNames) {\n  const keys = new Map();\n  function dig(list) {\n    let path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(treeNode => {\n      const key = treeNode[fieldNames.key];\n      const children = treeNode[fieldNames.children];\n      warning(key !== null && key !== undefined, `Tree node must have a certain key: [${path}${key}]`);\n      const recordKey = String(key);\n      warning(!keys.has(recordKey) || key === null || key === undefined, `Same 'key' exist in the Tree: ${recordKey}`);\n      keys.set(recordKey, true);\n      dig(children, `${path}${recordKey} > `);\n    });\n  }\n  dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\nexport function convertTreeToData(rootNodes) {\n  function dig() {\n    let node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    const treeNodes = filterEmpty(node);\n    return treeNodes.map(treeNode => {\n      var _a, _b, _c, _d;\n      // Filter invalidate node\n      if (!isTreeNode(treeNode)) {\n        warning(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n      const slots = treeNode.children || {};\n      const key = treeNode.key;\n      const props = {};\n      for (const [k, v] of Object.entries(treeNode.props)) {\n        props[camelize(k)] = v;\n      }\n      const {\n        isLeaf,\n        checkable,\n        selectable,\n        disabled,\n        disableCheckbox\n      } = props;\n      // 默认值为 undefined\n      const newProps = {\n        isLeaf: isLeaf || isLeaf === '' || undefined,\n        checkable: checkable || checkable === '' || undefined,\n        selectable: selectable || selectable === '' || undefined,\n        disabled: disabled || disabled === '' || undefined,\n        disableCheckbox: disableCheckbox || disableCheckbox === '' || undefined\n      };\n      const slotsProps = _extends(_extends({}, props), newProps);\n      const {\n          title = (_a = slots.title) === null || _a === void 0 ? void 0 : _a.call(slots, slotsProps),\n          icon = (_b = slots.icon) === null || _b === void 0 ? void 0 : _b.call(slots, slotsProps),\n          switcherIcon = (_c = slots.switcherIcon) === null || _c === void 0 ? void 0 : _c.call(slots, slotsProps)\n        } = props,\n        rest = __rest(props, [\"title\", \"icon\", \"switcherIcon\"]);\n      const children = (_d = slots.default) === null || _d === void 0 ? void 0 : _d.call(slots);\n      const dataNode = _extends(_extends(_extends({}, rest), {\n        title,\n        icon,\n        switcherIcon,\n        key,\n        isLeaf\n      }), newProps);\n      const parsedChildren = dig(children);\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n      return dataNode;\n    });\n  }\n  return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\nexport function flattenTreeData(treeNodeList, expandedKeys, fieldNames) {\n  const {\n    _title: fieldTitles,\n    key: fieldKey,\n    children: fieldChildren\n  } = fillFieldNames(fieldNames);\n  const expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  const flattenList = [];\n  function dig(list) {\n    let parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map((treeNode, index) => {\n      const pos = getPosition(parent ? parent.pos : '0', index);\n      const mergedKey = getKey(treeNode[fieldKey], pos);\n      // Pick matched title in field title list\n      let mergedTitle;\n      for (let i = 0; i < fieldTitles.length; i += 1) {\n        const fieldTitle = fieldTitles[i];\n        if (treeNode[fieldTitle] !== undefined) {\n          mergedTitle = treeNode[fieldTitle];\n          break;\n        }\n      }\n      // Add FlattenDataNode into list\n      const flattenNode = _extends(_extends({}, omit(treeNode, [...fieldTitles, fieldKey, fieldChildren])), {\n        title: mergedTitle,\n        key: mergedKey,\n        parent,\n        pos,\n        children: null,\n        data: treeNode,\n        isStart: [...(parent ? parent.isStart : []), index === 0],\n        isEnd: [...(parent ? parent.isEnd : []), index === list.length - 1]\n      });\n      flattenList.push(flattenNode);\n      // Loop treeNode children\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode[fieldChildren] || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n      return flattenNode;\n    });\n  }\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\nexport function traverseDataNodes(dataNodes, callback,\n// To avoid too many params, let use config instead of origin param\nconfig) {\n  let mergedConfig = {};\n  if (typeof config === 'object') {\n    mergedConfig = config;\n  } else {\n    mergedConfig = {\n      externalGetKey: config\n    };\n  }\n  mergedConfig = mergedConfig || {};\n  // Init config\n  const {\n    childrenPropName,\n    externalGetKey,\n    fieldNames\n  } = mergedConfig;\n  const {\n    key: fieldKey,\n    children: fieldChildren\n  } = fillFieldNames(fieldNames);\n  const mergeChildrenPropName = childrenPropName || fieldChildren;\n  // Get keys\n  let syntheticGetKey;\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = node => node[externalGetKey];\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = node => externalGetKey(node);\n    }\n  } else {\n    syntheticGetKey = (node, pos) => getKey(node[fieldKey], pos);\n  }\n  // Process\n  function processNode(node, index, parent, pathNodes) {\n    const children = node ? node[mergeChildrenPropName] : dataNodes;\n    const pos = node ? getPosition(parent.pos, index) : '0';\n    const connectNodes = node ? [...pathNodes, node] : [];\n    // Process node if is not root\n    if (node) {\n      const key = syntheticGetKey(node, pos);\n      const data = {\n        node,\n        index,\n        pos,\n        key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1,\n        nodes: connectNodes\n      };\n      callback(data);\n    }\n    // Process children node\n    if (children) {\n      children.forEach((subNode, subIndex) => {\n        processNode(subNode, subIndex, {\n          node,\n          pos,\n          level: parent ? parent.level + 1 : -1\n        }, connectNodes);\n      });\n    }\n  }\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\nexport function convertDataToEntities(dataNodes) {\n  let {\n    initWrapper,\n    processEntity,\n    onProcessFinished,\n    externalGetKey,\n    childrenPropName,\n    fieldNames\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let /** @deprecated Use `config.externalGetKey` instead */\n  legacyExternalGetKey = arguments.length > 2 ? arguments[2] : undefined;\n  // Init config\n  const mergedExternalGetKey = externalGetKey || legacyExternalGetKey;\n  const posEntities = {};\n  const keyEntities = {};\n  let wrapper = {\n    posEntities,\n    keyEntities\n  };\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n  traverseDataNodes(dataNodes, item => {\n    const {\n      node,\n      index,\n      pos,\n      key,\n      parentPos,\n      level,\n      nodes\n    } = item;\n    const entity = {\n      node,\n      nodes,\n      index,\n      key,\n      pos,\n      level\n    };\n    const mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity;\n    // Fill children\n    entity.parent = posEntities[parentPos];\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, {\n    externalGetKey: mergedExternalGetKey,\n    childrenPropName,\n    fieldNames\n  });\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\nexport function getTreeNodeProps(key, _ref) {\n  let {\n    expandedKeysSet,\n    selectedKeysSet,\n    loadedKeysSet,\n    loadingKeysSet,\n    checkedKeysSet,\n    halfCheckedKeysSet,\n    dragOverNodeKey,\n    dropPosition,\n    keyEntities\n  } = _ref;\n  const entity = keyEntities[key];\n  const treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeysSet.has(key),\n    selected: selectedKeysSet.has(key),\n    loaded: loadedKeysSet.has(key),\n    loading: loadingKeysSet.has(key),\n    checked: checkedKeysSet.has(key),\n    halfChecked: halfCheckedKeysSet.has(key),\n    pos: String(entity ? entity.pos : ''),\n    parent: entity.parent,\n    // [Legacy] Drag props\n    // Since the interaction of drag is changed, the semantic of the props are\n    // not accuracy, I think it should be finally removed\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\nexport function convertNodePropsToEventData(props) {\n  const {\n    data,\n    expanded,\n    selected,\n    checked,\n    loaded,\n    loading,\n    halfChecked,\n    dragOver,\n    dragOverGapTop,\n    dragOverGapBottom,\n    pos,\n    active,\n    eventKey\n  } = props;\n  const eventData = _extends(_extends({\n    dataRef: data\n  }, data), {\n    expanded,\n    selected,\n    checked,\n    loaded,\n    loading,\n    halfChecked,\n    dragOver,\n    dragOverGapTop,\n    dragOverGapBottom,\n    pos,\n    active,\n    eventKey,\n    key: eventKey\n  });\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get() {\n        warning(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n  return eventData;\n}","map":{"version":3,"names":["_extends","__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","getPosition","isTreeNode","warning","camelize","filterEmpty","omit","getKey","key","pos","undefined","fillFieldNames","fieldNames","title","_title","children","mergedTitle","warningWithoutKey","treeData","keys","Map","dig","list","path","arguments","forEach","treeNode","recordKey","String","has","set","convertTreeToData","rootNodes","node","treeNodes","map","_a","_b","_c","_d","slots","props","k","v","entries","isLeaf","checkable","selectable","disabled","disableCheckbox","newProps","slotsProps","icon","switcherIcon","rest","default","dataNode","parsedChildren","flattenTreeData","treeNodeList","expandedKeys","fieldTitles","fieldKey","fieldChildren","expandedKeySet","Set","flattenList","parent","index","mergedKey","fieldTitle","flattenNode","data","isStart","isEnd","push","traverseDataNodes","dataNodes","callback","config","mergedConfig","externalGetKey","childrenPropName","mergeChildrenPropName","syntheticGetKey","processNode","pathNodes","connectNodes","parentPos","level","nodes","subNode","subIndex","convertDataToEntities","initWrapper","processEntity","onProcessFinished","legacyExternalGetKey","mergedExternalGetKey","posEntities","keyEntities","wrapper","item","entity","getTreeNodeProps","_ref","expandedKeysSet","selectedKeysSet","loadedKeysSet","loadingKeysSet","checkedKeysSet","halfCheckedKeysSet","dragOverNodeKey","dropPosition","treeNodeProps","eventKey","expanded","selected","loaded","loading","checked","halfChecked","dragOver","dragOverGapTop","dragOverGapBottom","convertNodePropsToEventData","active","eventData","dataRef","defineProperty","get"],"sources":["/Users/lpl/工作/Teamsupport/develop_help/node_modules/ant-design-vue/es/vc-tree/utils/treeUtil.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { getPosition, isTreeNode } from '../util';\nimport { warning } from '../../vc-util/warning';\nimport { camelize, filterEmpty } from '../../_util/props-util';\nimport omit from '../../_util/omit';\nexport function getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n  return pos;\n}\nexport function fillFieldNames(fieldNames) {\n  const {\n    title,\n    _title,\n    key,\n    children\n  } = fieldNames || {};\n  const mergedTitle = title || 'title';\n  return {\n    title: mergedTitle,\n    _title: _title || [mergedTitle],\n    key: key || 'key',\n    children: children || 'children'\n  };\n}\n/**\n * Warning if TreeNode do not provides key\n */\nexport function warningWithoutKey(treeData, fieldNames) {\n  const keys = new Map();\n  function dig(list) {\n    let path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(treeNode => {\n      const key = treeNode[fieldNames.key];\n      const children = treeNode[fieldNames.children];\n      warning(key !== null && key !== undefined, `Tree node must have a certain key: [${path}${key}]`);\n      const recordKey = String(key);\n      warning(!keys.has(recordKey) || key === null || key === undefined, `Same 'key' exist in the Tree: ${recordKey}`);\n      keys.set(recordKey, true);\n      dig(children, `${path}${recordKey} > `);\n    });\n  }\n  dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\nexport function convertTreeToData(rootNodes) {\n  function dig() {\n    let node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    const treeNodes = filterEmpty(node);\n    return treeNodes.map(treeNode => {\n      var _a, _b, _c, _d;\n      // Filter invalidate node\n      if (!isTreeNode(treeNode)) {\n        warning(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n      const slots = treeNode.children || {};\n      const key = treeNode.key;\n      const props = {};\n      for (const [k, v] of Object.entries(treeNode.props)) {\n        props[camelize(k)] = v;\n      }\n      const {\n        isLeaf,\n        checkable,\n        selectable,\n        disabled,\n        disableCheckbox\n      } = props;\n      // 默认值为 undefined\n      const newProps = {\n        isLeaf: isLeaf || isLeaf === '' || undefined,\n        checkable: checkable || checkable === '' || undefined,\n        selectable: selectable || selectable === '' || undefined,\n        disabled: disabled || disabled === '' || undefined,\n        disableCheckbox: disableCheckbox || disableCheckbox === '' || undefined\n      };\n      const slotsProps = _extends(_extends({}, props), newProps);\n      const {\n          title = (_a = slots.title) === null || _a === void 0 ? void 0 : _a.call(slots, slotsProps),\n          icon = (_b = slots.icon) === null || _b === void 0 ? void 0 : _b.call(slots, slotsProps),\n          switcherIcon = (_c = slots.switcherIcon) === null || _c === void 0 ? void 0 : _c.call(slots, slotsProps)\n        } = props,\n        rest = __rest(props, [\"title\", \"icon\", \"switcherIcon\"]);\n      const children = (_d = slots.default) === null || _d === void 0 ? void 0 : _d.call(slots);\n      const dataNode = _extends(_extends(_extends({}, rest), {\n        title,\n        icon,\n        switcherIcon,\n        key,\n        isLeaf\n      }), newProps);\n      const parsedChildren = dig(children);\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n      return dataNode;\n    });\n  }\n  return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\nexport function flattenTreeData(treeNodeList, expandedKeys, fieldNames) {\n  const {\n    _title: fieldTitles,\n    key: fieldKey,\n    children: fieldChildren\n  } = fillFieldNames(fieldNames);\n  const expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  const flattenList = [];\n  function dig(list) {\n    let parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map((treeNode, index) => {\n      const pos = getPosition(parent ? parent.pos : '0', index);\n      const mergedKey = getKey(treeNode[fieldKey], pos);\n      // Pick matched title in field title list\n      let mergedTitle;\n      for (let i = 0; i < fieldTitles.length; i += 1) {\n        const fieldTitle = fieldTitles[i];\n        if (treeNode[fieldTitle] !== undefined) {\n          mergedTitle = treeNode[fieldTitle];\n          break;\n        }\n      }\n      // Add FlattenDataNode into list\n      const flattenNode = _extends(_extends({}, omit(treeNode, [...fieldTitles, fieldKey, fieldChildren])), {\n        title: mergedTitle,\n        key: mergedKey,\n        parent,\n        pos,\n        children: null,\n        data: treeNode,\n        isStart: [...(parent ? parent.isStart : []), index === 0],\n        isEnd: [...(parent ? parent.isEnd : []), index === list.length - 1]\n      });\n      flattenList.push(flattenNode);\n      // Loop treeNode children\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode[fieldChildren] || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n      return flattenNode;\n    });\n  }\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\nexport function traverseDataNodes(dataNodes, callback,\n// To avoid too many params, let use config instead of origin param\nconfig) {\n  let mergedConfig = {};\n  if (typeof config === 'object') {\n    mergedConfig = config;\n  } else {\n    mergedConfig = {\n      externalGetKey: config\n    };\n  }\n  mergedConfig = mergedConfig || {};\n  // Init config\n  const {\n    childrenPropName,\n    externalGetKey,\n    fieldNames\n  } = mergedConfig;\n  const {\n    key: fieldKey,\n    children: fieldChildren\n  } = fillFieldNames(fieldNames);\n  const mergeChildrenPropName = childrenPropName || fieldChildren;\n  // Get keys\n  let syntheticGetKey;\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = node => node[externalGetKey];\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = node => externalGetKey(node);\n    }\n  } else {\n    syntheticGetKey = (node, pos) => getKey(node[fieldKey], pos);\n  }\n  // Process\n  function processNode(node, index, parent, pathNodes) {\n    const children = node ? node[mergeChildrenPropName] : dataNodes;\n    const pos = node ? getPosition(parent.pos, index) : '0';\n    const connectNodes = node ? [...pathNodes, node] : [];\n    // Process node if is not root\n    if (node) {\n      const key = syntheticGetKey(node, pos);\n      const data = {\n        node,\n        index,\n        pos,\n        key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1,\n        nodes: connectNodes\n      };\n      callback(data);\n    }\n    // Process children node\n    if (children) {\n      children.forEach((subNode, subIndex) => {\n        processNode(subNode, subIndex, {\n          node,\n          pos,\n          level: parent ? parent.level + 1 : -1\n        }, connectNodes);\n      });\n    }\n  }\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\nexport function convertDataToEntities(dataNodes) {\n  let {\n    initWrapper,\n    processEntity,\n    onProcessFinished,\n    externalGetKey,\n    childrenPropName,\n    fieldNames\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let /** @deprecated Use `config.externalGetKey` instead */\n  legacyExternalGetKey = arguments.length > 2 ? arguments[2] : undefined;\n  // Init config\n  const mergedExternalGetKey = externalGetKey || legacyExternalGetKey;\n  const posEntities = {};\n  const keyEntities = {};\n  let wrapper = {\n    posEntities,\n    keyEntities\n  };\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n  traverseDataNodes(dataNodes, item => {\n    const {\n      node,\n      index,\n      pos,\n      key,\n      parentPos,\n      level,\n      nodes\n    } = item;\n    const entity = {\n      node,\n      nodes,\n      index,\n      key,\n      pos,\n      level\n    };\n    const mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity;\n    // Fill children\n    entity.parent = posEntities[parentPos];\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, {\n    externalGetKey: mergedExternalGetKey,\n    childrenPropName,\n    fieldNames\n  });\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\nexport function getTreeNodeProps(key, _ref) {\n  let {\n    expandedKeysSet,\n    selectedKeysSet,\n    loadedKeysSet,\n    loadingKeysSet,\n    checkedKeysSet,\n    halfCheckedKeysSet,\n    dragOverNodeKey,\n    dropPosition,\n    keyEntities\n  } = _ref;\n  const entity = keyEntities[key];\n  const treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeysSet.has(key),\n    selected: selectedKeysSet.has(key),\n    loaded: loadedKeysSet.has(key),\n    loading: loadingKeysSet.has(key),\n    checked: checkedKeysSet.has(key),\n    halfChecked: halfCheckedKeysSet.has(key),\n    pos: String(entity ? entity.pos : ''),\n    parent: entity.parent,\n    // [Legacy] Drag props\n    // Since the interaction of drag is changed, the semantic of the props are\n    // not accuracy, I think it should be finally removed\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\nexport function convertNodePropsToEventData(props) {\n  const {\n    data,\n    expanded,\n    selected,\n    checked,\n    loaded,\n    loading,\n    halfChecked,\n    dragOver,\n    dragOverGapTop,\n    dragOverGapBottom,\n    pos,\n    active,\n    eventKey\n  } = props;\n  const eventData = _extends(_extends({\n    dataRef: data\n  }, data), {\n    expanded,\n    selected,\n    checked,\n    loaded,\n    loading,\n    halfChecked,\n    dragOver,\n    dragOverGapTop,\n    dragOverGapBottom,\n    pos,\n    active,\n    eventKey,\n    key: eventKey\n  });\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get() {\n        warning(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n  return eventData;\n}"],"mappings":";AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,IAAIC,MAAM,GAAG,IAAI,IAAI,IAAI,CAACA,MAAM,IAAI,UAAUC,CAAC,EAAEC,CAAC,EAAE;EAClD,IAAIC,CAAC,GAAG,CAAC,CAAC;EACV,KAAK,IAAIC,CAAC,IAAIH,CAAC,EAAE,IAAII,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACP,CAAC,EAAEG,CAAC,CAAC,IAAIF,CAAC,CAACO,OAAO,CAACL,CAAC,CAAC,GAAG,CAAC,EAAED,CAAC,CAACC,CAAC,CAAC,GAAGH,CAAC,CAACG,CAAC,CAAC;EAChG,IAAIH,CAAC,IAAI,IAAI,IAAI,OAAOI,MAAM,CAACK,qBAAqB,KAAK,UAAU,EAAE,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEP,CAAC,GAAGC,MAAM,CAACK,qBAAqB,CAACT,CAAC,CAAC,EAAEU,CAAC,GAAGP,CAAC,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;IAC3I,IAAIT,CAAC,CAACO,OAAO,CAACL,CAAC,CAACO,CAAC,CAAC,CAAC,GAAG,CAAC,IAAIN,MAAM,CAACC,SAAS,CAACO,oBAAoB,CAACL,IAAI,CAACP,CAAC,EAAEG,CAAC,CAACO,CAAC,CAAC,CAAC,EAAER,CAAC,CAACC,CAAC,CAACO,CAAC,CAAC,CAAC,GAAGV,CAAC,CAACG,CAAC,CAACO,CAAC,CAAC,CAAC;EACnG;EACA,OAAOR,CAAC;AACV,CAAC;AACD,SAASW,WAAW,EAAEC,UAAU,QAAQ,SAAS;AACjD,SAASC,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,QAAQ,EAAEC,WAAW,QAAQ,wBAAwB;AAC9D,OAAOC,IAAI,MAAM,kBAAkB;AACnC,OAAO,SAASC,MAAMA,CAACC,GAAG,EAAEC,GAAG,EAAE;EAC/B,IAAID,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAKE,SAAS,EAAE;IACrC,OAAOF,GAAG;EACZ;EACA,OAAOC,GAAG;AACZ;AACA,OAAO,SAASE,cAAcA,CAACC,UAAU,EAAE;EACzC,MAAM;IACJC,KAAK;IACLC,MAAM;IACNN,GAAG;IACHO;EACF,CAAC,GAAGH,UAAU,IAAI,CAAC,CAAC;EACpB,MAAMI,WAAW,GAAGH,KAAK,IAAI,OAAO;EACpC,OAAO;IACLA,KAAK,EAAEG,WAAW;IAClBF,MAAM,EAAEA,MAAM,IAAI,CAACE,WAAW,CAAC;IAC/BR,GAAG,EAAEA,GAAG,IAAI,KAAK;IACjBO,QAAQ,EAAEA,QAAQ,IAAI;EACxB,CAAC;AACH;AACA;AACA;AACA;AACA,OAAO,SAASE,iBAAiBA,CAACC,QAAQ,EAAEN,UAAU,EAAE;EACtD,MAAMO,IAAI,GAAG,IAAIC,GAAG,CAAC,CAAC;EACtB,SAASC,GAAGA,CAACC,IAAI,EAAE;IACjB,IAAIC,IAAI,GAAGC,SAAS,CAACzB,MAAM,GAAG,CAAC,IAAIyB,SAAS,CAAC,CAAC,CAAC,KAAKd,SAAS,GAAGc,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE;IACjF,CAACF,IAAI,IAAI,EAAE,EAAEG,OAAO,CAACC,QAAQ,IAAI;MAC/B,MAAMlB,GAAG,GAAGkB,QAAQ,CAACd,UAAU,CAACJ,GAAG,CAAC;MACpC,MAAMO,QAAQ,GAAGW,QAAQ,CAACd,UAAU,CAACG,QAAQ,CAAC;MAC9CZ,OAAO,CAACK,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAKE,SAAS,EAAG,uCAAsCa,IAAK,GAAEf,GAAI,GAAE,CAAC;MAChG,MAAMmB,SAAS,GAAGC,MAAM,CAACpB,GAAG,CAAC;MAC7BL,OAAO,CAAC,CAACgB,IAAI,CAACU,GAAG,CAACF,SAAS,CAAC,IAAInB,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAKE,SAAS,EAAG,iCAAgCiB,SAAU,EAAC,CAAC;MAChHR,IAAI,CAACW,GAAG,CAACH,SAAS,EAAE,IAAI,CAAC;MACzBN,GAAG,CAACN,QAAQ,EAAG,GAAEQ,IAAK,GAAEI,SAAU,KAAI,CAAC;IACzC,CAAC,CAAC;EACJ;EACAN,GAAG,CAACH,QAAQ,CAAC;AACf;AACA;AACA;AACA;AACA,OAAO,SAASa,iBAAiBA,CAACC,SAAS,EAAE;EAC3C,SAASX,GAAGA,CAAA,EAAG;IACb,IAAIY,IAAI,GAAGT,SAAS,CAACzB,MAAM,GAAG,CAAC,IAAIyB,SAAS,CAAC,CAAC,CAAC,KAAKd,SAAS,GAAGc,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE;IACjF,MAAMU,SAAS,GAAG7B,WAAW,CAAC4B,IAAI,CAAC;IACnC,OAAOC,SAAS,CAACC,GAAG,CAACT,QAAQ,IAAI;MAC/B,IAAIU,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE;MAClB;MACA,IAAI,CAACrC,UAAU,CAACwB,QAAQ,CAAC,EAAE;QACzBvB,OAAO,CAAC,CAACuB,QAAQ,EAAE,qDAAqD,CAAC;QACzE,OAAO,IAAI;MACb;MACA,MAAMc,KAAK,GAAGd,QAAQ,CAACX,QAAQ,IAAI,CAAC,CAAC;MACrC,MAAMP,GAAG,GAAGkB,QAAQ,CAAClB,GAAG;MACxB,MAAMiC,KAAK,GAAG,CAAC,CAAC;MAChB,KAAK,MAAM,CAACC,CAAC,EAAEC,CAAC,CAAC,IAAInD,MAAM,CAACoD,OAAO,CAAClB,QAAQ,CAACe,KAAK,CAAC,EAAE;QACnDA,KAAK,CAACrC,QAAQ,CAACsC,CAAC,CAAC,CAAC,GAAGC,CAAC;MACxB;MACA,MAAM;QACJE,MAAM;QACNC,SAAS;QACTC,UAAU;QACVC,QAAQ;QACRC;MACF,CAAC,GAAGR,KAAK;MACT;MACA,MAAMS,QAAQ,GAAG;QACfL,MAAM,EAAEA,MAAM,IAAIA,MAAM,KAAK,EAAE,IAAInC,SAAS;QAC5CoC,SAAS,EAAEA,SAAS,IAAIA,SAAS,KAAK,EAAE,IAAIpC,SAAS;QACrDqC,UAAU,EAAEA,UAAU,IAAIA,UAAU,KAAK,EAAE,IAAIrC,SAAS;QACxDsC,QAAQ,EAAEA,QAAQ,IAAIA,QAAQ,KAAK,EAAE,IAAItC,SAAS;QAClDuC,eAAe,EAAEA,eAAe,IAAIA,eAAe,KAAK,EAAE,IAAIvC;MAChE,CAAC;MACD,MAAMyC,UAAU,GAAGjE,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEuD,KAAK,CAAC,EAAES,QAAQ,CAAC;MAC1D,MAAM;UACFrC,KAAK,GAAG,CAACuB,EAAE,GAAGI,KAAK,CAAC3B,KAAK,MAAM,IAAI,IAAIuB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACzC,IAAI,CAAC6C,KAAK,EAAEW,UAAU,CAAC;UAC1FC,IAAI,GAAG,CAACf,EAAE,GAAGG,KAAK,CAACY,IAAI,MAAM,IAAI,IAAIf,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC1C,IAAI,CAAC6C,KAAK,EAAEW,UAAU,CAAC;UACxFE,YAAY,GAAG,CAACf,EAAE,GAAGE,KAAK,CAACa,YAAY,MAAM,IAAI,IAAIf,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC3C,IAAI,CAAC6C,KAAK,EAAEW,UAAU;QACzG,CAAC,GAAGV,KAAK;QACTa,IAAI,GAAGnE,MAAM,CAACsD,KAAK,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,cAAc,CAAC,CAAC;MACzD,MAAM1B,QAAQ,GAAG,CAACwB,EAAE,GAAGC,KAAK,CAACe,OAAO,MAAM,IAAI,IAAIhB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC5C,IAAI,CAAC6C,KAAK,CAAC;MACzF,MAAMgB,QAAQ,GAAGtE,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEoE,IAAI,CAAC,EAAE;QACrDzC,KAAK;QACLuC,IAAI;QACJC,YAAY;QACZ7C,GAAG;QACHqC;MACF,CAAC,CAAC,EAAEK,QAAQ,CAAC;MACb,MAAMO,cAAc,GAAGpC,GAAG,CAACN,QAAQ,CAAC;MACpC,IAAI0C,cAAc,CAAC1D,MAAM,EAAE;QACzByD,QAAQ,CAACzC,QAAQ,GAAG0C,cAAc;MACpC;MACA,OAAOD,QAAQ;IACjB,CAAC,CAAC;EACJ;EACA,OAAOnC,GAAG,CAACW,SAAS,CAAC;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS0B,eAAeA,CAACC,YAAY,EAAEC,YAAY,EAAEhD,UAAU,EAAE;EACtE,MAAM;IACJE,MAAM,EAAE+C,WAAW;IACnBrD,GAAG,EAAEsD,QAAQ;IACb/C,QAAQ,EAAEgD;EACZ,CAAC,GAAGpD,cAAc,CAACC,UAAU,CAAC;EAC9B,MAAMoD,cAAc,GAAG,IAAIC,GAAG,CAACL,YAAY,KAAK,IAAI,GAAG,EAAE,GAAGA,YAAY,CAAC;EACzE,MAAMM,WAAW,GAAG,EAAE;EACtB,SAAS7C,GAAGA,CAACC,IAAI,EAAE;IACjB,IAAI6C,MAAM,GAAG3C,SAAS,CAACzB,MAAM,GAAG,CAAC,IAAIyB,SAAS,CAAC,CAAC,CAAC,KAAKd,SAAS,GAAGc,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI;IACrF,OAAOF,IAAI,CAACa,GAAG,CAAC,CAACT,QAAQ,EAAE0C,KAAK,KAAK;MACnC,MAAM3D,GAAG,GAAGR,WAAW,CAACkE,MAAM,GAAGA,MAAM,CAAC1D,GAAG,GAAG,GAAG,EAAE2D,KAAK,CAAC;MACzD,MAAMC,SAAS,GAAG9D,MAAM,CAACmB,QAAQ,CAACoC,QAAQ,CAAC,EAAErD,GAAG,CAAC;MACjD;MACA,IAAIO,WAAW;MACf,KAAK,IAAIlB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+D,WAAW,CAAC9D,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;QAC9C,MAAMwE,UAAU,GAAGT,WAAW,CAAC/D,CAAC,CAAC;QACjC,IAAI4B,QAAQ,CAAC4C,UAAU,CAAC,KAAK5D,SAAS,EAAE;UACtCM,WAAW,GAAGU,QAAQ,CAAC4C,UAAU,CAAC;UAClC;QACF;MACF;MACA;MACA,MAAMC,WAAW,GAAGrF,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEoB,IAAI,CAACoB,QAAQ,EAAE,CAAC,GAAGmC,WAAW,EAAEC,QAAQ,EAAEC,aAAa,CAAC,CAAC,CAAC,EAAE;QACpGlD,KAAK,EAAEG,WAAW;QAClBR,GAAG,EAAE6D,SAAS;QACdF,MAAM;QACN1D,GAAG;QACHM,QAAQ,EAAE,IAAI;QACdyD,IAAI,EAAE9C,QAAQ;QACd+C,OAAO,EAAE,CAAC,IAAIN,MAAM,GAAGA,MAAM,CAACM,OAAO,GAAG,EAAE,CAAC,EAAEL,KAAK,KAAK,CAAC,CAAC;QACzDM,KAAK,EAAE,CAAC,IAAIP,MAAM,GAAGA,MAAM,CAACO,KAAK,GAAG,EAAE,CAAC,EAAEN,KAAK,KAAK9C,IAAI,CAACvB,MAAM,GAAG,CAAC;MACpE,CAAC,CAAC;MACFmE,WAAW,CAACS,IAAI,CAACJ,WAAW,CAAC;MAC7B;MACA,IAAIX,YAAY,KAAK,IAAI,IAAII,cAAc,CAACnC,GAAG,CAACwC,SAAS,CAAC,EAAE;QAC1DE,WAAW,CAACxD,QAAQ,GAAGM,GAAG,CAACK,QAAQ,CAACqC,aAAa,CAAC,IAAI,EAAE,EAAEQ,WAAW,CAAC;MACxE,CAAC,MAAM;QACLA,WAAW,CAACxD,QAAQ,GAAG,EAAE;MAC3B;MACA,OAAOwD,WAAW;IACpB,CAAC,CAAC;EACJ;EACAlD,GAAG,CAACsC,YAAY,CAAC;EACjB,OAAOO,WAAW;AACpB;AACA;AACA;AACA;AACA;AACA,OAAO,SAASU,iBAAiBA,CAACC,SAAS,EAAEC,QAAQ;AACrD;AACAC,MAAM,EAAE;EACN,IAAIC,YAAY,GAAG,CAAC,CAAC;EACrB,IAAI,OAAOD,MAAM,KAAK,QAAQ,EAAE;IAC9BC,YAAY,GAAGD,MAAM;EACvB,CAAC,MAAM;IACLC,YAAY,GAAG;MACbC,cAAc,EAAEF;IAClB,CAAC;EACH;EACAC,YAAY,GAAGA,YAAY,IAAI,CAAC,CAAC;EACjC;EACA,MAAM;IACJE,gBAAgB;IAChBD,cAAc;IACdrE;EACF,CAAC,GAAGoE,YAAY;EAChB,MAAM;IACJxE,GAAG,EAAEsD,QAAQ;IACb/C,QAAQ,EAAEgD;EACZ,CAAC,GAAGpD,cAAc,CAACC,UAAU,CAAC;EAC9B,MAAMuE,qBAAqB,GAAGD,gBAAgB,IAAInB,aAAa;EAC/D;EACA,IAAIqB,eAAe;EACnB,IAAIH,cAAc,EAAE;IAClB,IAAI,OAAOA,cAAc,KAAK,QAAQ,EAAE;MACtCG,eAAe,GAAGnD,IAAI,IAAIA,IAAI,CAACgD,cAAc,CAAC;IAChD,CAAC,MAAM,IAAI,OAAOA,cAAc,KAAK,UAAU,EAAE;MAC/CG,eAAe,GAAGnD,IAAI,IAAIgD,cAAc,CAAChD,IAAI,CAAC;IAChD;EACF,CAAC,MAAM;IACLmD,eAAe,GAAGA,CAACnD,IAAI,EAAExB,GAAG,KAAKF,MAAM,CAAC0B,IAAI,CAAC6B,QAAQ,CAAC,EAAErD,GAAG,CAAC;EAC9D;EACA;EACA,SAAS4E,WAAWA,CAACpD,IAAI,EAAEmC,KAAK,EAAED,MAAM,EAAEmB,SAAS,EAAE;IACnD,MAAMvE,QAAQ,GAAGkB,IAAI,GAAGA,IAAI,CAACkD,qBAAqB,CAAC,GAAGN,SAAS;IAC/D,MAAMpE,GAAG,GAAGwB,IAAI,GAAGhC,WAAW,CAACkE,MAAM,CAAC1D,GAAG,EAAE2D,KAAK,CAAC,GAAG,GAAG;IACvD,MAAMmB,YAAY,GAAGtD,IAAI,GAAG,CAAC,GAAGqD,SAAS,EAAErD,IAAI,CAAC,GAAG,EAAE;IACrD;IACA,IAAIA,IAAI,EAAE;MACR,MAAMzB,GAAG,GAAG4E,eAAe,CAACnD,IAAI,EAAExB,GAAG,CAAC;MACtC,MAAM+D,IAAI,GAAG;QACXvC,IAAI;QACJmC,KAAK;QACL3D,GAAG;QACHD,GAAG;QACHgF,SAAS,EAAErB,MAAM,CAAClC,IAAI,GAAGkC,MAAM,CAAC1D,GAAG,GAAG,IAAI;QAC1CgF,KAAK,EAAEtB,MAAM,CAACsB,KAAK,GAAG,CAAC;QACvBC,KAAK,EAAEH;MACT,CAAC;MACDT,QAAQ,CAACN,IAAI,CAAC;IAChB;IACA;IACA,IAAIzD,QAAQ,EAAE;MACZA,QAAQ,CAACU,OAAO,CAAC,CAACkE,OAAO,EAAEC,QAAQ,KAAK;QACtCP,WAAW,CAACM,OAAO,EAAEC,QAAQ,EAAE;UAC7B3D,IAAI;UACJxB,GAAG;UACHgF,KAAK,EAAEtB,MAAM,GAAGA,MAAM,CAACsB,KAAK,GAAG,CAAC,GAAG,CAAC;QACtC,CAAC,EAAEF,YAAY,CAAC;MAClB,CAAC,CAAC;IACJ;EACF;EACAF,WAAW,CAAC,IAAI,CAAC;AACnB;AACA;AACA;AACA;AACA,OAAO,SAASQ,qBAAqBA,CAAChB,SAAS,EAAE;EAC/C,IAAI;IACFiB,WAAW;IACXC,aAAa;IACbC,iBAAiB;IACjBf,cAAc;IACdC,gBAAgB;IAChBtE;EACF,CAAC,GAAGY,SAAS,CAACzB,MAAM,GAAG,CAAC,IAAIyB,SAAS,CAAC,CAAC,CAAC,KAAKd,SAAS,GAAGc,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAC1E,IAAI;EACJyE,oBAAoB,GAAGzE,SAAS,CAACzB,MAAM,GAAG,CAAC,GAAGyB,SAAS,CAAC,CAAC,CAAC,GAAGd,SAAS;EACtE;EACA,MAAMwF,oBAAoB,GAAGjB,cAAc,IAAIgB,oBAAoB;EACnE,MAAME,WAAW,GAAG,CAAC,CAAC;EACtB,MAAMC,WAAW,GAAG,CAAC,CAAC;EACtB,IAAIC,OAAO,GAAG;IACZF,WAAW;IACXC;EACF,CAAC;EACD,IAAIN,WAAW,EAAE;IACfO,OAAO,GAAGP,WAAW,CAACO,OAAO,CAAC,IAAIA,OAAO;EAC3C;EACAzB,iBAAiB,CAACC,SAAS,EAAEyB,IAAI,IAAI;IACnC,MAAM;MACJrE,IAAI;MACJmC,KAAK;MACL3D,GAAG;MACHD,GAAG;MACHgF,SAAS;MACTC,KAAK;MACLC;IACF,CAAC,GAAGY,IAAI;IACR,MAAMC,MAAM,GAAG;MACbtE,IAAI;MACJyD,KAAK;MACLtB,KAAK;MACL5D,GAAG;MACHC,GAAG;MACHgF;IACF,CAAC;IACD,MAAMpB,SAAS,GAAG9D,MAAM,CAACC,GAAG,EAAEC,GAAG,CAAC;IAClC0F,WAAW,CAAC1F,GAAG,CAAC,GAAG8F,MAAM;IACzBH,WAAW,CAAC/B,SAAS,CAAC,GAAGkC,MAAM;IAC/B;IACAA,MAAM,CAACpC,MAAM,GAAGgC,WAAW,CAACX,SAAS,CAAC;IACtC,IAAIe,MAAM,CAACpC,MAAM,EAAE;MACjBoC,MAAM,CAACpC,MAAM,CAACpD,QAAQ,GAAGwF,MAAM,CAACpC,MAAM,CAACpD,QAAQ,IAAI,EAAE;MACrDwF,MAAM,CAACpC,MAAM,CAACpD,QAAQ,CAAC4D,IAAI,CAAC4B,MAAM,CAAC;IACrC;IACA,IAAIR,aAAa,EAAE;MACjBA,aAAa,CAACQ,MAAM,EAAEF,OAAO,CAAC;IAChC;EACF,CAAC,EAAE;IACDpB,cAAc,EAAEiB,oBAAoB;IACpChB,gBAAgB;IAChBtE;EACF,CAAC,CAAC;EACF,IAAIoF,iBAAiB,EAAE;IACrBA,iBAAiB,CAACK,OAAO,CAAC;EAC5B;EACA,OAAOA,OAAO;AAChB;AACA;AACA;AACA;AACA,OAAO,SAASG,gBAAgBA,CAAChG,GAAG,EAAEiG,IAAI,EAAE;EAC1C,IAAI;IACFC,eAAe;IACfC,eAAe;IACfC,aAAa;IACbC,cAAc;IACdC,cAAc;IACdC,kBAAkB;IAClBC,eAAe;IACfC,YAAY;IACZb;EACF,CAAC,GAAGK,IAAI;EACR,MAAMF,MAAM,GAAGH,WAAW,CAAC5F,GAAG,CAAC;EAC/B,MAAM0G,aAAa,GAAG;IACpBC,QAAQ,EAAE3G,GAAG;IACb4G,QAAQ,EAAEV,eAAe,CAAC7E,GAAG,CAACrB,GAAG,CAAC;IAClC6G,QAAQ,EAAEV,eAAe,CAAC9E,GAAG,CAACrB,GAAG,CAAC;IAClC8G,MAAM,EAAEV,aAAa,CAAC/E,GAAG,CAACrB,GAAG,CAAC;IAC9B+G,OAAO,EAAEV,cAAc,CAAChF,GAAG,CAACrB,GAAG,CAAC;IAChCgH,OAAO,EAAEV,cAAc,CAACjF,GAAG,CAACrB,GAAG,CAAC;IAChCiH,WAAW,EAAEV,kBAAkB,CAAClF,GAAG,CAACrB,GAAG,CAAC;IACxCC,GAAG,EAAEmB,MAAM,CAAC2E,MAAM,GAAGA,MAAM,CAAC9F,GAAG,GAAG,EAAE,CAAC;IACrC0D,MAAM,EAAEoC,MAAM,CAACpC,MAAM;IACrB;IACA;IACA;IACAuD,QAAQ,EAAEV,eAAe,KAAKxG,GAAG,IAAIyG,YAAY,KAAK,CAAC;IACvDU,cAAc,EAAEX,eAAe,KAAKxG,GAAG,IAAIyG,YAAY,KAAK,CAAC,CAAC;IAC9DW,iBAAiB,EAAEZ,eAAe,KAAKxG,GAAG,IAAIyG,YAAY,KAAK;EACjE,CAAC;EACD,OAAOC,aAAa;AACtB;AACA,OAAO,SAASW,2BAA2BA,CAACpF,KAAK,EAAE;EACjD,MAAM;IACJ+B,IAAI;IACJ4C,QAAQ;IACRC,QAAQ;IACRG,OAAO;IACPF,MAAM;IACNC,OAAO;IACPE,WAAW;IACXC,QAAQ;IACRC,cAAc;IACdC,iBAAiB;IACjBnH,GAAG;IACHqH,MAAM;IACNX;EACF,CAAC,GAAG1E,KAAK;EACT,MAAMsF,SAAS,GAAG7I,QAAQ,CAACA,QAAQ,CAAC;IAClC8I,OAAO,EAAExD;EACX,CAAC,EAAEA,IAAI,CAAC,EAAE;IACR4C,QAAQ;IACRC,QAAQ;IACRG,OAAO;IACPF,MAAM;IACNC,OAAO;IACPE,WAAW;IACXC,QAAQ;IACRC,cAAc;IACdC,iBAAiB;IACjBnH,GAAG;IACHqH,MAAM;IACNX,QAAQ;IACR3G,GAAG,EAAE2G;EACP,CAAC,CAAC;EACF,IAAI,EAAE,OAAO,IAAIY,SAAS,CAAC,EAAE;IAC3BvI,MAAM,CAACyI,cAAc,CAACF,SAAS,EAAE,OAAO,EAAE;MACxCG,GAAGA,CAAA,EAAG;QACJ/H,OAAO,CAAC,KAAK,EAAE,uIAAuI,CAAC;QACvJ,OAAOsC,KAAK;MACd;IACF,CAAC,CAAC;EACJ;EACA,OAAOsF,SAAS;AAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}