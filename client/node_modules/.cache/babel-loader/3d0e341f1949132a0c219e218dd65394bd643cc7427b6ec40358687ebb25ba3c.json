{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { convertDataToEntities } from '../../vc-tree/utils/treeUtil';\nimport { VALUE_SPLIT } from '../utils/commonUtil';\nimport { computed } from 'vue';\n/** Lazy parse options data into conduct-able info to avoid perf issue in single mode */\nexport default ((options, fieldNames) => {\n  const entities = computed(() => {\n    return convertDataToEntities(options.value, {\n      fieldNames: fieldNames.value,\n      initWrapper: wrapper => _extends(_extends({}, wrapper), {\n        pathKeyEntities: {}\n      }),\n      processEntity: (entity, wrapper) => {\n        const pathKey = entity.nodes.map(node => node[fieldNames.value.value]).join(VALUE_SPLIT);\n        wrapper.pathKeyEntities[pathKey] = entity;\n        // Overwrite origin key.\n        // this is very hack but we need let conduct logic work with connect path\n        entity.key = pathKey;\n      }\n    }).pathKeyEntities;\n  });\n  return entities;\n});","map":{"version":3,"names":["_extends","convertDataToEntities","VALUE_SPLIT","computed","options","fieldNames","entities","value","initWrapper","wrapper","pathKeyEntities","processEntity","entity","pathKey","nodes","map","node","join","key"],"sources":["/Users/lpl/工作/Teamsupport/develop_help/node_modules/ant-design-vue/es/vc-cascader/hooks/useEntities.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { convertDataToEntities } from '../../vc-tree/utils/treeUtil';\nimport { VALUE_SPLIT } from '../utils/commonUtil';\nimport { computed } from 'vue';\n/** Lazy parse options data into conduct-able info to avoid perf issue in single mode */\nexport default ((options, fieldNames) => {\n  const entities = computed(() => {\n    return convertDataToEntities(options.value, {\n      fieldNames: fieldNames.value,\n      initWrapper: wrapper => _extends(_extends({}, wrapper), {\n        pathKeyEntities: {}\n      }),\n      processEntity: (entity, wrapper) => {\n        const pathKey = entity.nodes.map(node => node[fieldNames.value.value]).join(VALUE_SPLIT);\n        wrapper.pathKeyEntities[pathKey] = entity;\n        // Overwrite origin key.\n        // this is very hack but we need let conduct logic work with connect path\n        entity.key = pathKey;\n      }\n    }).pathKeyEntities;\n  });\n  return entities;\n});"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,SAASC,qBAAqB,QAAQ,8BAA8B;AACpE,SAASC,WAAW,QAAQ,qBAAqB;AACjD,SAASC,QAAQ,QAAQ,KAAK;AAC9B;AACA,gBAAgB,CAACC,OAAO,EAAEC,UAAU,KAAK;EACvC,MAAMC,QAAQ,GAAGH,QAAQ,CAAC,MAAM;IAC9B,OAAOF,qBAAqB,CAACG,OAAO,CAACG,KAAK,EAAE;MAC1CF,UAAU,EAAEA,UAAU,CAACE,KAAK;MAC5BC,WAAW,EAAEC,OAAO,IAAIT,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAES,OAAO,CAAC,EAAE;QACtDC,eAAe,EAAE,CAAC;MACpB,CAAC,CAAC;MACFC,aAAa,EAAEA,CAACC,MAAM,EAAEH,OAAO,KAAK;QAClC,MAAMI,OAAO,GAAGD,MAAM,CAACE,KAAK,CAACC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACX,UAAU,CAACE,KAAK,CAACA,KAAK,CAAC,CAAC,CAACU,IAAI,CAACf,WAAW,CAAC;QACxFO,OAAO,CAACC,eAAe,CAACG,OAAO,CAAC,GAAGD,MAAM;QACzC;QACA;QACAA,MAAM,CAACM,GAAG,GAAGL,OAAO;MACtB;IACF,CAAC,CAAC,CAACH,eAAe;EACpB,CAAC,CAAC;EACF,OAAOJ,QAAQ;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}