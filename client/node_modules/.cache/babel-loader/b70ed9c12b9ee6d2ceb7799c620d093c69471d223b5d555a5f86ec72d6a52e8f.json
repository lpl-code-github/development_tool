{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode, resolveDirective as _resolveDirective } from \"vue\";\nimport OptionList from './OptionList';\nimport { formatStrategyValues, SHOW_CHILD } from './utils/strategyUtil';\nimport { useProvideSelectContext } from './TreeSelectContext';\nimport { useProvideLegacySelectContext } from './LegacyContext';\nimport useTreeData from './hooks/useTreeData';\nimport { toArray, fillFieldNames, isNil } from './utils/valueUtil';\nimport useCache from './hooks/useCache';\nimport useDataEntities from './hooks/useDataEntities';\nimport { fillAdditionalInfo, fillLegacyProps } from './utils/legacyUtil';\nimport useCheckedKeys from './hooks/useCheckedKeys';\nimport useFilterTreeData from './hooks/useFilterTreeData';\nimport warningProps from './utils/warningPropsUtil';\nimport { baseSelectPropsWithoutPrivate } from '../vc-select/BaseSelect';\nimport { computed, defineComponent, ref, shallowRef, toRaw, toRef, toRefs, watchEffect } from 'vue';\nimport omit from '../_util/omit';\nimport PropTypes from '../_util/vue-types';\nimport { BaseSelect } from '../vc-select';\nimport { initDefaultProps } from '../_util/props-util';\nimport useId from '../vc-select/hooks/useId';\nimport useMergedState from '../_util/hooks/useMergedState';\nimport { conductCheck } from '../vc-tree/utils/conductUtil';\nimport { warning } from '../vc-util/warning';\nimport { toReactive } from '../_util/toReactive';\nimport useMaxLevel from '../vc-tree/useMaxLevel';\nexport function treeSelectProps() {\n  return _extends(_extends({}, omit(baseSelectPropsWithoutPrivate(), ['mode'])), {\n    prefixCls: String,\n    id: String,\n    value: {\n      type: [String, Number, Object, Array]\n    },\n    defaultValue: {\n      type: [String, Number, Object, Array]\n    },\n    onChange: {\n      type: Function\n    },\n    searchValue: String,\n    /** @deprecated Use `searchValue` instead */\n    inputValue: String,\n    onSearch: {\n      type: Function\n    },\n    autoClearSearchValue: {\n      type: Boolean,\n      default: undefined\n    },\n    filterTreeNode: {\n      type: [Boolean, Function],\n      default: undefined\n    },\n    treeNodeFilterProp: String,\n    // >>> Select\n    onSelect: Function,\n    onDeselect: Function,\n    showCheckedStrategy: {\n      type: String\n    },\n    treeNodeLabelProp: String,\n    fieldNames: {\n      type: Object\n    },\n    // >>> Mode\n    multiple: {\n      type: Boolean,\n      default: undefined\n    },\n    treeCheckable: {\n      type: Boolean,\n      default: undefined\n    },\n    treeCheckStrictly: {\n      type: Boolean,\n      default: undefined\n    },\n    labelInValue: {\n      type: Boolean,\n      default: undefined\n    },\n    // >>> Data\n    treeData: {\n      type: Array\n    },\n    treeDataSimpleMode: {\n      type: [Boolean, Object],\n      default: undefined\n    },\n    loadData: {\n      type: Function\n    },\n    treeLoadedKeys: {\n      type: Array\n    },\n    onTreeLoad: {\n      type: Function\n    },\n    // >>> Expanded\n    treeDefaultExpandAll: {\n      type: Boolean,\n      default: undefined\n    },\n    treeExpandedKeys: {\n      type: Array\n    },\n    treeDefaultExpandedKeys: {\n      type: Array\n    },\n    onTreeExpand: {\n      type: Function\n    },\n    // >>> Options\n    virtual: {\n      type: Boolean,\n      default: undefined\n    },\n    listHeight: Number,\n    listItemHeight: Number,\n    onDropdownVisibleChange: {\n      type: Function\n    },\n    // >>> Tree\n    treeLine: {\n      type: [Boolean, Object],\n      default: undefined\n    },\n    treeIcon: PropTypes.any,\n    showTreeIcon: {\n      type: Boolean,\n      default: undefined\n    },\n    switcherIcon: PropTypes.any,\n    treeMotion: PropTypes.any,\n    children: Array,\n    treeExpandAction: String,\n    showArrow: {\n      type: Boolean,\n      default: undefined\n    },\n    showSearch: {\n      type: Boolean,\n      default: undefined\n    },\n    open: {\n      type: Boolean,\n      default: undefined\n    },\n    defaultOpen: {\n      type: Boolean,\n      default: undefined\n    },\n    disabled: {\n      type: Boolean,\n      default: undefined\n    },\n    placeholder: PropTypes.any,\n    maxTagPlaceholder: {\n      type: Function\n    },\n    dropdownPopupAlign: PropTypes.any,\n    customSlots: Object\n  });\n}\nfunction isRawValue(value) {\n  return !value || typeof value !== 'object';\n}\nexport default defineComponent({\n  compatConfig: {\n    MODE: 3\n  },\n  name: 'TreeSelect',\n  inheritAttrs: false,\n  props: initDefaultProps(treeSelectProps(), {\n    treeNodeFilterProp: 'value',\n    autoClearSearchValue: true,\n    showCheckedStrategy: SHOW_CHILD,\n    listHeight: 200,\n    listItemHeight: 20,\n    prefixCls: 'vc-tree-select'\n  }),\n  setup(props, _ref) {\n    let {\n      attrs,\n      expose,\n      slots\n    } = _ref;\n    const mergedId = useId(toRef(props, 'id'));\n    const treeConduction = computed(() => props.treeCheckable && !props.treeCheckStrictly);\n    const mergedCheckable = computed(() => props.treeCheckable || props.treeCheckStrictly);\n    const mergedLabelInValue = computed(() => props.treeCheckStrictly || props.labelInValue);\n    const mergedMultiple = computed(() => mergedCheckable.value || props.multiple);\n    // ========================== Warning ===========================\n    if (process.env.NODE_ENV !== 'production') {\n      watchEffect(() => {\n        warningProps(props);\n      });\n    }\n    // ========================= FieldNames =========================\n    const mergedFieldNames = computed(() => fillFieldNames(props.fieldNames));\n    // =========================== Search ===========================\n    const [mergedSearchValue, setSearchValue] = useMergedState('', {\n      value: computed(() => props.searchValue !== undefined ? props.searchValue : props.inputValue),\n      postState: search => search || ''\n    });\n    const onInternalSearch = searchText => {\n      var _a;\n      setSearchValue(searchText);\n      (_a = props.onSearch) === null || _a === void 0 ? void 0 : _a.call(props, searchText);\n    };\n    // ============================ Data ============================\n    // `useTreeData` only do convert of `children` or `simpleMode`.\n    // Else will return origin `treeData` for perf consideration.\n    // Do not do anything to loop the data.\n    const mergedTreeData = useTreeData(toRef(props, 'treeData'), toRef(props, 'children'), toRef(props, 'treeDataSimpleMode'));\n    const {\n      keyEntities,\n      valueEntities\n    } = useDataEntities(mergedTreeData, mergedFieldNames);\n    /** Get `missingRawValues` which not exist in the tree yet */\n    const splitRawValues = newRawValues => {\n      const missingRawValues = [];\n      const existRawValues = [];\n      // Keep missing value in the cache\n      newRawValues.forEach(val => {\n        if (valueEntities.value.has(val)) {\n          existRawValues.push(val);\n        } else {\n          missingRawValues.push(val);\n        }\n      });\n      return {\n        missingRawValues,\n        existRawValues\n      };\n    };\n    // Filtered Tree\n    const filteredTreeData = useFilterTreeData(mergedTreeData, mergedSearchValue, {\n      fieldNames: mergedFieldNames,\n      treeNodeFilterProp: toRef(props, 'treeNodeFilterProp'),\n      filterTreeNode: toRef(props, 'filterTreeNode')\n    });\n    // =========================== Label ============================\n    const getLabel = item => {\n      if (item) {\n        if (props.treeNodeLabelProp) {\n          return item[props.treeNodeLabelProp];\n        }\n        // Loop from fieldNames\n        const {\n          _title: titleList\n        } = mergedFieldNames.value;\n        for (let i = 0; i < titleList.length; i += 1) {\n          const title = item[titleList[i]];\n          if (title !== undefined) {\n            return title;\n          }\n        }\n      }\n    };\n    // ========================= Wrap Value =========================\n    const toLabeledValues = draftValues => {\n      const values = toArray(draftValues);\n      return values.map(val => {\n        if (isRawValue(val)) {\n          return {\n            value: val\n          };\n        }\n        return val;\n      });\n    };\n    const convert2LabelValues = draftValues => {\n      const values = toLabeledValues(draftValues);\n      return values.map(item => {\n        let {\n          label: rawLabel\n        } = item;\n        const {\n          value: rawValue,\n          halfChecked: rawHalfChecked\n        } = item;\n        let rawDisabled;\n        const entity = valueEntities.value.get(rawValue);\n        // Fill missing label & status\n        if (entity) {\n          rawLabel = rawLabel !== null && rawLabel !== void 0 ? rawLabel : getLabel(entity.node);\n          rawDisabled = entity.node.disabled;\n        }\n        return {\n          label: rawLabel,\n          value: rawValue,\n          halfChecked: rawHalfChecked,\n          disabled: rawDisabled\n        };\n      });\n    };\n    // =========================== Values ===========================\n    const [internalValue, setInternalValue] = useMergedState(props.defaultValue, {\n      value: toRef(props, 'value')\n    });\n    const rawMixedLabeledValues = computed(() => toLabeledValues(internalValue.value));\n    // Split value into full check and half check\n    const rawLabeledValues = shallowRef([]);\n    const rawHalfLabeledValues = shallowRef([]);\n    watchEffect(() => {\n      const fullCheckValues = [];\n      const halfCheckValues = [];\n      rawMixedLabeledValues.value.forEach(item => {\n        if (item.halfChecked) {\n          halfCheckValues.push(item);\n        } else {\n          fullCheckValues.push(item);\n        }\n      });\n      rawLabeledValues.value = fullCheckValues;\n      rawHalfLabeledValues.value = halfCheckValues;\n    });\n    // const [mergedValues] = useCache(rawLabeledValues);\n    const rawValues = computed(() => rawLabeledValues.value.map(item => item.value));\n    const {\n      maxLevel,\n      levelEntities\n    } = useMaxLevel(keyEntities);\n    // Convert value to key. Will fill missed keys for conduct check.\n    const [rawCheckedValues, rawHalfCheckedValues] = useCheckedKeys(rawLabeledValues, rawHalfLabeledValues, treeConduction, keyEntities, maxLevel, levelEntities);\n    // Convert rawCheckedKeys to check strategy related values\n    const displayValues = computed(() => {\n      // Collect keys which need to show\n      const displayKeys = formatStrategyValues(rawCheckedValues.value, props.showCheckedStrategy, keyEntities.value, mergedFieldNames.value);\n      // Convert to value and filled with label\n      const values = displayKeys.map(key => {\n        var _a, _b, _c;\n        return (_c = (_b = (_a = keyEntities.value[key]) === null || _a === void 0 ? void 0 : _a.node) === null || _b === void 0 ? void 0 : _b[mergedFieldNames.value.value]) !== null && _c !== void 0 ? _c : key;\n      });\n      // Back fill with origin label\n      const labeledValues = values.map(val => {\n        const targetItem = rawLabeledValues.value.find(item => item.value === val);\n        return {\n          value: val,\n          label: targetItem === null || targetItem === void 0 ? void 0 : targetItem.label\n        };\n      });\n      const rawDisplayValues = convert2LabelValues(labeledValues);\n      const firstVal = rawDisplayValues[0];\n      if (!mergedMultiple.value && firstVal && isNil(firstVal.value) && isNil(firstVal.label)) {\n        return [];\n      }\n      return rawDisplayValues.map(item => {\n        var _a;\n        return _extends(_extends({}, item), {\n          label: (_a = item.label) !== null && _a !== void 0 ? _a : item.value\n        });\n      });\n    });\n    const [cachedDisplayValues] = useCache(displayValues);\n    // =========================== Change ===========================\n    const triggerChange = (newRawValues, extra, source) => {\n      const labeledValues = convert2LabelValues(newRawValues);\n      setInternalValue(labeledValues);\n      // Clean up if needed\n      if (props.autoClearSearchValue) {\n        setSearchValue('');\n      }\n      // Generate rest parameters is costly, so only do it when necessary\n      if (props.onChange) {\n        let eventValues = newRawValues;\n        if (treeConduction.value) {\n          const formattedKeyList = formatStrategyValues(newRawValues, props.showCheckedStrategy, keyEntities.value, mergedFieldNames.value);\n          eventValues = formattedKeyList.map(key => {\n            const entity = valueEntities.value.get(key);\n            return entity ? entity.node[mergedFieldNames.value.value] : key;\n          });\n        }\n        const {\n          triggerValue,\n          selected\n        } = extra || {\n          triggerValue: undefined,\n          selected: undefined\n        };\n        let returnRawValues = eventValues;\n        // We need fill half check back\n        if (props.treeCheckStrictly) {\n          const halfValues = rawHalfLabeledValues.value.filter(item => !eventValues.includes(item.value));\n          returnRawValues = [...returnRawValues, ...halfValues];\n        }\n        const returnLabeledValues = convert2LabelValues(returnRawValues);\n        const additionalInfo = {\n          // [Legacy] Always return as array contains label & value\n          preValue: rawLabeledValues.value,\n          triggerValue\n        };\n        // [Legacy] Fill legacy data if user query.\n        // This is expansive that we only fill when user query\n        // https://github.com/react-component/tree-select/blob/fe33eb7c27830c9ac70cd1fdb1ebbe7bc679c16a/src/Select.jsx\n        let showPosition = true;\n        if (props.treeCheckStrictly || source === 'selection' && !selected) {\n          showPosition = false;\n        }\n        fillAdditionalInfo(additionalInfo, triggerValue, newRawValues, mergedTreeData.value, showPosition, mergedFieldNames.value);\n        if (mergedCheckable.value) {\n          additionalInfo.checked = selected;\n        } else {\n          additionalInfo.selected = selected;\n        }\n        const returnValues = mergedLabelInValue.value ? returnLabeledValues : returnLabeledValues.map(item => item.value);\n        props.onChange(mergedMultiple.value ? returnValues : returnValues[0], mergedLabelInValue.value ? null : returnLabeledValues.map(item => item.label), additionalInfo);\n      }\n    };\n    // ========================== Options ===========================\n    /** Trigger by option list */\n    const onOptionSelect = (selectedKey, _ref2) => {\n      let {\n        selected,\n        source\n      } = _ref2;\n      var _a, _b, _c;\n      const keyEntitiesValue = toRaw(keyEntities.value);\n      const valueEntitiesValue = toRaw(valueEntities.value);\n      const entity = keyEntitiesValue[selectedKey];\n      const node = entity === null || entity === void 0 ? void 0 : entity.node;\n      const selectedValue = (_a = node === null || node === void 0 ? void 0 : node[mergedFieldNames.value.value]) !== null && _a !== void 0 ? _a : selectedKey;\n      // Never be falsy but keep it safe\n      if (!mergedMultiple.value) {\n        // Single mode always set value\n        triggerChange([selectedValue], {\n          selected: true,\n          triggerValue: selectedValue\n        }, 'option');\n      } else {\n        let newRawValues = selected ? [...rawValues.value, selectedValue] : rawCheckedValues.value.filter(v => v !== selectedValue);\n        // Add keys if tree conduction\n        if (treeConduction.value) {\n          // Should keep missing values\n          const {\n            missingRawValues,\n            existRawValues\n          } = splitRawValues(newRawValues);\n          const keyList = existRawValues.map(val => valueEntitiesValue.get(val).key);\n          // Conduction by selected or not\n          let checkedKeys;\n          if (selected) {\n            ({\n              checkedKeys\n            } = conductCheck(keyList, true, keyEntitiesValue, maxLevel.value, levelEntities.value));\n          } else {\n            ({\n              checkedKeys\n            } = conductCheck(keyList, {\n              checked: false,\n              halfCheckedKeys: rawHalfCheckedValues.value\n            }, keyEntitiesValue, maxLevel.value, levelEntities.value));\n          }\n          // Fill back of keys\n          newRawValues = [...missingRawValues, ...checkedKeys.map(key => keyEntitiesValue[key].node[mergedFieldNames.value.value])];\n        }\n        triggerChange(newRawValues, {\n          selected,\n          triggerValue: selectedValue\n        }, source || 'option');\n      }\n      // Trigger select event\n      if (selected || !mergedMultiple.value) {\n        (_b = props.onSelect) === null || _b === void 0 ? void 0 : _b.call(props, selectedValue, fillLegacyProps(node));\n      } else {\n        (_c = props.onDeselect) === null || _c === void 0 ? void 0 : _c.call(props, selectedValue, fillLegacyProps(node));\n      }\n    };\n    // ========================== Dropdown ==========================\n    const onInternalDropdownVisibleChange = open => {\n      if (props.onDropdownVisibleChange) {\n        const legacyParam = {};\n        Object.defineProperty(legacyParam, 'documentClickClose', {\n          get() {\n            warning(false, 'Second param of `onDropdownVisibleChange` has been removed.');\n            return false;\n          }\n        });\n        props.onDropdownVisibleChange(open, legacyParam);\n      }\n    };\n    // ====================== Display Change ========================\n    const onDisplayValuesChange = (newValues, info) => {\n      const newRawValues = newValues.map(item => item.value);\n      if (info.type === 'clear') {\n        triggerChange(newRawValues, {}, 'selection');\n        return;\n      }\n      // TreeSelect only have multiple mode which means display change only has remove\n      if (info.values.length) {\n        onOptionSelect(info.values[0].value, {\n          selected: false,\n          source: 'selection'\n        });\n      }\n    };\n    const {\n      treeNodeFilterProp,\n      // Data\n      loadData,\n      treeLoadedKeys,\n      onTreeLoad,\n      // Expanded\n      treeDefaultExpandAll,\n      treeExpandedKeys,\n      treeDefaultExpandedKeys,\n      onTreeExpand,\n      // Options\n      virtual,\n      listHeight,\n      listItemHeight,\n      // Tree\n      treeLine,\n      treeIcon,\n      showTreeIcon,\n      switcherIcon,\n      treeMotion,\n      customSlots,\n      dropdownMatchSelectWidth,\n      treeExpandAction\n    } = toRefs(props);\n    useProvideLegacySelectContext(toReactive({\n      checkable: mergedCheckable,\n      loadData,\n      treeLoadedKeys,\n      onTreeLoad,\n      checkedKeys: rawCheckedValues,\n      halfCheckedKeys: rawHalfCheckedValues,\n      treeDefaultExpandAll,\n      treeExpandedKeys,\n      treeDefaultExpandedKeys,\n      onTreeExpand,\n      treeIcon,\n      treeMotion,\n      showTreeIcon,\n      switcherIcon,\n      treeLine,\n      treeNodeFilterProp,\n      keyEntities,\n      customSlots\n    }));\n    useProvideSelectContext(toReactive({\n      virtual,\n      listHeight,\n      listItemHeight,\n      treeData: filteredTreeData,\n      fieldNames: mergedFieldNames,\n      onSelect: onOptionSelect,\n      dropdownMatchSelectWidth,\n      treeExpandAction\n    }));\n    const selectRef = ref();\n    expose({\n      focus() {\n        var _a;\n        (_a = selectRef.value) === null || _a === void 0 ? void 0 : _a.focus();\n      },\n      blur() {\n        var _a;\n        (_a = selectRef.value) === null || _a === void 0 ? void 0 : _a.blur();\n      },\n      scrollTo(arg) {\n        var _a;\n        (_a = selectRef.value) === null || _a === void 0 ? void 0 : _a.scrollTo(arg);\n      }\n    });\n    return () => {\n      var _a;\n      const restProps = omit(props, ['id', 'prefixCls', 'customSlots',\n      // Value\n      'value', 'defaultValue', 'onChange', 'onSelect', 'onDeselect',\n      // Search\n      'searchValue', 'inputValue', 'onSearch', 'autoClearSearchValue', 'filterTreeNode', 'treeNodeFilterProp',\n      // Selector\n      'showCheckedStrategy', 'treeNodeLabelProp',\n      //  Mode\n      'multiple', 'treeCheckable', 'treeCheckStrictly', 'labelInValue',\n      // FieldNames\n      'fieldNames',\n      // Data\n      'treeDataSimpleMode', 'treeData', 'children', 'loadData', 'treeLoadedKeys', 'onTreeLoad',\n      // Expanded\n      'treeDefaultExpandAll', 'treeExpandedKeys', 'treeDefaultExpandedKeys', 'onTreeExpand',\n      // Options\n      'virtual', 'listHeight', 'listItemHeight', 'onDropdownVisibleChange',\n      // Tree\n      'treeLine', 'treeIcon', 'showTreeIcon', 'switcherIcon', 'treeMotion']);\n      return _createVNode(BaseSelect, _objectSpread(_objectSpread(_objectSpread({\n        \"ref\": selectRef\n      }, attrs), restProps), {}, {\n        \"id\": mergedId,\n        \"prefixCls\": props.prefixCls,\n        \"mode\": mergedMultiple.value ? 'multiple' : undefined,\n        \"displayValues\": cachedDisplayValues.value,\n        \"onDisplayValuesChange\": onDisplayValuesChange,\n        \"searchValue\": mergedSearchValue.value,\n        \"onSearch\": onInternalSearch,\n        \"OptionList\": OptionList,\n        \"emptyOptions\": !mergedTreeData.value.length,\n        \"onDropdownVisibleChange\": onInternalDropdownVisibleChange,\n        \"tagRender\": props.tagRender || slots.tagRender,\n        \"dropdownMatchSelectWidth\": (_a = props.dropdownMatchSelectWidth) !== null && _a !== void 0 ? _a : true\n      }), slots);\n    };\n  }\n});","map":{"version":3,"names":["_objectSpread","_extends","createVNode","_createVNode","resolveDirective","_resolveDirective","OptionList","formatStrategyValues","SHOW_CHILD","useProvideSelectContext","useProvideLegacySelectContext","useTreeData","toArray","fillFieldNames","isNil","useCache","useDataEntities","fillAdditionalInfo","fillLegacyProps","useCheckedKeys","useFilterTreeData","warningProps","baseSelectPropsWithoutPrivate","computed","defineComponent","ref","shallowRef","toRaw","toRef","toRefs","watchEffect","omit","PropTypes","BaseSelect","initDefaultProps","useId","useMergedState","conductCheck","warning","toReactive","useMaxLevel","treeSelectProps","prefixCls","String","id","value","type","Number","Object","Array","defaultValue","onChange","Function","searchValue","inputValue","onSearch","autoClearSearchValue","Boolean","default","undefined","filterTreeNode","treeNodeFilterProp","onSelect","onDeselect","showCheckedStrategy","treeNodeLabelProp","fieldNames","multiple","treeCheckable","treeCheckStrictly","labelInValue","treeData","treeDataSimpleMode","loadData","treeLoadedKeys","onTreeLoad","treeDefaultExpandAll","treeExpandedKeys","treeDefaultExpandedKeys","onTreeExpand","virtual","listHeight","listItemHeight","onDropdownVisibleChange","treeLine","treeIcon","any","showTreeIcon","switcherIcon","treeMotion","children","treeExpandAction","showArrow","showSearch","open","defaultOpen","disabled","placeholder","maxTagPlaceholder","dropdownPopupAlign","customSlots","isRawValue","compatConfig","MODE","name","inheritAttrs","props","setup","_ref","attrs","expose","slots","mergedId","treeConduction","mergedCheckable","mergedLabelInValue","mergedMultiple","process","env","NODE_ENV","mergedFieldNames","mergedSearchValue","setSearchValue","postState","search","onInternalSearch","searchText","_a","call","mergedTreeData","keyEntities","valueEntities","splitRawValues","newRawValues","missingRawValues","existRawValues","forEach","val","has","push","filteredTreeData","getLabel","item","_title","titleList","i","length","title","toLabeledValues","draftValues","values","map","convert2LabelValues","label","rawLabel","rawValue","halfChecked","rawHalfChecked","rawDisabled","entity","get","node","internalValue","setInternalValue","rawMixedLabeledValues","rawLabeledValues","rawHalfLabeledValues","fullCheckValues","halfCheckValues","rawValues","maxLevel","levelEntities","rawCheckedValues","rawHalfCheckedValues","displayValues","displayKeys","key","_b","_c","labeledValues","targetItem","find","rawDisplayValues","firstVal","cachedDisplayValues","triggerChange","extra","source","eventValues","formattedKeyList","triggerValue","selected","returnRawValues","halfValues","filter","includes","returnLabeledValues","additionalInfo","preValue","showPosition","checked","returnValues","onOptionSelect","selectedKey","_ref2","keyEntitiesValue","valueEntitiesValue","selectedValue","v","keyList","checkedKeys","halfCheckedKeys","onInternalDropdownVisibleChange","legacyParam","defineProperty","onDisplayValuesChange","newValues","info","dropdownMatchSelectWidth","checkable","selectRef","focus","blur","scrollTo","arg","restProps","tagRender"],"sources":["/Users/lpl/工作/Teamsupport/develop_help/node_modules/ant-design-vue/es/vc-tree-select/TreeSelect.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode, resolveDirective as _resolveDirective } from \"vue\";\nimport OptionList from './OptionList';\nimport { formatStrategyValues, SHOW_CHILD } from './utils/strategyUtil';\nimport { useProvideSelectContext } from './TreeSelectContext';\nimport { useProvideLegacySelectContext } from './LegacyContext';\nimport useTreeData from './hooks/useTreeData';\nimport { toArray, fillFieldNames, isNil } from './utils/valueUtil';\nimport useCache from './hooks/useCache';\nimport useDataEntities from './hooks/useDataEntities';\nimport { fillAdditionalInfo, fillLegacyProps } from './utils/legacyUtil';\nimport useCheckedKeys from './hooks/useCheckedKeys';\nimport useFilterTreeData from './hooks/useFilterTreeData';\nimport warningProps from './utils/warningPropsUtil';\nimport { baseSelectPropsWithoutPrivate } from '../vc-select/BaseSelect';\nimport { computed, defineComponent, ref, shallowRef, toRaw, toRef, toRefs, watchEffect } from 'vue';\nimport omit from '../_util/omit';\nimport PropTypes from '../_util/vue-types';\nimport { BaseSelect } from '../vc-select';\nimport { initDefaultProps } from '../_util/props-util';\nimport useId from '../vc-select/hooks/useId';\nimport useMergedState from '../_util/hooks/useMergedState';\nimport { conductCheck } from '../vc-tree/utils/conductUtil';\nimport { warning } from '../vc-util/warning';\nimport { toReactive } from '../_util/toReactive';\nimport useMaxLevel from '../vc-tree/useMaxLevel';\nexport function treeSelectProps() {\n  return _extends(_extends({}, omit(baseSelectPropsWithoutPrivate(), ['mode'])), {\n    prefixCls: String,\n    id: String,\n    value: {\n      type: [String, Number, Object, Array]\n    },\n    defaultValue: {\n      type: [String, Number, Object, Array]\n    },\n    onChange: {\n      type: Function\n    },\n    searchValue: String,\n    /** @deprecated Use `searchValue` instead */\n    inputValue: String,\n    onSearch: {\n      type: Function\n    },\n    autoClearSearchValue: {\n      type: Boolean,\n      default: undefined\n    },\n    filterTreeNode: {\n      type: [Boolean, Function],\n      default: undefined\n    },\n    treeNodeFilterProp: String,\n    // >>> Select\n    onSelect: Function,\n    onDeselect: Function,\n    showCheckedStrategy: {\n      type: String\n    },\n    treeNodeLabelProp: String,\n    fieldNames: {\n      type: Object\n    },\n    // >>> Mode\n    multiple: {\n      type: Boolean,\n      default: undefined\n    },\n    treeCheckable: {\n      type: Boolean,\n      default: undefined\n    },\n    treeCheckStrictly: {\n      type: Boolean,\n      default: undefined\n    },\n    labelInValue: {\n      type: Boolean,\n      default: undefined\n    },\n    // >>> Data\n    treeData: {\n      type: Array\n    },\n    treeDataSimpleMode: {\n      type: [Boolean, Object],\n      default: undefined\n    },\n    loadData: {\n      type: Function\n    },\n    treeLoadedKeys: {\n      type: Array\n    },\n    onTreeLoad: {\n      type: Function\n    },\n    // >>> Expanded\n    treeDefaultExpandAll: {\n      type: Boolean,\n      default: undefined\n    },\n    treeExpandedKeys: {\n      type: Array\n    },\n    treeDefaultExpandedKeys: {\n      type: Array\n    },\n    onTreeExpand: {\n      type: Function\n    },\n    // >>> Options\n    virtual: {\n      type: Boolean,\n      default: undefined\n    },\n    listHeight: Number,\n    listItemHeight: Number,\n    onDropdownVisibleChange: {\n      type: Function\n    },\n    // >>> Tree\n    treeLine: {\n      type: [Boolean, Object],\n      default: undefined\n    },\n    treeIcon: PropTypes.any,\n    showTreeIcon: {\n      type: Boolean,\n      default: undefined\n    },\n    switcherIcon: PropTypes.any,\n    treeMotion: PropTypes.any,\n    children: Array,\n    treeExpandAction: String,\n    showArrow: {\n      type: Boolean,\n      default: undefined\n    },\n    showSearch: {\n      type: Boolean,\n      default: undefined\n    },\n    open: {\n      type: Boolean,\n      default: undefined\n    },\n    defaultOpen: {\n      type: Boolean,\n      default: undefined\n    },\n    disabled: {\n      type: Boolean,\n      default: undefined\n    },\n    placeholder: PropTypes.any,\n    maxTagPlaceholder: {\n      type: Function\n    },\n    dropdownPopupAlign: PropTypes.any,\n    customSlots: Object\n  });\n}\nfunction isRawValue(value) {\n  return !value || typeof value !== 'object';\n}\nexport default defineComponent({\n  compatConfig: {\n    MODE: 3\n  },\n  name: 'TreeSelect',\n  inheritAttrs: false,\n  props: initDefaultProps(treeSelectProps(), {\n    treeNodeFilterProp: 'value',\n    autoClearSearchValue: true,\n    showCheckedStrategy: SHOW_CHILD,\n    listHeight: 200,\n    listItemHeight: 20,\n    prefixCls: 'vc-tree-select'\n  }),\n  setup(props, _ref) {\n    let {\n      attrs,\n      expose,\n      slots\n    } = _ref;\n    const mergedId = useId(toRef(props, 'id'));\n    const treeConduction = computed(() => props.treeCheckable && !props.treeCheckStrictly);\n    const mergedCheckable = computed(() => props.treeCheckable || props.treeCheckStrictly);\n    const mergedLabelInValue = computed(() => props.treeCheckStrictly || props.labelInValue);\n    const mergedMultiple = computed(() => mergedCheckable.value || props.multiple);\n    // ========================== Warning ===========================\n    if (process.env.NODE_ENV !== 'production') {\n      watchEffect(() => {\n        warningProps(props);\n      });\n    }\n    // ========================= FieldNames =========================\n    const mergedFieldNames = computed(() => fillFieldNames(props.fieldNames));\n    // =========================== Search ===========================\n    const [mergedSearchValue, setSearchValue] = useMergedState('', {\n      value: computed(() => props.searchValue !== undefined ? props.searchValue : props.inputValue),\n      postState: search => search || ''\n    });\n    const onInternalSearch = searchText => {\n      var _a;\n      setSearchValue(searchText);\n      (_a = props.onSearch) === null || _a === void 0 ? void 0 : _a.call(props, searchText);\n    };\n    // ============================ Data ============================\n    // `useTreeData` only do convert of `children` or `simpleMode`.\n    // Else will return origin `treeData` for perf consideration.\n    // Do not do anything to loop the data.\n    const mergedTreeData = useTreeData(toRef(props, 'treeData'), toRef(props, 'children'), toRef(props, 'treeDataSimpleMode'));\n    const {\n      keyEntities,\n      valueEntities\n    } = useDataEntities(mergedTreeData, mergedFieldNames);\n    /** Get `missingRawValues` which not exist in the tree yet */\n    const splitRawValues = newRawValues => {\n      const missingRawValues = [];\n      const existRawValues = [];\n      // Keep missing value in the cache\n      newRawValues.forEach(val => {\n        if (valueEntities.value.has(val)) {\n          existRawValues.push(val);\n        } else {\n          missingRawValues.push(val);\n        }\n      });\n      return {\n        missingRawValues,\n        existRawValues\n      };\n    };\n    // Filtered Tree\n    const filteredTreeData = useFilterTreeData(mergedTreeData, mergedSearchValue, {\n      fieldNames: mergedFieldNames,\n      treeNodeFilterProp: toRef(props, 'treeNodeFilterProp'),\n      filterTreeNode: toRef(props, 'filterTreeNode')\n    });\n    // =========================== Label ============================\n    const getLabel = item => {\n      if (item) {\n        if (props.treeNodeLabelProp) {\n          return item[props.treeNodeLabelProp];\n        }\n        // Loop from fieldNames\n        const {\n          _title: titleList\n        } = mergedFieldNames.value;\n        for (let i = 0; i < titleList.length; i += 1) {\n          const title = item[titleList[i]];\n          if (title !== undefined) {\n            return title;\n          }\n        }\n      }\n    };\n    // ========================= Wrap Value =========================\n    const toLabeledValues = draftValues => {\n      const values = toArray(draftValues);\n      return values.map(val => {\n        if (isRawValue(val)) {\n          return {\n            value: val\n          };\n        }\n        return val;\n      });\n    };\n    const convert2LabelValues = draftValues => {\n      const values = toLabeledValues(draftValues);\n      return values.map(item => {\n        let {\n          label: rawLabel\n        } = item;\n        const {\n          value: rawValue,\n          halfChecked: rawHalfChecked\n        } = item;\n        let rawDisabled;\n        const entity = valueEntities.value.get(rawValue);\n        // Fill missing label & status\n        if (entity) {\n          rawLabel = rawLabel !== null && rawLabel !== void 0 ? rawLabel : getLabel(entity.node);\n          rawDisabled = entity.node.disabled;\n        }\n        return {\n          label: rawLabel,\n          value: rawValue,\n          halfChecked: rawHalfChecked,\n          disabled: rawDisabled\n        };\n      });\n    };\n    // =========================== Values ===========================\n    const [internalValue, setInternalValue] = useMergedState(props.defaultValue, {\n      value: toRef(props, 'value')\n    });\n    const rawMixedLabeledValues = computed(() => toLabeledValues(internalValue.value));\n    // Split value into full check and half check\n    const rawLabeledValues = shallowRef([]);\n    const rawHalfLabeledValues = shallowRef([]);\n    watchEffect(() => {\n      const fullCheckValues = [];\n      const halfCheckValues = [];\n      rawMixedLabeledValues.value.forEach(item => {\n        if (item.halfChecked) {\n          halfCheckValues.push(item);\n        } else {\n          fullCheckValues.push(item);\n        }\n      });\n      rawLabeledValues.value = fullCheckValues;\n      rawHalfLabeledValues.value = halfCheckValues;\n    });\n    // const [mergedValues] = useCache(rawLabeledValues);\n    const rawValues = computed(() => rawLabeledValues.value.map(item => item.value));\n    const {\n      maxLevel,\n      levelEntities\n    } = useMaxLevel(keyEntities);\n    // Convert value to key. Will fill missed keys for conduct check.\n    const [rawCheckedValues, rawHalfCheckedValues] = useCheckedKeys(rawLabeledValues, rawHalfLabeledValues, treeConduction, keyEntities, maxLevel, levelEntities);\n    // Convert rawCheckedKeys to check strategy related values\n    const displayValues = computed(() => {\n      // Collect keys which need to show\n      const displayKeys = formatStrategyValues(rawCheckedValues.value, props.showCheckedStrategy, keyEntities.value, mergedFieldNames.value);\n      // Convert to value and filled with label\n      const values = displayKeys.map(key => {\n        var _a, _b, _c;\n        return (_c = (_b = (_a = keyEntities.value[key]) === null || _a === void 0 ? void 0 : _a.node) === null || _b === void 0 ? void 0 : _b[mergedFieldNames.value.value]) !== null && _c !== void 0 ? _c : key;\n      });\n      // Back fill with origin label\n      const labeledValues = values.map(val => {\n        const targetItem = rawLabeledValues.value.find(item => item.value === val);\n        return {\n          value: val,\n          label: targetItem === null || targetItem === void 0 ? void 0 : targetItem.label\n        };\n      });\n      const rawDisplayValues = convert2LabelValues(labeledValues);\n      const firstVal = rawDisplayValues[0];\n      if (!mergedMultiple.value && firstVal && isNil(firstVal.value) && isNil(firstVal.label)) {\n        return [];\n      }\n      return rawDisplayValues.map(item => {\n        var _a;\n        return _extends(_extends({}, item), {\n          label: (_a = item.label) !== null && _a !== void 0 ? _a : item.value\n        });\n      });\n    });\n    const [cachedDisplayValues] = useCache(displayValues);\n    // =========================== Change ===========================\n    const triggerChange = (newRawValues, extra, source) => {\n      const labeledValues = convert2LabelValues(newRawValues);\n      setInternalValue(labeledValues);\n      // Clean up if needed\n      if (props.autoClearSearchValue) {\n        setSearchValue('');\n      }\n      // Generate rest parameters is costly, so only do it when necessary\n      if (props.onChange) {\n        let eventValues = newRawValues;\n        if (treeConduction.value) {\n          const formattedKeyList = formatStrategyValues(newRawValues, props.showCheckedStrategy, keyEntities.value, mergedFieldNames.value);\n          eventValues = formattedKeyList.map(key => {\n            const entity = valueEntities.value.get(key);\n            return entity ? entity.node[mergedFieldNames.value.value] : key;\n          });\n        }\n        const {\n          triggerValue,\n          selected\n        } = extra || {\n          triggerValue: undefined,\n          selected: undefined\n        };\n        let returnRawValues = eventValues;\n        // We need fill half check back\n        if (props.treeCheckStrictly) {\n          const halfValues = rawHalfLabeledValues.value.filter(item => !eventValues.includes(item.value));\n          returnRawValues = [...returnRawValues, ...halfValues];\n        }\n        const returnLabeledValues = convert2LabelValues(returnRawValues);\n        const additionalInfo = {\n          // [Legacy] Always return as array contains label & value\n          preValue: rawLabeledValues.value,\n          triggerValue\n        };\n        // [Legacy] Fill legacy data if user query.\n        // This is expansive that we only fill when user query\n        // https://github.com/react-component/tree-select/blob/fe33eb7c27830c9ac70cd1fdb1ebbe7bc679c16a/src/Select.jsx\n        let showPosition = true;\n        if (props.treeCheckStrictly || source === 'selection' && !selected) {\n          showPosition = false;\n        }\n        fillAdditionalInfo(additionalInfo, triggerValue, newRawValues, mergedTreeData.value, showPosition, mergedFieldNames.value);\n        if (mergedCheckable.value) {\n          additionalInfo.checked = selected;\n        } else {\n          additionalInfo.selected = selected;\n        }\n        const returnValues = mergedLabelInValue.value ? returnLabeledValues : returnLabeledValues.map(item => item.value);\n        props.onChange(mergedMultiple.value ? returnValues : returnValues[0], mergedLabelInValue.value ? null : returnLabeledValues.map(item => item.label), additionalInfo);\n      }\n    };\n    // ========================== Options ===========================\n    /** Trigger by option list */\n    const onOptionSelect = (selectedKey, _ref2) => {\n      let {\n        selected,\n        source\n      } = _ref2;\n      var _a, _b, _c;\n      const keyEntitiesValue = toRaw(keyEntities.value);\n      const valueEntitiesValue = toRaw(valueEntities.value);\n      const entity = keyEntitiesValue[selectedKey];\n      const node = entity === null || entity === void 0 ? void 0 : entity.node;\n      const selectedValue = (_a = node === null || node === void 0 ? void 0 : node[mergedFieldNames.value.value]) !== null && _a !== void 0 ? _a : selectedKey;\n      // Never be falsy but keep it safe\n      if (!mergedMultiple.value) {\n        // Single mode always set value\n        triggerChange([selectedValue], {\n          selected: true,\n          triggerValue: selectedValue\n        }, 'option');\n      } else {\n        let newRawValues = selected ? [...rawValues.value, selectedValue] : rawCheckedValues.value.filter(v => v !== selectedValue);\n        // Add keys if tree conduction\n        if (treeConduction.value) {\n          // Should keep missing values\n          const {\n            missingRawValues,\n            existRawValues\n          } = splitRawValues(newRawValues);\n          const keyList = existRawValues.map(val => valueEntitiesValue.get(val).key);\n          // Conduction by selected or not\n          let checkedKeys;\n          if (selected) {\n            ({\n              checkedKeys\n            } = conductCheck(keyList, true, keyEntitiesValue, maxLevel.value, levelEntities.value));\n          } else {\n            ({\n              checkedKeys\n            } = conductCheck(keyList, {\n              checked: false,\n              halfCheckedKeys: rawHalfCheckedValues.value\n            }, keyEntitiesValue, maxLevel.value, levelEntities.value));\n          }\n          // Fill back of keys\n          newRawValues = [...missingRawValues, ...checkedKeys.map(key => keyEntitiesValue[key].node[mergedFieldNames.value.value])];\n        }\n        triggerChange(newRawValues, {\n          selected,\n          triggerValue: selectedValue\n        }, source || 'option');\n      }\n      // Trigger select event\n      if (selected || !mergedMultiple.value) {\n        (_b = props.onSelect) === null || _b === void 0 ? void 0 : _b.call(props, selectedValue, fillLegacyProps(node));\n      } else {\n        (_c = props.onDeselect) === null || _c === void 0 ? void 0 : _c.call(props, selectedValue, fillLegacyProps(node));\n      }\n    };\n    // ========================== Dropdown ==========================\n    const onInternalDropdownVisibleChange = open => {\n      if (props.onDropdownVisibleChange) {\n        const legacyParam = {};\n        Object.defineProperty(legacyParam, 'documentClickClose', {\n          get() {\n            warning(false, 'Second param of `onDropdownVisibleChange` has been removed.');\n            return false;\n          }\n        });\n        props.onDropdownVisibleChange(open, legacyParam);\n      }\n    };\n    // ====================== Display Change ========================\n    const onDisplayValuesChange = (newValues, info) => {\n      const newRawValues = newValues.map(item => item.value);\n      if (info.type === 'clear') {\n        triggerChange(newRawValues, {}, 'selection');\n        return;\n      }\n      // TreeSelect only have multiple mode which means display change only has remove\n      if (info.values.length) {\n        onOptionSelect(info.values[0].value, {\n          selected: false,\n          source: 'selection'\n        });\n      }\n    };\n    const {\n      treeNodeFilterProp,\n      // Data\n      loadData,\n      treeLoadedKeys,\n      onTreeLoad,\n      // Expanded\n      treeDefaultExpandAll,\n      treeExpandedKeys,\n      treeDefaultExpandedKeys,\n      onTreeExpand,\n      // Options\n      virtual,\n      listHeight,\n      listItemHeight,\n      // Tree\n      treeLine,\n      treeIcon,\n      showTreeIcon,\n      switcherIcon,\n      treeMotion,\n      customSlots,\n      dropdownMatchSelectWidth,\n      treeExpandAction\n    } = toRefs(props);\n    useProvideLegacySelectContext(toReactive({\n      checkable: mergedCheckable,\n      loadData,\n      treeLoadedKeys,\n      onTreeLoad,\n      checkedKeys: rawCheckedValues,\n      halfCheckedKeys: rawHalfCheckedValues,\n      treeDefaultExpandAll,\n      treeExpandedKeys,\n      treeDefaultExpandedKeys,\n      onTreeExpand,\n      treeIcon,\n      treeMotion,\n      showTreeIcon,\n      switcherIcon,\n      treeLine,\n      treeNodeFilterProp,\n      keyEntities,\n      customSlots\n    }));\n    useProvideSelectContext(toReactive({\n      virtual,\n      listHeight,\n      listItemHeight,\n      treeData: filteredTreeData,\n      fieldNames: mergedFieldNames,\n      onSelect: onOptionSelect,\n      dropdownMatchSelectWidth,\n      treeExpandAction\n    }));\n    const selectRef = ref();\n    expose({\n      focus() {\n        var _a;\n        (_a = selectRef.value) === null || _a === void 0 ? void 0 : _a.focus();\n      },\n      blur() {\n        var _a;\n        (_a = selectRef.value) === null || _a === void 0 ? void 0 : _a.blur();\n      },\n      scrollTo(arg) {\n        var _a;\n        (_a = selectRef.value) === null || _a === void 0 ? void 0 : _a.scrollTo(arg);\n      }\n    });\n    return () => {\n      var _a;\n      const restProps = omit(props, ['id', 'prefixCls', 'customSlots',\n      // Value\n      'value', 'defaultValue', 'onChange', 'onSelect', 'onDeselect',\n      // Search\n      'searchValue', 'inputValue', 'onSearch', 'autoClearSearchValue', 'filterTreeNode', 'treeNodeFilterProp',\n      // Selector\n      'showCheckedStrategy', 'treeNodeLabelProp',\n      //  Mode\n      'multiple', 'treeCheckable', 'treeCheckStrictly', 'labelInValue',\n      // FieldNames\n      'fieldNames',\n      // Data\n      'treeDataSimpleMode', 'treeData', 'children', 'loadData', 'treeLoadedKeys', 'onTreeLoad',\n      // Expanded\n      'treeDefaultExpandAll', 'treeExpandedKeys', 'treeDefaultExpandedKeys', 'onTreeExpand',\n      // Options\n      'virtual', 'listHeight', 'listItemHeight', 'onDropdownVisibleChange',\n      // Tree\n      'treeLine', 'treeIcon', 'showTreeIcon', 'switcherIcon', 'treeMotion']);\n      return _createVNode(BaseSelect, _objectSpread(_objectSpread(_objectSpread({\n        \"ref\": selectRef\n      }, attrs), restProps), {}, {\n        \"id\": mergedId,\n        \"prefixCls\": props.prefixCls,\n        \"mode\": mergedMultiple.value ? 'multiple' : undefined,\n        \"displayValues\": cachedDisplayValues.value,\n        \"onDisplayValuesChange\": onDisplayValuesChange,\n        \"searchValue\": mergedSearchValue.value,\n        \"onSearch\": onInternalSearch,\n        \"OptionList\": OptionList,\n        \"emptyOptions\": !mergedTreeData.value.length,\n        \"onDropdownVisibleChange\": onInternalDropdownVisibleChange,\n        \"tagRender\": props.tagRender || slots.tagRender,\n        \"dropdownMatchSelectWidth\": (_a = props.dropdownMatchSelectWidth) !== null && _a !== void 0 ? _a : true\n      }), slots);\n    };\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}