{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { createVNode as _createVNode } from \"vue\";\n/**\n * Cursor rule:\n * 1. Only `showSearch` enabled\n * 2. Only `open` is `true`\n * 3. When typing, set `open` to `true` which hit rule of 2\n *\n * Accessibility:\n * - https://www.w3.org/TR/wai-aria-practices/examples/combobox/aria1.1pattern/listbox-combo.html\n */\nimport KeyCode from '../../_util/KeyCode';\nimport MultipleSelector from './MultipleSelector';\nimport SingleSelector from './SingleSelector';\nimport { isValidateOpenKey } from '../utils/keyUtil';\nimport useLock from '../hooks/useLock';\nimport { defineComponent } from 'vue';\nimport createRef from '../../_util/createRef';\nimport PropTypes from '../../_util/vue-types';\nconst Selector = defineComponent({\n  name: 'Selector',\n  inheritAttrs: false,\n  props: {\n    id: String,\n    prefixCls: String,\n    showSearch: {\n      type: Boolean,\n      default: undefined\n    },\n    open: {\n      type: Boolean,\n      default: undefined\n    },\n    /** Display in the Selector value, it's not same as `value` prop */\n    values: PropTypes.array,\n    multiple: {\n      type: Boolean,\n      default: undefined\n    },\n    mode: String,\n    searchValue: String,\n    activeValue: String,\n    inputElement: PropTypes.any,\n    autofocus: {\n      type: Boolean,\n      default: undefined\n    },\n    activeDescendantId: String,\n    tabindex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    disabled: {\n      type: Boolean,\n      default: undefined\n    },\n    placeholder: PropTypes.any,\n    removeIcon: PropTypes.any,\n    // Tags\n    maxTagCount: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    maxTagTextLength: Number,\n    maxTagPlaceholder: PropTypes.any,\n    tagRender: Function,\n    optionLabelRender: Function,\n    /** Check if `tokenSeparators` contains `\\n` or `\\r\\n` */\n    tokenWithEnter: {\n      type: Boolean,\n      default: undefined\n    },\n    // Motion\n    choiceTransitionName: String,\n    onToggleOpen: {\n      type: Function\n    },\n    /** `onSearch` returns go next step boolean to check if need do toggle open */\n    onSearch: Function,\n    onSearchSubmit: Function,\n    onRemove: Function,\n    onInputKeyDown: {\n      type: Function\n    },\n    /**\n     * @private get real dom for trigger align.\n     * This may be removed after React provides replacement of `findDOMNode`\n     */\n    domRef: Function\n  },\n  setup(props, _ref) {\n    let {\n      expose\n    } = _ref;\n    const inputRef = createRef();\n    let compositionStatus = false;\n    // ====================== Input ======================\n    const [getInputMouseDown, setInputMouseDown] = useLock(0);\n    const onInternalInputKeyDown = event => {\n      const {\n        which\n      } = event;\n      if (which === KeyCode.UP || which === KeyCode.DOWN) {\n        event.preventDefault();\n      }\n      if (props.onInputKeyDown) {\n        props.onInputKeyDown(event);\n      }\n      if (which === KeyCode.ENTER && props.mode === 'tags' && !compositionStatus && !props.open) {\n        // When menu isn't open, OptionList won't trigger a value change\n        // So when enter is pressed, the tag's input value should be emitted here to let selector know\n        props.onSearchSubmit(event.target.value);\n      }\n      if (isValidateOpenKey(which)) {\n        props.onToggleOpen(true);\n      }\n    };\n    /**\n     * We can not use `findDOMNode` sine it will get warning,\n     * have to use timer to check if is input element.\n     */\n    const onInternalInputMouseDown = () => {\n      setInputMouseDown(true);\n    };\n    // When paste come, ignore next onChange\n    let pastedText = null;\n    const triggerOnSearch = value => {\n      if (props.onSearch(value, true, compositionStatus) !== false) {\n        props.onToggleOpen(true);\n      }\n    };\n    const onInputCompositionStart = () => {\n      compositionStatus = true;\n    };\n    const onInputCompositionEnd = e => {\n      compositionStatus = false;\n      // Trigger search again to support `tokenSeparators` with typewriting\n      if (props.mode !== 'combobox') {\n        triggerOnSearch(e.target.value);\n      }\n    };\n    const onInputChange = event => {\n      let {\n        target: {\n          value\n        }\n      } = event;\n      // Pasted text should replace back to origin content\n      if (props.tokenWithEnter && pastedText && /[\\r\\n]/.test(pastedText)) {\n        // CRLF will be treated as a single space for input element\n        const replacedText = pastedText.replace(/[\\r\\n]+$/, '').replace(/\\r\\n/g, ' ').replace(/[\\r\\n]/g, ' ');\n        value = value.replace(replacedText, pastedText);\n      }\n      pastedText = null;\n      triggerOnSearch(value);\n    };\n    const onInputPaste = e => {\n      const {\n        clipboardData\n      } = e;\n      const value = clipboardData.getData('text');\n      pastedText = value;\n    };\n    const onClick = _ref2 => {\n      let {\n        target\n      } = _ref2;\n      if (target !== inputRef.current) {\n        // Should focus input if click the selector\n        const isIE = document.body.style.msTouchAction !== undefined;\n        if (isIE) {\n          setTimeout(() => {\n            inputRef.current.focus();\n          });\n        } else {\n          inputRef.current.focus();\n        }\n      }\n    };\n    const onMousedown = event => {\n      const inputMouseDown = getInputMouseDown();\n      if (event.target !== inputRef.current && !inputMouseDown) {\n        event.preventDefault();\n      }\n      if (props.mode !== 'combobox' && (!props.showSearch || !inputMouseDown) || !props.open) {\n        if (props.open) {\n          props.onSearch('', true, false);\n        }\n        props.onToggleOpen();\n      }\n    };\n    expose({\n      focus: () => {\n        inputRef.current.focus();\n      },\n      blur: () => {\n        inputRef.current.blur();\n      }\n    });\n    return () => {\n      const {\n        prefixCls,\n        domRef,\n        mode\n      } = props;\n      const sharedProps = {\n        inputRef,\n        onInputKeyDown: onInternalInputKeyDown,\n        onInputMouseDown: onInternalInputMouseDown,\n        onInputChange,\n        onInputPaste,\n        onInputCompositionStart,\n        onInputCompositionEnd\n      };\n      const selectNode = mode === 'multiple' || mode === 'tags' ? _createVNode(MultipleSelector, _objectSpread(_objectSpread({}, props), sharedProps), null) : _createVNode(SingleSelector, _objectSpread(_objectSpread({}, props), sharedProps), null);\n      return _createVNode(\"div\", {\n        \"ref\": domRef,\n        \"class\": `${prefixCls}-selector`,\n        \"onClick\": onClick,\n        \"onMousedown\": onMousedown\n      }, [selectNode]);\n    };\n  }\n});\nexport default Selector;","map":{"version":3,"names":["_objectSpread","createVNode","_createVNode","KeyCode","MultipleSelector","SingleSelector","isValidateOpenKey","useLock","defineComponent","createRef","PropTypes","Selector","name","inheritAttrs","props","id","String","prefixCls","showSearch","type","Boolean","default","undefined","open","values","array","multiple","mode","searchValue","activeValue","inputElement","any","autofocus","activeDescendantId","tabindex","oneOfType","number","string","disabled","placeholder","removeIcon","maxTagCount","maxTagTextLength","Number","maxTagPlaceholder","tagRender","Function","optionLabelRender","tokenWithEnter","choiceTransitionName","onToggleOpen","onSearch","onSearchSubmit","onRemove","onInputKeyDown","domRef","setup","_ref","expose","inputRef","compositionStatus","getInputMouseDown","setInputMouseDown","onInternalInputKeyDown","event","which","UP","DOWN","preventDefault","ENTER","target","value","onInternalInputMouseDown","pastedText","triggerOnSearch","onInputCompositionStart","onInputCompositionEnd","e","onInputChange","test","replacedText","replace","onInputPaste","clipboardData","getData","onClick","_ref2","current","isIE","document","body","style","msTouchAction","setTimeout","focus","onMousedown","inputMouseDown","blur","sharedProps","onInputMouseDown","selectNode"],"sources":["/Users/lpl/工作/Teamsupport/develop_help/node_modules/ant-design-vue/es/vc-select/Selector/index.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { createVNode as _createVNode } from \"vue\";\n/**\n * Cursor rule:\n * 1. Only `showSearch` enabled\n * 2. Only `open` is `true`\n * 3. When typing, set `open` to `true` which hit rule of 2\n *\n * Accessibility:\n * - https://www.w3.org/TR/wai-aria-practices/examples/combobox/aria1.1pattern/listbox-combo.html\n */\nimport KeyCode from '../../_util/KeyCode';\nimport MultipleSelector from './MultipleSelector';\nimport SingleSelector from './SingleSelector';\nimport { isValidateOpenKey } from '../utils/keyUtil';\nimport useLock from '../hooks/useLock';\nimport { defineComponent } from 'vue';\nimport createRef from '../../_util/createRef';\nimport PropTypes from '../../_util/vue-types';\nconst Selector = defineComponent({\n  name: 'Selector',\n  inheritAttrs: false,\n  props: {\n    id: String,\n    prefixCls: String,\n    showSearch: {\n      type: Boolean,\n      default: undefined\n    },\n    open: {\n      type: Boolean,\n      default: undefined\n    },\n    /** Display in the Selector value, it's not same as `value` prop */\n    values: PropTypes.array,\n    multiple: {\n      type: Boolean,\n      default: undefined\n    },\n    mode: String,\n    searchValue: String,\n    activeValue: String,\n    inputElement: PropTypes.any,\n    autofocus: {\n      type: Boolean,\n      default: undefined\n    },\n    activeDescendantId: String,\n    tabindex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    disabled: {\n      type: Boolean,\n      default: undefined\n    },\n    placeholder: PropTypes.any,\n    removeIcon: PropTypes.any,\n    // Tags\n    maxTagCount: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    maxTagTextLength: Number,\n    maxTagPlaceholder: PropTypes.any,\n    tagRender: Function,\n    optionLabelRender: Function,\n    /** Check if `tokenSeparators` contains `\\n` or `\\r\\n` */\n    tokenWithEnter: {\n      type: Boolean,\n      default: undefined\n    },\n    // Motion\n    choiceTransitionName: String,\n    onToggleOpen: {\n      type: Function\n    },\n    /** `onSearch` returns go next step boolean to check if need do toggle open */\n    onSearch: Function,\n    onSearchSubmit: Function,\n    onRemove: Function,\n    onInputKeyDown: {\n      type: Function\n    },\n    /**\n     * @private get real dom for trigger align.\n     * This may be removed after React provides replacement of `findDOMNode`\n     */\n    domRef: Function\n  },\n  setup(props, _ref) {\n    let {\n      expose\n    } = _ref;\n    const inputRef = createRef();\n    let compositionStatus = false;\n    // ====================== Input ======================\n    const [getInputMouseDown, setInputMouseDown] = useLock(0);\n    const onInternalInputKeyDown = event => {\n      const {\n        which\n      } = event;\n      if (which === KeyCode.UP || which === KeyCode.DOWN) {\n        event.preventDefault();\n      }\n      if (props.onInputKeyDown) {\n        props.onInputKeyDown(event);\n      }\n      if (which === KeyCode.ENTER && props.mode === 'tags' && !compositionStatus && !props.open) {\n        // When menu isn't open, OptionList won't trigger a value change\n        // So when enter is pressed, the tag's input value should be emitted here to let selector know\n        props.onSearchSubmit(event.target.value);\n      }\n      if (isValidateOpenKey(which)) {\n        props.onToggleOpen(true);\n      }\n    };\n    /**\n     * We can not use `findDOMNode` sine it will get warning,\n     * have to use timer to check if is input element.\n     */\n    const onInternalInputMouseDown = () => {\n      setInputMouseDown(true);\n    };\n    // When paste come, ignore next onChange\n    let pastedText = null;\n    const triggerOnSearch = value => {\n      if (props.onSearch(value, true, compositionStatus) !== false) {\n        props.onToggleOpen(true);\n      }\n    };\n    const onInputCompositionStart = () => {\n      compositionStatus = true;\n    };\n    const onInputCompositionEnd = e => {\n      compositionStatus = false;\n      // Trigger search again to support `tokenSeparators` with typewriting\n      if (props.mode !== 'combobox') {\n        triggerOnSearch(e.target.value);\n      }\n    };\n    const onInputChange = event => {\n      let {\n        target: {\n          value\n        }\n      } = event;\n      // Pasted text should replace back to origin content\n      if (props.tokenWithEnter && pastedText && /[\\r\\n]/.test(pastedText)) {\n        // CRLF will be treated as a single space for input element\n        const replacedText = pastedText.replace(/[\\r\\n]+$/, '').replace(/\\r\\n/g, ' ').replace(/[\\r\\n]/g, ' ');\n        value = value.replace(replacedText, pastedText);\n      }\n      pastedText = null;\n      triggerOnSearch(value);\n    };\n    const onInputPaste = e => {\n      const {\n        clipboardData\n      } = e;\n      const value = clipboardData.getData('text');\n      pastedText = value;\n    };\n    const onClick = _ref2 => {\n      let {\n        target\n      } = _ref2;\n      if (target !== inputRef.current) {\n        // Should focus input if click the selector\n        const isIE = document.body.style.msTouchAction !== undefined;\n        if (isIE) {\n          setTimeout(() => {\n            inputRef.current.focus();\n          });\n        } else {\n          inputRef.current.focus();\n        }\n      }\n    };\n    const onMousedown = event => {\n      const inputMouseDown = getInputMouseDown();\n      if (event.target !== inputRef.current && !inputMouseDown) {\n        event.preventDefault();\n      }\n      if (props.mode !== 'combobox' && (!props.showSearch || !inputMouseDown) || !props.open) {\n        if (props.open) {\n          props.onSearch('', true, false);\n        }\n        props.onToggleOpen();\n      }\n    };\n    expose({\n      focus: () => {\n        inputRef.current.focus();\n      },\n      blur: () => {\n        inputRef.current.blur();\n      }\n    });\n    return () => {\n      const {\n        prefixCls,\n        domRef,\n        mode\n      } = props;\n      const sharedProps = {\n        inputRef,\n        onInputKeyDown: onInternalInputKeyDown,\n        onInputMouseDown: onInternalInputMouseDown,\n        onInputChange,\n        onInputPaste,\n        onInputCompositionStart,\n        onInputCompositionEnd\n      };\n      const selectNode = mode === 'multiple' || mode === 'tags' ? _createVNode(MultipleSelector, _objectSpread(_objectSpread({}, props), sharedProps), null) : _createVNode(SingleSelector, _objectSpread(_objectSpread({}, props), sharedProps), null);\n      return _createVNode(\"div\", {\n        \"ref\": domRef,\n        \"class\": `${prefixCls}-selector`,\n        \"onClick\": onClick,\n        \"onMousedown\": onMousedown\n      }, [selectNode]);\n    };\n  }\n});\nexport default Selector;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}