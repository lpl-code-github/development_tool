{"ast":null,"code":"import warning, { noteOnce } from '../../vc-util/warning';\nimport { convertChildrenToData } from './legacyUtil';\nimport { toArray } from './commonUtil';\nimport { isValidElement } from '../../_util/props-util';\nimport { isMultiple } from '../BaseSelect';\nfunction warningProps(props) {\n  const {\n    mode,\n    options,\n    children,\n    backfill,\n    allowClear,\n    placeholder,\n    getInputElement,\n    showSearch,\n    onSearch,\n    defaultOpen,\n    autofocus,\n    labelInValue,\n    value,\n    inputValue,\n    optionLabelProp\n  } = props;\n  const multiple = isMultiple(mode);\n  const mergedShowSearch = showSearch !== undefined ? showSearch : multiple || mode === 'combobox';\n  const mergedOptions = options || convertChildrenToData(children);\n  // `tags` should not set option as disabled\n  warning(mode !== 'tags' || mergedOptions.every(opt => !opt.disabled), 'Please avoid setting option to disabled in tags mode since user can always type text as tag.');\n  // `combobox` should not use `optionLabelProp`\n  warning(mode !== 'combobox' || !optionLabelProp, '`combobox` mode not support `optionLabelProp`. Please set `value` on Option directly.');\n  // Only `combobox` support `backfill`\n  warning(mode === 'combobox' || !backfill, '`backfill` only works with `combobox` mode.');\n  // Only `combobox` support `getInputElement`\n  warning(mode === 'combobox' || !getInputElement, '`getInputElement` only work with `combobox` mode.');\n  // Customize `getInputElement` should not use `allowClear` & `placeholder`\n  noteOnce(mode !== 'combobox' || !getInputElement || !allowClear || !placeholder, 'Customize `getInputElement` should customize clear and placeholder logic instead of configuring `allowClear` and `placeholder`.');\n  // `onSearch` should use in `combobox` or `showSearch`\n  if (onSearch && !mergedShowSearch && mode !== 'combobox' && mode !== 'tags') {\n    warning(false, '`onSearch` should work with `showSearch` instead of use alone.');\n  }\n  noteOnce(!defaultOpen || autofocus, '`defaultOpen` makes Select open without focus which means it will not close by click outside. You can set `autofocus` if needed.');\n  if (value !== undefined && value !== null) {\n    const values = toArray(value);\n    warning(!labelInValue || values.every(val => typeof val === 'object' && ('key' in val || 'value' in val)), '`value` should in shape of `{ value: string | number, label?: any }` when you set `labelInValue` to `true`');\n    warning(!multiple || Array.isArray(value), '`value` should be array when `mode` is `multiple` or `tags`');\n  }\n  // Syntactic sugar should use correct children type\n  if (children) {\n    let invalidateChildType = null;\n    children.some(node => {\n      var _a;\n      if (!isValidElement(node) || !node.type) {\n        return false;\n      }\n      const {\n        type\n      } = node;\n      if (type.isSelectOption) {\n        return false;\n      }\n      if (type.isSelectOptGroup) {\n        const childs = ((_a = node.children) === null || _a === void 0 ? void 0 : _a.default()) || [];\n        const allChildrenValid = childs.every(subNode => {\n          if (!isValidElement(subNode) || !node.type || subNode.type.isSelectOption) {\n            return true;\n          }\n          invalidateChildType = subNode.type;\n          return false;\n        });\n        if (allChildrenValid) {\n          return false;\n        }\n        return true;\n      }\n      invalidateChildType = type;\n      return true;\n    });\n    if (invalidateChildType) {\n      warning(false, `\\`children\\` should be \\`Select.Option\\` or \\`Select.OptGroup\\` instead of \\`${invalidateChildType.displayName || invalidateChildType.name || invalidateChildType}\\`.`);\n    }\n    warning(inputValue === undefined, '`inputValue` is deprecated, please use `searchValue` instead.');\n  }\n}\nexport default warningProps;","map":{"version":3,"names":["warning","noteOnce","convertChildrenToData","toArray","isValidElement","isMultiple","warningProps","props","mode","options","children","backfill","allowClear","placeholder","getInputElement","showSearch","onSearch","defaultOpen","autofocus","labelInValue","value","inputValue","optionLabelProp","multiple","mergedShowSearch","undefined","mergedOptions","every","opt","disabled","values","val","Array","isArray","invalidateChildType","some","node","_a","type","isSelectOption","isSelectOptGroup","childs","default","allChildrenValid","subNode","displayName","name"],"sources":["/Users/lpl/工作/Teamsupport/develop_help/node_modules/ant-design-vue/es/vc-select/utils/warningPropsUtil.js"],"sourcesContent":["import warning, { noteOnce } from '../../vc-util/warning';\nimport { convertChildrenToData } from './legacyUtil';\nimport { toArray } from './commonUtil';\nimport { isValidElement } from '../../_util/props-util';\nimport { isMultiple } from '../BaseSelect';\nfunction warningProps(props) {\n  const {\n    mode,\n    options,\n    children,\n    backfill,\n    allowClear,\n    placeholder,\n    getInputElement,\n    showSearch,\n    onSearch,\n    defaultOpen,\n    autofocus,\n    labelInValue,\n    value,\n    inputValue,\n    optionLabelProp\n  } = props;\n  const multiple = isMultiple(mode);\n  const mergedShowSearch = showSearch !== undefined ? showSearch : multiple || mode === 'combobox';\n  const mergedOptions = options || convertChildrenToData(children);\n  // `tags` should not set option as disabled\n  warning(mode !== 'tags' || mergedOptions.every(opt => !opt.disabled), 'Please avoid setting option to disabled in tags mode since user can always type text as tag.');\n  // `combobox` should not use `optionLabelProp`\n  warning(mode !== 'combobox' || !optionLabelProp, '`combobox` mode not support `optionLabelProp`. Please set `value` on Option directly.');\n  // Only `combobox` support `backfill`\n  warning(mode === 'combobox' || !backfill, '`backfill` only works with `combobox` mode.');\n  // Only `combobox` support `getInputElement`\n  warning(mode === 'combobox' || !getInputElement, '`getInputElement` only work with `combobox` mode.');\n  // Customize `getInputElement` should not use `allowClear` & `placeholder`\n  noteOnce(mode !== 'combobox' || !getInputElement || !allowClear || !placeholder, 'Customize `getInputElement` should customize clear and placeholder logic instead of configuring `allowClear` and `placeholder`.');\n  // `onSearch` should use in `combobox` or `showSearch`\n  if (onSearch && !mergedShowSearch && mode !== 'combobox' && mode !== 'tags') {\n    warning(false, '`onSearch` should work with `showSearch` instead of use alone.');\n  }\n  noteOnce(!defaultOpen || autofocus, '`defaultOpen` makes Select open without focus which means it will not close by click outside. You can set `autofocus` if needed.');\n  if (value !== undefined && value !== null) {\n    const values = toArray(value);\n    warning(!labelInValue || values.every(val => typeof val === 'object' && ('key' in val || 'value' in val)), '`value` should in shape of `{ value: string | number, label?: any }` when you set `labelInValue` to `true`');\n    warning(!multiple || Array.isArray(value), '`value` should be array when `mode` is `multiple` or `tags`');\n  }\n  // Syntactic sugar should use correct children type\n  if (children) {\n    let invalidateChildType = null;\n    children.some(node => {\n      var _a;\n      if (!isValidElement(node) || !node.type) {\n        return false;\n      }\n      const {\n        type\n      } = node;\n      if (type.isSelectOption) {\n        return false;\n      }\n      if (type.isSelectOptGroup) {\n        const childs = ((_a = node.children) === null || _a === void 0 ? void 0 : _a.default()) || [];\n        const allChildrenValid = childs.every(subNode => {\n          if (!isValidElement(subNode) || !node.type || subNode.type.isSelectOption) {\n            return true;\n          }\n          invalidateChildType = subNode.type;\n          return false;\n        });\n        if (allChildrenValid) {\n          return false;\n        }\n        return true;\n      }\n      invalidateChildType = type;\n      return true;\n    });\n    if (invalidateChildType) {\n      warning(false, `\\`children\\` should be \\`Select.Option\\` or \\`Select.OptGroup\\` instead of \\`${invalidateChildType.displayName || invalidateChildType.name || invalidateChildType}\\`.`);\n    }\n    warning(inputValue === undefined, '`inputValue` is deprecated, please use `searchValue` instead.');\n  }\n}\nexport default warningProps;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}