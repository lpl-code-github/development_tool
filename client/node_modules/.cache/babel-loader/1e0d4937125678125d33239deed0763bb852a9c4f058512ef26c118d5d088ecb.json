{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode, resolveDirective as _resolveDirective } from \"vue\";\n/**\n * To match accessibility requirement, we always provide an input in the component.\n * Other element will not set `tabindex` to avoid `onBlur` sequence problem.\n * For focused select, we set `aria-live=\"polite\"` to update the accessibility content.\n *\n * ref:\n * - keyboard: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/listbox_role#Keyboard_interactions\n *\n * New api:\n * - listHeight\n * - listItemHeight\n * - component\n *\n * Remove deprecated api:\n * - multiple\n * - tags\n * - combobox\n * - firstActiveValue\n * - dropdownMenuStyle\n * - openClassName (Not list in api)\n *\n * Update:\n * - `backfill` only support `combobox` mode\n * - `combobox` mode not support `labelInValue` since it's meaningless\n * - `getInputElement` only support `combobox` mode\n * - `onChange` return OptionData instead of ReactNode\n * - `filterOption` `onChange` `onSelect` accept OptionData instead of ReactNode\n * - `combobox` mode trigger `onChange` will get `undefined` if no `value` match in Option\n * - `combobox` mode not support `optionLabelProp`\n */\nimport BaseSelect, { baseSelectPropsWithoutPrivate, isMultiple } from './BaseSelect';\nimport OptionList from './OptionList';\nimport useOptions from './hooks/useOptions';\nimport { useProvideSelectProps } from './SelectContext';\nimport useId from './hooks/useId';\nimport { fillFieldNames, flattenOptions, injectPropsWithOption } from './utils/valueUtil';\nimport warningProps from './utils/warningPropsUtil';\nimport { toArray } from './utils/commonUtil';\nimport useFilterOptions from './hooks/useFilterOptions';\nimport useCache from './hooks/useCache';\nimport { computed, defineComponent, ref, shallowRef, toRef, watchEffect } from 'vue';\nimport PropTypes from '../_util/vue-types';\nimport { initDefaultProps } from '../_util/props-util';\nimport useMergedState from '../_util/hooks/useMergedState';\nimport useState from '../_util/hooks/useState';\nimport { toReactive } from '../_util/toReactive';\nimport omit from '../_util/omit';\nconst OMIT_DOM_PROPS = ['inputValue'];\nexport function selectProps() {\n  return _extends(_extends({}, baseSelectPropsWithoutPrivate()), {\n    prefixCls: String,\n    id: String,\n    backfill: {\n      type: Boolean,\n      default: undefined\n    },\n    // >>> Field Names\n    fieldNames: Object,\n    // >>> Search\n    /** @deprecated Use `searchValue` instead */\n    inputValue: String,\n    searchValue: String,\n    onSearch: Function,\n    autoClearSearchValue: {\n      type: Boolean,\n      default: undefined\n    },\n    // >>> Select\n    onSelect: Function,\n    onDeselect: Function,\n    // >>> Options\n    /**\n     * In Select, `false` means do nothing.\n     * In TreeSelect, `false` will highlight match item.\n     * It's by design.\n     */\n    filterOption: {\n      type: [Boolean, Function],\n      default: undefined\n    },\n    filterSort: Function,\n    optionFilterProp: String,\n    optionLabelProp: String,\n    options: Array,\n    defaultActiveFirstOption: {\n      type: Boolean,\n      default: undefined\n    },\n    virtual: {\n      type: Boolean,\n      default: undefined\n    },\n    listHeight: Number,\n    listItemHeight: Number,\n    // >>> Icon\n    menuItemSelectedIcon: PropTypes.any,\n    mode: String,\n    labelInValue: {\n      type: Boolean,\n      default: undefined\n    },\n    value: PropTypes.any,\n    defaultValue: PropTypes.any,\n    onChange: Function,\n    children: Array\n  });\n}\nfunction isRawValue(value) {\n  return !value || typeof value !== 'object';\n}\nexport default defineComponent({\n  compatConfig: {\n    MODE: 3\n  },\n  name: 'Select',\n  inheritAttrs: false,\n  props: initDefaultProps(selectProps(), {\n    prefixCls: 'vc-select',\n    autoClearSearchValue: true,\n    listHeight: 200,\n    listItemHeight: 20,\n    dropdownMatchSelectWidth: true\n  }),\n  setup(props, _ref) {\n    let {\n      expose,\n      attrs,\n      slots\n    } = _ref;\n    const mergedId = useId(toRef(props, 'id'));\n    const multiple = computed(() => isMultiple(props.mode));\n    const childrenAsData = computed(() => !!(!props.options && props.children));\n    const mergedFilterOption = computed(() => {\n      if (props.filterOption === undefined && props.mode === 'combobox') {\n        return false;\n      }\n      return props.filterOption;\n    });\n    // ========================= FieldNames =========================\n    const mergedFieldNames = computed(() => fillFieldNames(props.fieldNames, childrenAsData.value));\n    // =========================== Search ===========================\n    const [mergedSearchValue, setSearchValue] = useMergedState('', {\n      value: computed(() => props.searchValue !== undefined ? props.searchValue : props.inputValue),\n      postState: search => search || ''\n    });\n    // =========================== Option ===========================\n    const parsedOptions = useOptions(toRef(props, 'options'), toRef(props, 'children'), mergedFieldNames);\n    const {\n      valueOptions,\n      labelOptions,\n      options: mergedOptions\n    } = parsedOptions;\n    // ========================= Wrap Value =========================\n    const convert2LabelValues = draftValues => {\n      // Convert to array\n      const valueList = toArray(draftValues);\n      // Convert to labelInValue type\n      return valueList.map(val => {\n        var _a, _b;\n        let rawValue;\n        let rawLabel;\n        let rawKey;\n        let rawDisabled;\n        // Fill label & value\n        if (isRawValue(val)) {\n          rawValue = val;\n        } else {\n          rawKey = val.key;\n          rawLabel = val.label;\n          rawValue = (_a = val.value) !== null && _a !== void 0 ? _a : rawKey;\n        }\n        const option = valueOptions.value.get(rawValue);\n        if (option) {\n          // Fill missing props\n          if (rawLabel === undefined) rawLabel = option === null || option === void 0 ? void 0 : option[props.optionLabelProp || mergedFieldNames.value.label];\n          if (rawKey === undefined) rawKey = (_b = option === null || option === void 0 ? void 0 : option.key) !== null && _b !== void 0 ? _b : rawValue;\n          rawDisabled = option === null || option === void 0 ? void 0 : option.disabled;\n          // Warning if label not same as provided\n          // if (process.env.NODE_ENV !== 'production' && !isRawValue(val)) {\n          //   const optionLabel = option?.[mergedFieldNames.value.label];\n          //   if (optionLabel !== undefined && optionLabel !== rawLabel) {\n          //     warning(false, '`label` of `value` is not same as `label` in Select options.');\n          //   }\n          // }\n        }\n\n        return {\n          label: rawLabel,\n          value: rawValue,\n          key: rawKey,\n          disabled: rawDisabled,\n          option\n        };\n      });\n    };\n    // =========================== Values ===========================\n    const [internalValue, setInternalValue] = useMergedState(props.defaultValue, {\n      value: toRef(props, 'value')\n    });\n    // Merged value with LabelValueType\n    const rawLabeledValues = computed(() => {\n      var _a;\n      const values = convert2LabelValues(internalValue.value);\n      // combobox no need save value when it's empty\n      if (props.mode === 'combobox' && !((_a = values[0]) === null || _a === void 0 ? void 0 : _a.value)) {\n        return [];\n      }\n      return values;\n    });\n    // Fill label with cache to avoid option remove\n    const [mergedValues, getMixedOption] = useCache(rawLabeledValues, valueOptions);\n    const displayValues = computed(() => {\n      // `null` need show as placeholder instead\n      // https://github.com/ant-design/ant-design/issues/25057\n      if (!props.mode && mergedValues.value.length === 1) {\n        const firstValue = mergedValues.value[0];\n        if (firstValue.value === null && (firstValue.label === null || firstValue.label === undefined)) {\n          return [];\n        }\n      }\n      return mergedValues.value.map(item => {\n        var _a;\n        return _extends(_extends({}, item), {\n          label: (_a = typeof item.label === 'function' ? item.label() : item.label) !== null && _a !== void 0 ? _a : item.value\n        });\n      });\n    });\n    /** Convert `displayValues` to raw value type set */\n    const rawValues = computed(() => new Set(mergedValues.value.map(val => val.value)));\n    watchEffect(() => {\n      var _a;\n      if (props.mode === 'combobox') {\n        const strValue = (_a = mergedValues.value[0]) === null || _a === void 0 ? void 0 : _a.value;\n        if (strValue !== undefined && strValue !== null) {\n          setSearchValue(String(strValue));\n        }\n      }\n    }, {\n      flush: 'post'\n    });\n    // ======================= Display Option =======================\n    // Create a placeholder item if not exist in `options`\n    const createTagOption = (val, label) => {\n      const mergedLabel = label !== null && label !== void 0 ? label : val;\n      return {\n        [mergedFieldNames.value.value]: val,\n        [mergedFieldNames.value.label]: mergedLabel\n      };\n    };\n    // Fill tag as option if mode is `tags`\n    const filledTagOptions = shallowRef();\n    watchEffect(() => {\n      if (props.mode !== 'tags') {\n        filledTagOptions.value = mergedOptions.value;\n        return;\n      }\n      // >>> Tag mode\n      const cloneOptions = mergedOptions.value.slice();\n      // Check if value exist in options (include new patch item)\n      const existOptions = val => valueOptions.value.has(val);\n      // Fill current value as option\n      [...mergedValues.value].sort((a, b) => a.value < b.value ? -1 : 1).forEach(item => {\n        const val = item.value;\n        if (!existOptions(val)) {\n          cloneOptions.push(createTagOption(val, item.label));\n        }\n      });\n      filledTagOptions.value = cloneOptions;\n    });\n    const filteredOptions = useFilterOptions(filledTagOptions, mergedFieldNames, mergedSearchValue, mergedFilterOption, toRef(props, 'optionFilterProp'));\n    // Fill options with search value if needed\n    const filledSearchOptions = computed(() => {\n      if (props.mode !== 'tags' || !mergedSearchValue.value || filteredOptions.value.some(item => item[props.optionFilterProp || 'value'] === mergedSearchValue.value)) {\n        return filteredOptions.value;\n      }\n      // Fill search value as option\n      return [createTagOption(mergedSearchValue.value), ...filteredOptions.value];\n    });\n    const orderedFilteredOptions = computed(() => {\n      if (!props.filterSort) {\n        return filledSearchOptions.value;\n      }\n      return [...filledSearchOptions.value].sort((a, b) => props.filterSort(a, b));\n    });\n    const displayOptions = computed(() => flattenOptions(orderedFilteredOptions.value, {\n      fieldNames: mergedFieldNames.value,\n      childrenAsData: childrenAsData.value\n    }));\n    // =========================== Change ===========================\n    const triggerChange = values => {\n      const labeledValues = convert2LabelValues(values);\n      setInternalValue(labeledValues);\n      if (props.onChange && (\n      // Trigger event only when value changed\n      labeledValues.length !== mergedValues.value.length || labeledValues.some((newVal, index) => {\n        var _a;\n        return ((_a = mergedValues.value[index]) === null || _a === void 0 ? void 0 : _a.value) !== (newVal === null || newVal === void 0 ? void 0 : newVal.value);\n      }))) {\n        const returnValues = props.labelInValue ? labeledValues.map(v => {\n          return _extends(_extends({}, v), {\n            originLabel: v.label,\n            label: typeof v.label === 'function' ? v.label() : v.label\n          });\n        }) : labeledValues.map(v => v.value);\n        const returnOptions = labeledValues.map(v => injectPropsWithOption(getMixedOption(v.value)));\n        props.onChange(\n        // Value\n        multiple.value ? returnValues : returnValues[0],\n        // Option\n        multiple.value ? returnOptions : returnOptions[0]);\n      }\n    };\n    // ======================= Accessibility ========================\n    const [activeValue, setActiveValue] = useState(null);\n    const [accessibilityIndex, setAccessibilityIndex] = useState(0);\n    const mergedDefaultActiveFirstOption = computed(() => props.defaultActiveFirstOption !== undefined ? props.defaultActiveFirstOption : props.mode !== 'combobox');\n    const onActiveValue = function (active, index) {\n      let {\n        source = 'keyboard'\n      } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      setAccessibilityIndex(index);\n      if (props.backfill && props.mode === 'combobox' && active !== null && source === 'keyboard') {\n        setActiveValue(String(active));\n      }\n    };\n    // ========================= OptionList =========================\n    const triggerSelect = (val, selected) => {\n      const getSelectEnt = () => {\n        var _a;\n        const option = getMixedOption(val);\n        const originLabel = option === null || option === void 0 ? void 0 : option[mergedFieldNames.value.label];\n        return [props.labelInValue ? {\n          label: typeof originLabel === 'function' ? originLabel() : originLabel,\n          originLabel,\n          value: val,\n          key: (_a = option === null || option === void 0 ? void 0 : option.key) !== null && _a !== void 0 ? _a : val\n        } : val, injectPropsWithOption(option)];\n      };\n      if (selected && props.onSelect) {\n        const [wrappedValue, option] = getSelectEnt();\n        props.onSelect(wrappedValue, option);\n      } else if (!selected && props.onDeselect) {\n        const [wrappedValue, option] = getSelectEnt();\n        props.onDeselect(wrappedValue, option);\n      }\n    };\n    // Used for OptionList selection\n    const onInternalSelect = (val, info) => {\n      let cloneValues;\n      // Single mode always trigger select only with option list\n      const mergedSelect = multiple.value ? info.selected : true;\n      if (mergedSelect) {\n        cloneValues = multiple.value ? [...mergedValues.value, val] : [val];\n      } else {\n        cloneValues = mergedValues.value.filter(v => v.value !== val);\n      }\n      triggerChange(cloneValues);\n      triggerSelect(val, mergedSelect);\n      // Clean search value if single or configured\n      if (props.mode === 'combobox') {\n        // setSearchValue(String(val));\n        setActiveValue('');\n      } else if (!multiple.value || props.autoClearSearchValue) {\n        setSearchValue('');\n        setActiveValue('');\n      }\n    };\n    // ======================= Display Change =======================\n    // BaseSelect display values change\n    const onDisplayValuesChange = (nextValues, info) => {\n      triggerChange(nextValues);\n      if (info.type === 'remove' || info.type === 'clear') {\n        info.values.forEach(item => {\n          triggerSelect(item.value, false);\n        });\n      }\n    };\n    // =========================== Search ===========================\n    const onInternalSearch = (searchText, info) => {\n      var _a;\n      setSearchValue(searchText);\n      setActiveValue(null);\n      // [Submit] Tag mode should flush input\n      if (info.source === 'submit') {\n        const formatted = (searchText || '').trim();\n        // prevent empty tags from appearing when you click the Enter button\n        if (formatted) {\n          const newRawValues = Array.from(new Set([...rawValues.value, formatted]));\n          triggerChange(newRawValues);\n          triggerSelect(formatted, true);\n          setSearchValue('');\n        }\n        return;\n      }\n      if (info.source !== 'blur') {\n        if (props.mode === 'combobox') {\n          triggerChange(searchText);\n        }\n        (_a = props.onSearch) === null || _a === void 0 ? void 0 : _a.call(props, searchText);\n      }\n    };\n    const onInternalSearchSplit = words => {\n      let patchValues = words;\n      if (props.mode !== 'tags') {\n        patchValues = words.map(word => {\n          const opt = labelOptions.value.get(word);\n          return opt === null || opt === void 0 ? void 0 : opt.value;\n        }).filter(val => val !== undefined);\n      }\n      const newRawValues = Array.from(new Set([...rawValues.value, ...patchValues]));\n      triggerChange(newRawValues);\n      newRawValues.forEach(newRawValue => {\n        triggerSelect(newRawValue, true);\n      });\n    };\n    const realVirtual = computed(() => props.virtual !== false && props.dropdownMatchSelectWidth !== false);\n    useProvideSelectProps(toReactive(_extends(_extends({}, parsedOptions), {\n      flattenOptions: displayOptions,\n      onActiveValue,\n      defaultActiveFirstOption: mergedDefaultActiveFirstOption,\n      onSelect: onInternalSelect,\n      menuItemSelectedIcon: toRef(props, 'menuItemSelectedIcon'),\n      rawValues,\n      fieldNames: mergedFieldNames,\n      virtual: realVirtual,\n      listHeight: toRef(props, 'listHeight'),\n      listItemHeight: toRef(props, 'listItemHeight'),\n      childrenAsData\n    })));\n    // ========================== Warning ===========================\n    if (process.env.NODE_ENV !== 'production') {\n      watchEffect(() => {\n        warningProps(props);\n      }, {\n        flush: 'post'\n      });\n    }\n    const selectRef = ref();\n    expose({\n      focus() {\n        var _a;\n        (_a = selectRef.value) === null || _a === void 0 ? void 0 : _a.focus();\n      },\n      blur() {\n        var _a;\n        (_a = selectRef.value) === null || _a === void 0 ? void 0 : _a.blur();\n      },\n      scrollTo(arg) {\n        var _a;\n        (_a = selectRef.value) === null || _a === void 0 ? void 0 : _a.scrollTo(arg);\n      }\n    });\n    const pickProps = computed(() => {\n      return omit(props, ['id', 'mode', 'prefixCls', 'backfill', 'fieldNames',\n      // Search\n      'inputValue', 'searchValue', 'onSearch', 'autoClearSearchValue',\n      // Select\n      'onSelect', 'onDeselect', 'dropdownMatchSelectWidth',\n      // Options\n      'filterOption', 'filterSort', 'optionFilterProp', 'optionLabelProp', 'options', 'children', 'defaultActiveFirstOption', 'menuItemSelectedIcon', 'virtual', 'listHeight', 'listItemHeight',\n      // Value\n      'value', 'defaultValue', 'labelInValue', 'onChange']);\n    });\n    return () => {\n      return _createVNode(BaseSelect, _objectSpread(_objectSpread(_objectSpread({}, pickProps.value), attrs), {}, {\n        \"id\": mergedId,\n        \"prefixCls\": props.prefixCls,\n        \"ref\": selectRef,\n        \"omitDomProps\": OMIT_DOM_PROPS,\n        \"mode\": props.mode,\n        \"displayValues\": displayValues.value,\n        \"onDisplayValuesChange\": onDisplayValuesChange,\n        \"searchValue\": mergedSearchValue.value,\n        \"onSearch\": onInternalSearch,\n        \"onSearchSplit\": onInternalSearchSplit,\n        \"dropdownMatchSelectWidth\": props.dropdownMatchSelectWidth,\n        \"OptionList\": OptionList,\n        \"emptyOptions\": !displayOptions.value.length,\n        \"activeValue\": activeValue.value,\n        \"activeDescendantId\": `${mergedId}_list_${accessibilityIndex.value}`\n      }), slots);\n    };\n  }\n});","map":{"version":3,"names":["_objectSpread","_extends","createVNode","_createVNode","resolveDirective","_resolveDirective","BaseSelect","baseSelectPropsWithoutPrivate","isMultiple","OptionList","useOptions","useProvideSelectProps","useId","fillFieldNames","flattenOptions","injectPropsWithOption","warningProps","toArray","useFilterOptions","useCache","computed","defineComponent","ref","shallowRef","toRef","watchEffect","PropTypes","initDefaultProps","useMergedState","useState","toReactive","omit","OMIT_DOM_PROPS","selectProps","prefixCls","String","id","backfill","type","Boolean","default","undefined","fieldNames","Object","inputValue","searchValue","onSearch","Function","autoClearSearchValue","onSelect","onDeselect","filterOption","filterSort","optionFilterProp","optionLabelProp","options","Array","defaultActiveFirstOption","virtual","listHeight","Number","listItemHeight","menuItemSelectedIcon","any","mode","labelInValue","value","defaultValue","onChange","children","isRawValue","compatConfig","MODE","name","inheritAttrs","props","dropdownMatchSelectWidth","setup","_ref","expose","attrs","slots","mergedId","multiple","childrenAsData","mergedFilterOption","mergedFieldNames","mergedSearchValue","setSearchValue","postState","search","parsedOptions","valueOptions","labelOptions","mergedOptions","convert2LabelValues","draftValues","valueList","map","val","_a","_b","rawValue","rawLabel","rawKey","rawDisabled","key","label","option","get","disabled","internalValue","setInternalValue","rawLabeledValues","values","mergedValues","getMixedOption","displayValues","length","firstValue","item","rawValues","Set","strValue","flush","createTagOption","mergedLabel","filledTagOptions","cloneOptions","slice","existOptions","has","sort","a","b","forEach","push","filteredOptions","filledSearchOptions","some","orderedFilteredOptions","displayOptions","triggerChange","labeledValues","newVal","index","returnValues","v","originLabel","returnOptions","activeValue","setActiveValue","accessibilityIndex","setAccessibilityIndex","mergedDefaultActiveFirstOption","onActiveValue","active","source","arguments","triggerSelect","selected","getSelectEnt","wrappedValue","onInternalSelect","info","cloneValues","mergedSelect","filter","onDisplayValuesChange","nextValues","onInternalSearch","searchText","formatted","trim","newRawValues","from","call","onInternalSearchSplit","words","patchValues","word","opt","newRawValue","realVirtual","process","env","NODE_ENV","selectRef","focus","blur","scrollTo","arg","pickProps"],"sources":["/Users/lpl/工作/Teamsupport/develop_help/node_modules/ant-design-vue/es/vc-select/Select.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode, resolveDirective as _resolveDirective } from \"vue\";\n/**\n * To match accessibility requirement, we always provide an input in the component.\n * Other element will not set `tabindex` to avoid `onBlur` sequence problem.\n * For focused select, we set `aria-live=\"polite\"` to update the accessibility content.\n *\n * ref:\n * - keyboard: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/listbox_role#Keyboard_interactions\n *\n * New api:\n * - listHeight\n * - listItemHeight\n * - component\n *\n * Remove deprecated api:\n * - multiple\n * - tags\n * - combobox\n * - firstActiveValue\n * - dropdownMenuStyle\n * - openClassName (Not list in api)\n *\n * Update:\n * - `backfill` only support `combobox` mode\n * - `combobox` mode not support `labelInValue` since it's meaningless\n * - `getInputElement` only support `combobox` mode\n * - `onChange` return OptionData instead of ReactNode\n * - `filterOption` `onChange` `onSelect` accept OptionData instead of ReactNode\n * - `combobox` mode trigger `onChange` will get `undefined` if no `value` match in Option\n * - `combobox` mode not support `optionLabelProp`\n */\nimport BaseSelect, { baseSelectPropsWithoutPrivate, isMultiple } from './BaseSelect';\nimport OptionList from './OptionList';\nimport useOptions from './hooks/useOptions';\nimport { useProvideSelectProps } from './SelectContext';\nimport useId from './hooks/useId';\nimport { fillFieldNames, flattenOptions, injectPropsWithOption } from './utils/valueUtil';\nimport warningProps from './utils/warningPropsUtil';\nimport { toArray } from './utils/commonUtil';\nimport useFilterOptions from './hooks/useFilterOptions';\nimport useCache from './hooks/useCache';\nimport { computed, defineComponent, ref, shallowRef, toRef, watchEffect } from 'vue';\nimport PropTypes from '../_util/vue-types';\nimport { initDefaultProps } from '../_util/props-util';\nimport useMergedState from '../_util/hooks/useMergedState';\nimport useState from '../_util/hooks/useState';\nimport { toReactive } from '../_util/toReactive';\nimport omit from '../_util/omit';\nconst OMIT_DOM_PROPS = ['inputValue'];\nexport function selectProps() {\n  return _extends(_extends({}, baseSelectPropsWithoutPrivate()), {\n    prefixCls: String,\n    id: String,\n    backfill: {\n      type: Boolean,\n      default: undefined\n    },\n    // >>> Field Names\n    fieldNames: Object,\n    // >>> Search\n    /** @deprecated Use `searchValue` instead */\n    inputValue: String,\n    searchValue: String,\n    onSearch: Function,\n    autoClearSearchValue: {\n      type: Boolean,\n      default: undefined\n    },\n    // >>> Select\n    onSelect: Function,\n    onDeselect: Function,\n    // >>> Options\n    /**\n     * In Select, `false` means do nothing.\n     * In TreeSelect, `false` will highlight match item.\n     * It's by design.\n     */\n    filterOption: {\n      type: [Boolean, Function],\n      default: undefined\n    },\n    filterSort: Function,\n    optionFilterProp: String,\n    optionLabelProp: String,\n    options: Array,\n    defaultActiveFirstOption: {\n      type: Boolean,\n      default: undefined\n    },\n    virtual: {\n      type: Boolean,\n      default: undefined\n    },\n    listHeight: Number,\n    listItemHeight: Number,\n    // >>> Icon\n    menuItemSelectedIcon: PropTypes.any,\n    mode: String,\n    labelInValue: {\n      type: Boolean,\n      default: undefined\n    },\n    value: PropTypes.any,\n    defaultValue: PropTypes.any,\n    onChange: Function,\n    children: Array\n  });\n}\nfunction isRawValue(value) {\n  return !value || typeof value !== 'object';\n}\nexport default defineComponent({\n  compatConfig: {\n    MODE: 3\n  },\n  name: 'Select',\n  inheritAttrs: false,\n  props: initDefaultProps(selectProps(), {\n    prefixCls: 'vc-select',\n    autoClearSearchValue: true,\n    listHeight: 200,\n    listItemHeight: 20,\n    dropdownMatchSelectWidth: true\n  }),\n  setup(props, _ref) {\n    let {\n      expose,\n      attrs,\n      slots\n    } = _ref;\n    const mergedId = useId(toRef(props, 'id'));\n    const multiple = computed(() => isMultiple(props.mode));\n    const childrenAsData = computed(() => !!(!props.options && props.children));\n    const mergedFilterOption = computed(() => {\n      if (props.filterOption === undefined && props.mode === 'combobox') {\n        return false;\n      }\n      return props.filterOption;\n    });\n    // ========================= FieldNames =========================\n    const mergedFieldNames = computed(() => fillFieldNames(props.fieldNames, childrenAsData.value));\n    // =========================== Search ===========================\n    const [mergedSearchValue, setSearchValue] = useMergedState('', {\n      value: computed(() => props.searchValue !== undefined ? props.searchValue : props.inputValue),\n      postState: search => search || ''\n    });\n    // =========================== Option ===========================\n    const parsedOptions = useOptions(toRef(props, 'options'), toRef(props, 'children'), mergedFieldNames);\n    const {\n      valueOptions,\n      labelOptions,\n      options: mergedOptions\n    } = parsedOptions;\n    // ========================= Wrap Value =========================\n    const convert2LabelValues = draftValues => {\n      // Convert to array\n      const valueList = toArray(draftValues);\n      // Convert to labelInValue type\n      return valueList.map(val => {\n        var _a, _b;\n        let rawValue;\n        let rawLabel;\n        let rawKey;\n        let rawDisabled;\n        // Fill label & value\n        if (isRawValue(val)) {\n          rawValue = val;\n        } else {\n          rawKey = val.key;\n          rawLabel = val.label;\n          rawValue = (_a = val.value) !== null && _a !== void 0 ? _a : rawKey;\n        }\n        const option = valueOptions.value.get(rawValue);\n        if (option) {\n          // Fill missing props\n          if (rawLabel === undefined) rawLabel = option === null || option === void 0 ? void 0 : option[props.optionLabelProp || mergedFieldNames.value.label];\n          if (rawKey === undefined) rawKey = (_b = option === null || option === void 0 ? void 0 : option.key) !== null && _b !== void 0 ? _b : rawValue;\n          rawDisabled = option === null || option === void 0 ? void 0 : option.disabled;\n          // Warning if label not same as provided\n          // if (process.env.NODE_ENV !== 'production' && !isRawValue(val)) {\n          //   const optionLabel = option?.[mergedFieldNames.value.label];\n          //   if (optionLabel !== undefined && optionLabel !== rawLabel) {\n          //     warning(false, '`label` of `value` is not same as `label` in Select options.');\n          //   }\n          // }\n        }\n\n        return {\n          label: rawLabel,\n          value: rawValue,\n          key: rawKey,\n          disabled: rawDisabled,\n          option\n        };\n      });\n    };\n    // =========================== Values ===========================\n    const [internalValue, setInternalValue] = useMergedState(props.defaultValue, {\n      value: toRef(props, 'value')\n    });\n    // Merged value with LabelValueType\n    const rawLabeledValues = computed(() => {\n      var _a;\n      const values = convert2LabelValues(internalValue.value);\n      // combobox no need save value when it's empty\n      if (props.mode === 'combobox' && !((_a = values[0]) === null || _a === void 0 ? void 0 : _a.value)) {\n        return [];\n      }\n      return values;\n    });\n    // Fill label with cache to avoid option remove\n    const [mergedValues, getMixedOption] = useCache(rawLabeledValues, valueOptions);\n    const displayValues = computed(() => {\n      // `null` need show as placeholder instead\n      // https://github.com/ant-design/ant-design/issues/25057\n      if (!props.mode && mergedValues.value.length === 1) {\n        const firstValue = mergedValues.value[0];\n        if (firstValue.value === null && (firstValue.label === null || firstValue.label === undefined)) {\n          return [];\n        }\n      }\n      return mergedValues.value.map(item => {\n        var _a;\n        return _extends(_extends({}, item), {\n          label: (_a = typeof item.label === 'function' ? item.label() : item.label) !== null && _a !== void 0 ? _a : item.value\n        });\n      });\n    });\n    /** Convert `displayValues` to raw value type set */\n    const rawValues = computed(() => new Set(mergedValues.value.map(val => val.value)));\n    watchEffect(() => {\n      var _a;\n      if (props.mode === 'combobox') {\n        const strValue = (_a = mergedValues.value[0]) === null || _a === void 0 ? void 0 : _a.value;\n        if (strValue !== undefined && strValue !== null) {\n          setSearchValue(String(strValue));\n        }\n      }\n    }, {\n      flush: 'post'\n    });\n    // ======================= Display Option =======================\n    // Create a placeholder item if not exist in `options`\n    const createTagOption = (val, label) => {\n      const mergedLabel = label !== null && label !== void 0 ? label : val;\n      return {\n        [mergedFieldNames.value.value]: val,\n        [mergedFieldNames.value.label]: mergedLabel\n      };\n    };\n    // Fill tag as option if mode is `tags`\n    const filledTagOptions = shallowRef();\n    watchEffect(() => {\n      if (props.mode !== 'tags') {\n        filledTagOptions.value = mergedOptions.value;\n        return;\n      }\n      // >>> Tag mode\n      const cloneOptions = mergedOptions.value.slice();\n      // Check if value exist in options (include new patch item)\n      const existOptions = val => valueOptions.value.has(val);\n      // Fill current value as option\n      [...mergedValues.value].sort((a, b) => a.value < b.value ? -1 : 1).forEach(item => {\n        const val = item.value;\n        if (!existOptions(val)) {\n          cloneOptions.push(createTagOption(val, item.label));\n        }\n      });\n      filledTagOptions.value = cloneOptions;\n    });\n    const filteredOptions = useFilterOptions(filledTagOptions, mergedFieldNames, mergedSearchValue, mergedFilterOption, toRef(props, 'optionFilterProp'));\n    // Fill options with search value if needed\n    const filledSearchOptions = computed(() => {\n      if (props.mode !== 'tags' || !mergedSearchValue.value || filteredOptions.value.some(item => item[props.optionFilterProp || 'value'] === mergedSearchValue.value)) {\n        return filteredOptions.value;\n      }\n      // Fill search value as option\n      return [createTagOption(mergedSearchValue.value), ...filteredOptions.value];\n    });\n    const orderedFilteredOptions = computed(() => {\n      if (!props.filterSort) {\n        return filledSearchOptions.value;\n      }\n      return [...filledSearchOptions.value].sort((a, b) => props.filterSort(a, b));\n    });\n    const displayOptions = computed(() => flattenOptions(orderedFilteredOptions.value, {\n      fieldNames: mergedFieldNames.value,\n      childrenAsData: childrenAsData.value\n    }));\n    // =========================== Change ===========================\n    const triggerChange = values => {\n      const labeledValues = convert2LabelValues(values);\n      setInternalValue(labeledValues);\n      if (props.onChange && (\n      // Trigger event only when value changed\n      labeledValues.length !== mergedValues.value.length || labeledValues.some((newVal, index) => {\n        var _a;\n        return ((_a = mergedValues.value[index]) === null || _a === void 0 ? void 0 : _a.value) !== (newVal === null || newVal === void 0 ? void 0 : newVal.value);\n      }))) {\n        const returnValues = props.labelInValue ? labeledValues.map(v => {\n          return _extends(_extends({}, v), {\n            originLabel: v.label,\n            label: typeof v.label === 'function' ? v.label() : v.label\n          });\n        }) : labeledValues.map(v => v.value);\n        const returnOptions = labeledValues.map(v => injectPropsWithOption(getMixedOption(v.value)));\n        props.onChange(\n        // Value\n        multiple.value ? returnValues : returnValues[0],\n        // Option\n        multiple.value ? returnOptions : returnOptions[0]);\n      }\n    };\n    // ======================= Accessibility ========================\n    const [activeValue, setActiveValue] = useState(null);\n    const [accessibilityIndex, setAccessibilityIndex] = useState(0);\n    const mergedDefaultActiveFirstOption = computed(() => props.defaultActiveFirstOption !== undefined ? props.defaultActiveFirstOption : props.mode !== 'combobox');\n    const onActiveValue = function (active, index) {\n      let {\n        source = 'keyboard'\n      } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      setAccessibilityIndex(index);\n      if (props.backfill && props.mode === 'combobox' && active !== null && source === 'keyboard') {\n        setActiveValue(String(active));\n      }\n    };\n    // ========================= OptionList =========================\n    const triggerSelect = (val, selected) => {\n      const getSelectEnt = () => {\n        var _a;\n        const option = getMixedOption(val);\n        const originLabel = option === null || option === void 0 ? void 0 : option[mergedFieldNames.value.label];\n        return [props.labelInValue ? {\n          label: typeof originLabel === 'function' ? originLabel() : originLabel,\n          originLabel,\n          value: val,\n          key: (_a = option === null || option === void 0 ? void 0 : option.key) !== null && _a !== void 0 ? _a : val\n        } : val, injectPropsWithOption(option)];\n      };\n      if (selected && props.onSelect) {\n        const [wrappedValue, option] = getSelectEnt();\n        props.onSelect(wrappedValue, option);\n      } else if (!selected && props.onDeselect) {\n        const [wrappedValue, option] = getSelectEnt();\n        props.onDeselect(wrappedValue, option);\n      }\n    };\n    // Used for OptionList selection\n    const onInternalSelect = (val, info) => {\n      let cloneValues;\n      // Single mode always trigger select only with option list\n      const mergedSelect = multiple.value ? info.selected : true;\n      if (mergedSelect) {\n        cloneValues = multiple.value ? [...mergedValues.value, val] : [val];\n      } else {\n        cloneValues = mergedValues.value.filter(v => v.value !== val);\n      }\n      triggerChange(cloneValues);\n      triggerSelect(val, mergedSelect);\n      // Clean search value if single or configured\n      if (props.mode === 'combobox') {\n        // setSearchValue(String(val));\n        setActiveValue('');\n      } else if (!multiple.value || props.autoClearSearchValue) {\n        setSearchValue('');\n        setActiveValue('');\n      }\n    };\n    // ======================= Display Change =======================\n    // BaseSelect display values change\n    const onDisplayValuesChange = (nextValues, info) => {\n      triggerChange(nextValues);\n      if (info.type === 'remove' || info.type === 'clear') {\n        info.values.forEach(item => {\n          triggerSelect(item.value, false);\n        });\n      }\n    };\n    // =========================== Search ===========================\n    const onInternalSearch = (searchText, info) => {\n      var _a;\n      setSearchValue(searchText);\n      setActiveValue(null);\n      // [Submit] Tag mode should flush input\n      if (info.source === 'submit') {\n        const formatted = (searchText || '').trim();\n        // prevent empty tags from appearing when you click the Enter button\n        if (formatted) {\n          const newRawValues = Array.from(new Set([...rawValues.value, formatted]));\n          triggerChange(newRawValues);\n          triggerSelect(formatted, true);\n          setSearchValue('');\n        }\n        return;\n      }\n      if (info.source !== 'blur') {\n        if (props.mode === 'combobox') {\n          triggerChange(searchText);\n        }\n        (_a = props.onSearch) === null || _a === void 0 ? void 0 : _a.call(props, searchText);\n      }\n    };\n    const onInternalSearchSplit = words => {\n      let patchValues = words;\n      if (props.mode !== 'tags') {\n        patchValues = words.map(word => {\n          const opt = labelOptions.value.get(word);\n          return opt === null || opt === void 0 ? void 0 : opt.value;\n        }).filter(val => val !== undefined);\n      }\n      const newRawValues = Array.from(new Set([...rawValues.value, ...patchValues]));\n      triggerChange(newRawValues);\n      newRawValues.forEach(newRawValue => {\n        triggerSelect(newRawValue, true);\n      });\n    };\n    const realVirtual = computed(() => props.virtual !== false && props.dropdownMatchSelectWidth !== false);\n    useProvideSelectProps(toReactive(_extends(_extends({}, parsedOptions), {\n      flattenOptions: displayOptions,\n      onActiveValue,\n      defaultActiveFirstOption: mergedDefaultActiveFirstOption,\n      onSelect: onInternalSelect,\n      menuItemSelectedIcon: toRef(props, 'menuItemSelectedIcon'),\n      rawValues,\n      fieldNames: mergedFieldNames,\n      virtual: realVirtual,\n      listHeight: toRef(props, 'listHeight'),\n      listItemHeight: toRef(props, 'listItemHeight'),\n      childrenAsData\n    })));\n    // ========================== Warning ===========================\n    if (process.env.NODE_ENV !== 'production') {\n      watchEffect(() => {\n        warningProps(props);\n      }, {\n        flush: 'post'\n      });\n    }\n    const selectRef = ref();\n    expose({\n      focus() {\n        var _a;\n        (_a = selectRef.value) === null || _a === void 0 ? void 0 : _a.focus();\n      },\n      blur() {\n        var _a;\n        (_a = selectRef.value) === null || _a === void 0 ? void 0 : _a.blur();\n      },\n      scrollTo(arg) {\n        var _a;\n        (_a = selectRef.value) === null || _a === void 0 ? void 0 : _a.scrollTo(arg);\n      }\n    });\n    const pickProps = computed(() => {\n      return omit(props, ['id', 'mode', 'prefixCls', 'backfill', 'fieldNames',\n      // Search\n      'inputValue', 'searchValue', 'onSearch', 'autoClearSearchValue',\n      // Select\n      'onSelect', 'onDeselect', 'dropdownMatchSelectWidth',\n      // Options\n      'filterOption', 'filterSort', 'optionFilterProp', 'optionLabelProp', 'options', 'children', 'defaultActiveFirstOption', 'menuItemSelectedIcon', 'virtual', 'listHeight', 'listItemHeight',\n      // Value\n      'value', 'defaultValue', 'labelInValue', 'onChange']);\n    });\n    return () => {\n      return _createVNode(BaseSelect, _objectSpread(_objectSpread(_objectSpread({}, pickProps.value), attrs), {}, {\n        \"id\": mergedId,\n        \"prefixCls\": props.prefixCls,\n        \"ref\": selectRef,\n        \"omitDomProps\": OMIT_DOM_PROPS,\n        \"mode\": props.mode,\n        \"displayValues\": displayValues.value,\n        \"onDisplayValuesChange\": onDisplayValuesChange,\n        \"searchValue\": mergedSearchValue.value,\n        \"onSearch\": onInternalSearch,\n        \"onSearchSplit\": onInternalSearchSplit,\n        \"dropdownMatchSelectWidth\": props.dropdownMatchSelectWidth,\n        \"OptionList\": OptionList,\n        \"emptyOptions\": !displayOptions.value.length,\n        \"activeValue\": activeValue.value,\n        \"activeDescendantId\": `${mergedId}_list_${accessibilityIndex.value}`\n      }), slots);\n    };\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}