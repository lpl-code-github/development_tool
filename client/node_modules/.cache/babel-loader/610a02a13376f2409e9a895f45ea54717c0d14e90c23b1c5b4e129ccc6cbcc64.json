{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport RunNewman from \"@/components/Newman/RunNewman\";\nimport NewmanTask from \"@/components/Newman/NewmanTask\";\nimport fileDownload from \"js-file-download\";\nexport default {\n  name: \"Newman\",\n  components: {\n    NewmanTask,\n    RunNewman\n  },\n  data() {\n    return {\n      taskCount: 0,\n      columns: [{\n        title: '名称',\n        width: 150,\n        dataIndex: 'name',\n        scopedSlots: {\n          customRender: 'name'\n        }\n      }, {\n        title: '描述',\n        width: 250,\n        dataIndex: 'description',\n        scopedSlots: {\n          customRender: 'description'\n        }\n      }, {\n        title: '状态',\n        width: 50,\n        dataIndex: 'status',\n        key: 'status',\n        scopedSlots: {\n          customRender: 'status'\n        }\n      }, {\n        title: '开始时间',\n        width: 100,\n        dataIndex: 'created_at',\n        key: 'created_at',\n        sorter: (a, b) => new Date(a.created_at) - new Date(b.created_at)\n      }, {\n        title: '结束时间',\n        width: 100,\n        dataIndex: 'updated_at',\n        key: 'updated_at',\n        sorter: (a, b) => new Date(a.created_at) - new Date(b.created_at)\n      }, {\n        title: 'Action',\n        width: 200,\n        dataIndex: '',\n        key: 'x',\n        scopedSlots: {\n          customRender: 'action'\n        }\n      }],\n      paginationConfig: {\n        defaultCurrent: 1,\n        defaultPageSize: 5\n      },\n      newmanTaskList: [],\n      tableData: [],\n      cacheData: [],\n      filters: [],\n      filteredValue: [],\n      tagsFilterDropdownVisible: false,\n      openRunNewmanModelFlag: false,\n      openNewmanTaskModelFlag: false,\n      runTestFlag: false,\n      timer: null,\n      taskName: \"\",\n      // flag 代表任务打开与关闭\n      tempTaskLog: [{\n        name: \"关闭测试环境的报错信息\",\n        flag: false,\n        status: \"\",\n        index: 1\n      }, {\n        name: \"导入备份及恢复数据库的测试接口\",\n        flag: false,\n        status: \"\",\n        index: 2\n      }, {\n        name: \"切换到测试环境\",\n        flag: false,\n        status: \"\",\n        index: 3\n      }, {\n        name: \"执行newman测试命令\",\n        flag: false,\n        status: \"\",\n        index: 4\n      }],\n      taskLog: [],\n      currentTask: null,\n      editingKey: ''\n    };\n  },\n  watch: {\n    currentTask: {\n      handler: function (newVal, oldVal) {\n        if (oldVal !== null && newVal === null) {\n          this.getAllTaskList();\n        }\n      },\n      // 深度观察监听\n      deep: true\n    }\n  },\n  created() {\n    this.getUnfinishedNewmanTasks();\n  },\n  mounted() {\n    var currentTaskId = localStorage.getItem(\"run_postman_flag\");\n    if (currentTaskId == null) {\n      localStorage.setItem('run_postman_flag', \"0\");\n    }\n    this.getAllTaskList();\n    // if (this.timer == null) {\n    //   this.timer = setInterval(() => {\n    //     this.getUnfinishedNewmanTasks()\n    //   }, 3000);\n    // }\n  },\n\n  beforeDestroy() {\n    clearInterval(this.timer);\n  },\n  methods: {\n    onSearch(value) {\n      console.log(value);\n    },\n    handleChange(pagination, filters) {\n      var tagFilterChecked = filters.status;\n      if (filters.status !== undefined && filters.status.length === 0) {\n        this.tableData = this.newmanTaskList;\n        //重置columns的filteredValue\n        var columns = this.columns;\n        columns.forEach(item => {\n          if (item.key === 'status') {\n            this.$set(item, 'filteredValue', []);\n          }\n        });\n        this.$set(this, 'columns', [...columns]);\n        return;\n      }\n      if (tagFilterChecked !== undefined) {\n        this.tableData = this.newmanTaskList.filter(item => {\n          return tagFilterChecked.includes(item.status);\n        });\n        var columns = this.columns;\n        columns.forEach(item => {\n          if (item.key === 'status') {\n            this.$set(item, 'filteredValue', tagFilterChecked);\n          }\n        });\n        this.$set(this, 'columns', [...columns]);\n      }\n    },\n    openRunNewmanModel() {\n      this.openRunNewmanModelFlag = true;\n    },\n    openNewmanTaskModel() {\n      this.openNewmanTaskModelFlag = true;\n    },\n    getRunNewmanModelStatus(status) {\n      this.openRunNewmanModelFlag = status;\n    },\n    getNewmanModelTaskStatus(status) {\n      this.openNewmanTaskModelFlag = status;\n    },\n    getRunTaskObj(taskObj) {\n      if (taskObj != null) {\n        this.runTestFlag = true;\n        console.log(taskObj);\n      }\n    },\n    // 获取全部任务列表\n    getAllTaskList(params) {\n      if (params == null) {\n        params = \"\";\n      }\n      this.$request.getAllNewmanTasks(params).then(res => {\n        if (res.status === 200) {\n          this.newmanTaskList = res.data.data;\n          const statusFilters = [];\n          this.newmanTaskList.forEach(item => {\n            const existingStatus = statusFilters.find(filter => filter.text === item.status);\n            if (!existingStatus) {\n              statusFilters.push({\n                text: item.status,\n                value: item.status\n              });\n            }\n            item.key = item.id;\n          });\n          this.columns.forEach(item => {\n            if (item.key === 'status') {\n              item.filters = statusFilters;\n            }\n          });\n          this.tableData = this.newmanTaskList;\n          this.cacheData = this.tableData.map(item => ({\n            ...item\n          }));\n        }\n      });\n    },\n    // table编辑\n    handleChangeEdit(value, key, column) {\n      const newData = [...this.tableData];\n      const target = newData.find(item => key === item.key);\n      if (target) {\n        target[column] = value;\n        this.tableData = newData;\n      }\n    },\n    // 编辑表格基本信息\n    edit(key) {\n      const newData = [...this.tableData];\n      const target = newData.find(item => key === item.key);\n      this.editingKey = key;\n      if (target) {\n        target.editable = true;\n        this.tableData = newData;\n      }\n    },\n    save(key) {\n      const newData = [...this.tableData];\n      const newCacheData = [...this.cacheData];\n      const target = newData.find(item => key === item.key);\n      const targetCache = newCacheData.find(item => key === item.key);\n      if (target && targetCache) {\n        let nameLength = target.name.length;\n        let descriptionLength = target.description.length;\n        if (!(nameLength >= 5 && length <= 50)) {\n          this.$message.warning(\"名称长度应该在5～50之间\");\n          return;\n        }\n        if (descriptionLength === 0) {\n          this.$message.warning(\"描述不能为空\");\n          return;\n        }\n        var param = {\n          data: {\n            id: target.id,\n            name: target.name,\n            description: target.description\n          }\n        };\n        this.$request.putNewmanTasks(param).then(res => {\n          if (res.status === 200) {\n            delete target.editable;\n            this.tableData = newData;\n            Object.assign(targetCache, target);\n            this.cacheData = newCacheData;\n            this.$message.success(\"更新成功\");\n          } else {\n            this.$message.error(\"更新失败\");\n          }\n        });\n      }\n      this.editingKey = '';\n    },\n    cancel(key) {\n      const newData = [...this.tableData];\n      const target = newData.find(item => key === item.key);\n      this.editingKey = '';\n      if (target) {\n        Object.assign(target, this.cacheData.find(item => key === item.key));\n        delete target.editable;\n        this.tableData = newData;\n      }\n    },\n    deleteNewmanTask(key) {\n      this.$confirm({\n        title: '确认删除测试记录吗?',\n        content: '将会删除您的html报告、Excel报告等',\n        okText: '删除',\n        okType: 'danger',\n        cancelText: '不了',\n        onOk: () => {\n          var target = this.cacheData.find(item => key === item.key);\n          var param = {\n            data: {\n              id: target.id\n            }\n          };\n          this.$request.deleteNewmanTasks(param).then(res => {\n            if (res.status === 200) {\n              // 删除newmanTaskList，重新设置tableData\n              const newNewmanTaskList = [...this.newmanTaskList];\n              this.newmanTaskList = newNewmanTaskList.filter(item => item.key !== key);\n              this.tableData = [...this.newmanTaskList];\n              this.$message.success(\"删除成功\");\n\n              // 重新分配筛选器\n              const statusFilters = [];\n              this.newmanTaskList.forEach(item => {\n                const existingStatus = statusFilters.find(filter => filter.text === item.status);\n                if (!existingStatus) {\n                  statusFilters.push({\n                    text: item.status,\n                    value: item.status\n                  });\n                }\n                item.key = item.id;\n              });\n              var columns = this.columns;\n              columns.forEach(item => {\n                if (item.key === 'status') {\n                  item.filters = [...statusFilters];\n                  this.$set(item, 'filteredValue', []);\n                }\n              });\n              this.$set(this, 'columns', [...columns]);\n\n              // 重新分配cacheData\n              this.cacheData = this.tableData.map(item => ({\n                ...item\n              }));\n            } else {\n              this.$message.error(\"删除失败\");\n            }\n          });\n        },\n        onCancel() {\n          console.log('Cancel');\n        }\n      });\n    },\n    downloadFile(path) {\n      let fileName = path.substring(path.lastIndexOf('/') + 1);\n      this.$request.downloadFile(path).then(res => {\n        if (res.status === 200) {\n          fileDownload(res.data, fileName);\n        } else {\n          const hasHTML = fileName.includes(\"html\");\n          const hasExcel = fileName.includes(\"cvs\");\n          const hasTxt = fileName.includes(\"txt\");\n          console.log(hasExcel);\n          if (hasHTML || hasExcel) {\n            this.$message.error(\"文件可能丢失，也可能不存在，详情请下载cli报告看\");\n          }\n          if (hasTxt) {\n            this.$message.error(\"cli报告文件已经丢失\");\n          }\n        }\n      });\n    },\n    // 获取未完成的任务\n    getUnfinishedNewmanTasks() {\n      var param = \"?is_unfinished=true\";\n      this.$request.getNewmanTasks(param).then(async res => {\n        if (res.status === 200) {\n          var data = res.data.data;\n          if (data.length !== 0) {\n            var task = data[0];\n            this.currentTask = task;\n            this.taskName = task.name;\n            this.taskCount = 1;\n            if (task.log == null) {\n              var putParam = {\n                data: {\n                  log: this.tempTaskLog,\n                  id: task.id\n                }\n              };\n              this.$request.putNewmanTasksLog(putParam).then(res => {\n                if (res.status === 200) {\n                  if (res.data.data.log != null && res.data.data.log.length !== 0) {\n                    this.taskLog = res.data.data.log;\n                  } else {\n                    this.taskLog = [];\n                  }\n                } else {\n                  this.taskLog = [];\n                }\n              });\n            } else {\n              this.taskLog = task.log;\n              // start\n              if (task.status == null) {\n                await this.startPostmanTest(this.taskLog);\n              }\n            }\n          } else {\n            this.currentTask = null;\n            this.taskName = \"\";\n            this.taskCount = 0;\n            this.taskLog = [];\n          }\n        }\n        setTimeout(this.getUnfinishedNewmanTasks, 3000);\n      });\n    },\n    async startPostmanTest(taskLog) {\n      for (let i = 0; i < taskLog.length; i++) {\n        var item = taskLog[i];\n        if (item.flag === false) {\n          // 任务未开始\n          taskLog[i].flag = true; // 开始任务\n          // 执行任务\n          if (item.index === 1) {\n            // 关闭测试环境的报错信息\n            await this.$request.switchApi('test_env_error_message', false).then(async res => {\n              if (res.status === 200) {\n                // 关闭成功\n                taskLog[i].status = \"成功\";\n                await this.modifyTaskLog(this.taskLog, null, this.currentTask.id);\n              } else {\n                taskLog[i].status = \"error\" + res.data.message;\n                await this.modifyTaskLog(this.taskLog, \"error\", this.currentTask.id);\n              }\n            });\n          } else if (item.index === 2) {\n            // 导入备份/恢复数据库的测试接口\n            await this.$request.switchApi('back_api', true).then(async res => {\n              if (res.status === 200) {\n                // 关闭成功\n                taskLog[i].status = \"成功\";\n                await this.modifyTaskLog(this.taskLog, null, this.currentTask.id);\n              } else {\n                taskLog[i].status = \"error\" + res.data.message;\n                await this.modifyTaskLog(this.taskLog, \"error\", this.currentTask.id);\n              }\n            });\n          } else if (item.index === 3) {\n            // 切换到测试环境\n            await this.$request.switchApi('test_env', true).then(async res => {\n              if (res.status === 200) {\n                // 关闭成功\n                taskLog[i].status = \"成功\";\n                await this.modifyTaskLog(this.taskLog, null, this.currentTask.id);\n              } else {\n                taskLog[i].status = \"error\" + res.data.message;\n                await this.modifyTaskLog(this.taskLog, \"error\", this.currentTask.id);\n              }\n            });\n          } else if (item.index === 4) {\n            // 执行postman测试，只执行一次\n            var currentTaskId = localStorage.getItem(\"run_postman_flag\");\n            if (currentTaskId != this.currentTask.id) {\n              const param = {\n                data: {\n                  task_id: this.currentTask.id\n                }\n              };\n              await this.$request.runNewman(param).then(async res => {\n                if (res.status === 200) {\n                  // 执行成功\n                  localStorage.setItem(\"run_postman_flag\", this.currentTask.id);\n                } else {\n                  taskLog[i].status = \"error\" + res.data.message;\n                  await this.modifyTaskLog(this.taskLog, \"error\", this.currentTask.id);\n                }\n              });\n            }\n          }\n          break;\n        }\n      }\n    },\n    // 更新日志及状态\n    async modifyTaskLog(log, status, id) {\n      var putParam = {\n        data: {\n          log: log,\n          status: status,\n          id: id\n        }\n      };\n      await this.$request.putNewmanTasksLog(putParam).then();\n    },\n    initTaskLog() {\n      this.taskLog = [...this.tempTaskLog];\n    }\n  }\n};","map":{"version":3,"names":["RunNewman","NewmanTask","fileDownload","name","components","data","taskCount","columns","title","width","dataIndex","scopedSlots","customRender","key","sorter","a","b","Date","created_at","paginationConfig","defaultCurrent","defaultPageSize","newmanTaskList","tableData","cacheData","filters","filteredValue","tagsFilterDropdownVisible","openRunNewmanModelFlag","openNewmanTaskModelFlag","runTestFlag","timer","taskName","tempTaskLog","flag","status","index","taskLog","currentTask","editingKey","watch","handler","newVal","oldVal","getAllTaskList","deep","created","getUnfinishedNewmanTasks","mounted","currentTaskId","localStorage","getItem","setItem","beforeDestroy","clearInterval","methods","onSearch","value","console","log","handleChange","pagination","tagFilterChecked","undefined","length","forEach","item","$set","filter","includes","openRunNewmanModel","openNewmanTaskModel","getRunNewmanModelStatus","getNewmanModelTaskStatus","getRunTaskObj","taskObj","params","$request","getAllNewmanTasks","then","res","statusFilters","existingStatus","find","text","push","id","map","handleChangeEdit","column","newData","target","edit","editable","save","newCacheData","targetCache","nameLength","descriptionLength","description","$message","warning","param","putNewmanTasks","Object","assign","success","error","cancel","deleteNewmanTask","$confirm","content","okText","okType","cancelText","onOk","deleteNewmanTasks","newNewmanTaskList","onCancel","downloadFile","path","fileName","substring","lastIndexOf","hasHTML","hasExcel","hasTxt","getNewmanTasks","task","putParam","putNewmanTasksLog","startPostmanTest","setTimeout","i","switchApi","modifyTaskLog","message","task_id","runNewman","initTaskLog"],"sources":["src/views/Newman.vue"],"sourcesContent":["<template>\n  <div class=\"my-newman\">\n    <RunNewman @newmanTask=\"getRunTaskObj\" @updateModelStatus=\"getRunNewmanModelStatus\"\n               :open-flag=\"openRunNewmanModelFlag\"></RunNewman>\n    <NewmanTask :task-log=\"taskLog\" :taskName=\"taskName\" @updateModelStatus=\"getNewmanModelTaskStatus\"\n                :open-flag=\"openNewmanTaskModelFlag\"></NewmanTask>\n    <div class=\"my-n-button\">\n      <a-input-search placeholder=\"输入脚本名或描述搜索\" style=\"width: 200px\" @search=\"onSearch\"/>\n      <div>\n        <a-button type=\"primary\" @click=\"openRunNewmanModel\" style=\"margin-right: 10px\">\n          创建任务\n        </a-button>\n        <a-badge :count=\"taskCount\" style=\"margin-right: 10px\">\n          <a-button @click=\"openNewmanTaskModel\">\n            任务详情\n            <a-icon v-if=\"taskCount !== 0\" type=\"sync\" spin/>\n          </a-button>\n        </a-badge>\n        <!--        <a-button @click=\"openNewmanLogModel\" style=\"margin-right: 10px\">-->\n        <!--          日志-->\n        <!--        </a-button>-->\n      </div>\n    </div>\n    <div class=\"my-n-table\">\n      <a-table\n          :columns=\"columns\"\n          :data-source=\"tableData\"\n          @change=\"handleChange\"\n          :pagination=\"paginationConfig\"\n      >\n\n        <template\n            v-for=\"col in ['name','description']\"\n            :slot=\"col\"\n            slot-scope=\"text, record, index\"\n        >\n          <div :key=\"col\">\n            <a-input\n                :type=\"col=== 'description'?'textarea':''\"\n                rows=\"1\"\n                v-if=\"record.editable\"\n                style=\"margin: -5px 0\"\n                :value=\"text\"\n                @change=\"e => handleChangeEdit(e.target.value, record.key, col)\"\n            />\n            <template v-else>\n              {{ text === \"\" || text === null ? \"/\" : text }}\n            </template>\n          </div>\n        </template>\n        <span slot=\"status\" slot-scope=\"status\">\n          <a-tag\n              :color=\"status === '成功'? '#1ba81e' :'#d92f09' \"\n          >\n            {{ status }}\n          </a-tag>\n        </span>\n        <template slot=\"action\" slot-scope=\"text, record, index\">\n          <div class=\"editable-row-operations\">\n              <span v-if=\"record.editable\">\n                <a style=\"color: #5f92ef\" @click=\"() => save(record.key)\">更新</a>\n                <a-divider type=\"vertical\" style=\"background-color: #a8a7a7!important;\"/>\n                <a-popconfirm title=\"确定取消吗？\" @confirm=\"() => cancel(record.key)\">\n                  <a style=\"color: #5f6062\">取消</a>\n                </a-popconfirm>\n              </span>\n            <span v-else>\n         <a style=\"color: #5f92ef\" :disabled=\"editingKey !== ''\" @click=\"() => edit(record.key)\">编辑</a>\n              <a-divider type=\"vertical\" style=\"background-color: #a8a7a7!important;\"/>\n          <a style=\"color: #286d9f\" @click=\"downloadFile(record.html_report_path)\">Html报告</a>\n          <a-divider type=\"vertical\" style=\"background-color: #a8a7a7!important;\"/>\n          <a style=\"color: #16750c\" @click=\"downloadFile(record.excel_report_path)\">Excel报告</a>\n          <a-divider type=\"vertical\" style=\"background-color: #a8a7a7!important;\"/>\n          <a style=\"color: #e01735\" @click=\"deleteNewmanTask(record.key)\">删除</a>\n        </span>\n          </div>\n        </template>\n        <p slot=\"expandedRowRender\" slot-scope=\"record\" style=\"margin: 0\">\n          newman cli输出：&nbsp;<a @click=\"downloadFile(record.cli_output_path)\">{{ record.cli_output_path }}</a>\n        </p>\n      </a-table>\n    </div>\n  </div>\n</template>\n\n<script>\nimport RunNewman from \"@/components/Newman/RunNewman\";\nimport NewmanTask from \"@/components/Newman/NewmanTask\";\nimport fileDownload from \"js-file-download\";\n\nexport default {\n  name: \"Newman\",\n  components: {NewmanTask, RunNewman},\n  data() {\n    return {\n      taskCount: 0,\n      columns: [\n        {title: '名称', width: 150, dataIndex: 'name', scopedSlots: {customRender: 'name'}},\n        {title: '描述', width: 250, dataIndex: 'description', scopedSlots: {customRender: 'description'}},\n        {title: '状态', width: 50, dataIndex: 'status', key: 'status', scopedSlots: {customRender: 'status'}},\n        {\n          title: '开始时间', width: 100, dataIndex: 'created_at', key: 'created_at',\n          sorter: (a, b) => new Date(a.created_at) - new Date(b.created_at),\n        },\n        {\n          title: '结束时间', width: 100, dataIndex: 'updated_at', key: 'updated_at',\n          sorter: (a, b) => new Date(a.created_at) - new Date(b.created_at),\n        },\n        {title: 'Action', width: 200, dataIndex: '', key: 'x', scopedSlots: {customRender: 'action'}},\n      ],\n      paginationConfig: {\n        defaultCurrent: 1,\n        defaultPageSize: 5,\n      },\n      newmanTaskList: [],\n      tableData: [],\n      cacheData: [],\n      filters: [],\n      filteredValue: [],\n      tagsFilterDropdownVisible: false,\n      openRunNewmanModelFlag: false,\n      openNewmanTaskModelFlag: false,\n      runTestFlag: false,\n      timer: null,\n      taskName: \"\",\n      // flag 代表任务打开与关闭\n      tempTaskLog: [\n        {\n          name: \"关闭测试环境的报错信息\",\n          flag: false,\n          status: \"\",\n          index: 1\n        },\n        {\n          name: \"导入备份及恢复数据库的测试接口\",\n          flag: false,\n          status: \"\",\n          index: 2\n        },\n        {\n          name: \"切换到测试环境\",\n          flag: false,\n          status: \"\",\n          index: 3\n        },\n        {\n          name: \"执行newman测试命令\",\n          flag: false,\n          status: \"\",\n          index: 4\n        }\n      ],\n      taskLog: [],\n      currentTask: null,\n      editingKey: '',\n    }\n  },\n  watch: {\n    currentTask: {\n      handler: function (newVal, oldVal) {\n        if (oldVal !== null && newVal === null) {\n          this.getAllTaskList();\n        }\n      },\n      // 深度观察监听\n      deep: true\n    }\n  },\n  created() {\n    this.getUnfinishedNewmanTasks()\n  },\n  mounted() {\n    var currentTaskId = localStorage.getItem(\"run_postman_flag\");\n    if (currentTaskId == null) {\n      localStorage.setItem('run_postman_flag', \"0\");\n    }\n    this.getAllTaskList();\n    // if (this.timer == null) {\n    //   this.timer = setInterval(() => {\n    //     this.getUnfinishedNewmanTasks()\n    //   }, 3000);\n    // }\n  },\n  beforeDestroy() {\n    clearInterval(this.timer);\n  },\n  methods: {\n    onSearch(value) {\n      console.log(value);\n    },\n    handleChange(pagination, filters) {\n      var tagFilterChecked = filters.status\n      if (filters.status !== undefined && filters.status.length === 0) {\n        this.tableData = this.newmanTaskList\n        //重置columns的filteredValue\n        var columns = this.columns;\n        columns.forEach(item => {\n          if (item.key === 'status') {\n            this.$set(item, 'filteredValue', [])\n          }\n        })\n        this.$set(this, 'columns', [...columns]);\n        return\n      }\n\n      if (tagFilterChecked !== undefined) {\n        this.tableData = this.newmanTaskList.filter(item => {\n          return tagFilterChecked.includes(item.status);\n        })\n        var columns = this.columns;\n        columns.forEach(item => {\n          if (item.key === 'status') {\n            this.$set(item, 'filteredValue', tagFilterChecked)\n          }\n        })\n        this.$set(this, 'columns', [...columns]);\n      }\n    },\n\n    openRunNewmanModel() {\n      this.openRunNewmanModelFlag = true\n    },\n    openNewmanTaskModel() {\n      this.openNewmanTaskModelFlag = true\n    },\n    getRunNewmanModelStatus(status) {\n      this.openRunNewmanModelFlag = status\n    },\n    getNewmanModelTaskStatus(status) {\n      this.openNewmanTaskModelFlag = status\n    },\n    getRunTaskObj(taskObj) {\n      if (taskObj != null) {\n        this.runTestFlag = true\n        console.log(taskObj)\n      }\n    },\n\n    // 获取全部任务列表\n    getAllTaskList(params) {\n      if (params == null) {\n        params = \"\"\n      }\n      this.$request.getAllNewmanTasks(params).then(res => {\n        if (res.status === 200) {\n          this.newmanTaskList = res.data.data\n\n          const statusFilters = [];\n\n          this.newmanTaskList.forEach(item => {\n            const existingStatus = statusFilters.find(filter => filter.text === item.status);\n            if (!existingStatus) {\n              statusFilters.push({text: item.status, value: item.status});\n            }\n            item.key = item.id\n          })\n          this.columns.forEach(item => {\n            if (item.key === 'status') {\n              item.filters = statusFilters\n            }\n          })\n          this.tableData = this.newmanTaskList\n          this.cacheData = this.tableData.map(item => ({...item}));\n        }\n      })\n    },\n    // table编辑\n    handleChangeEdit(value, key, column) {\n      const newData = [...this.tableData];\n      const target = newData.find(item => key === item.key);\n\n      if (target) {\n        target[column] = value;\n        this.tableData = newData;\n      }\n    },\n    // 编辑表格基本信息\n    edit(key) {\n      const newData = [...this.tableData];\n      const target = newData.find(item => key === item.key);\n      this.editingKey = key;\n      if (target) {\n        target.editable = true;\n        this.tableData = newData;\n      }\n    },\n    save(key) {\n      const newData = [...this.tableData];\n      const newCacheData = [...this.cacheData];\n      const target = newData.find(item => key === item.key);\n      const targetCache = newCacheData.find(item => key === item.key);\n      if (target && targetCache) {\n        let nameLength = target.name.length;\n        let descriptionLength = target.description.length;\n\n        if (!(nameLength >= 5 && length <= 50)) {\n          this.$message.warning(\"名称长度应该在5～50之间\")\n          return\n        }\n        if (descriptionLength === 0) {\n          this.$message.warning(\"描述不能为空\")\n          return\n        }\n        var param = {\n          data: {\n            id: target.id,\n            name: target.name,\n            description: target.description\n          }\n        }\n        this.$request.putNewmanTasks(param).then(res => {\n          if (res.status === 200) {\n            delete target.editable;\n            this.tableData = newData;\n            Object.assign(targetCache, target);\n            this.cacheData = newCacheData;\n            this.$message.success(\"更新成功\")\n          } else {\n            this.$message.error(\"更新失败\")\n          }\n        })\n      }\n      this.editingKey = '';\n    },\n    cancel(key) {\n      const newData = [...this.tableData];\n      const target = newData.find(item => key === item.key);\n      this.editingKey = '';\n      if (target) {\n        Object.assign(target, this.cacheData.find(item => key === item.key));\n        delete target.editable;\n        this.tableData = newData;\n      }\n    },\n    deleteNewmanTask(key) {\n      this.$confirm({\n        title: '确认删除测试记录吗?',\n        content: '将会删除您的html报告、Excel报告等',\n        okText: '删除',\n        okType: 'danger',\n        cancelText: '不了',\n        onOk: () => {\n          var target = this.cacheData.find(item => key === item.key);\n          var param = {\n            data: {\n              id: target.id\n            }\n          }\n          this.$request.deleteNewmanTasks(param).then(res => {\n            if (res.status === 200) {\n              // 删除newmanTaskList，重新设置tableData\n              const newNewmanTaskList = [...this.newmanTaskList]\n              this.newmanTaskList = newNewmanTaskList.filter(item => item.key !== key);\n              this.tableData = [...this.newmanTaskList]\n\n              this.$message.success(\"删除成功\")\n\n              // 重新分配筛选器\n              const statusFilters = [];\n              this.newmanTaskList.forEach(item => {\n                const existingStatus = statusFilters.find(filter => filter.text === item.status);\n                if (!existingStatus) {\n                  statusFilters.push({text: item.status, value: item.status});\n                }\n                item.key = item.id\n              })\n              var columns = this.columns;\n              columns.forEach(item => {\n                if (item.key === 'status') {\n                  item.filters = [...statusFilters]\n                  this.$set(item, 'filteredValue', [])\n                }\n              })\n              this.$set(this, 'columns', [...columns]);\n\n              // 重新分配cacheData\n              this.cacheData = this.tableData.map(item => ({...item}));\n            } else {\n              this.$message.error(\"删除失败\")\n            }\n          })\n        },\n        onCancel() {\n          console.log('Cancel');\n        },\n      });\n\n    },\n    downloadFile(path) {\n      let fileName = path.substring(path.lastIndexOf('/') + 1);\n      this.$request.downloadFile(path).then(res => {\n        if (res.status === 200) {\n          fileDownload(res.data, fileName);\n        } else {\n          const hasHTML = fileName.includes(\"html\");\n          const hasExcel = fileName.includes(\"cvs\");\n          const hasTxt = fileName.includes(\"txt\");\n          console.log(hasExcel)\n          if (hasHTML || hasExcel) {\n            this.$message.error(\"文件可能丢失，也可能不存在，详情请下载cli报告看\")\n          }\n          if (hasTxt){\n            this.$message.error(\"cli报告文件已经丢失\")\n          }\n        }\n      })\n    },\n\n\n    // 获取未完成的任务\n    getUnfinishedNewmanTasks() {\n      var param = \"?is_unfinished=true\"\n      this.$request.getNewmanTasks(param).then(async res => {\n        if (res.status === 200) {\n          var data = res.data.data\n          if (data.length !== 0) {\n            var task = data[0];\n            this.currentTask = task\n            this.taskName = task.name;\n            this.taskCount = 1;\n            if (task.log == null) {\n              var putParam = {data: {log: this.tempTaskLog, id: task.id}}\n              this.$request.putNewmanTasksLog(putParam).then(res => {\n                if (res.status === 200) {\n                  if (res.data.data.log != null && res.data.data.log.length !== 0) {\n                    this.taskLog = res.data.data.log\n                  } else {\n                    this.taskLog = []\n                  }\n                } else {\n                  this.taskLog = []\n                }\n              })\n            } else {\n              this.taskLog = task.log\n              // start\n              if (task.status == null) {\n                await this.startPostmanTest(this.taskLog)\n              }\n            }\n          } else {\n            this.currentTask = null\n            this.taskName = \"\";\n            this.taskCount = 0;\n            this.taskLog = []\n          }\n        }\n        setTimeout(this.getUnfinishedNewmanTasks, 3000);\n      });\n    },\n\n    async startPostmanTest(taskLog) {\n      for (let i = 0; i < taskLog.length; i++) {\n        var item = taskLog[i];\n        if (item.flag === false) { // 任务未开始\n          taskLog[i].flag = true // 开始任务\n          // 执行任务\n          if (item.index === 1) {// 关闭测试环境的报错信息\n            await this.$request.switchApi('test_env_error_message', false).then(async res => {\n              if (res.status === 200) { // 关闭成功\n                taskLog[i].status = \"成功\"\n                await this.modifyTaskLog(this.taskLog, null, this.currentTask.id)\n              } else {\n                taskLog[i].status = \"error\" + res.data.message;\n                await this.modifyTaskLog(this.taskLog, \"error\", this.currentTask.id)\n              }\n\n            });\n          } else if (item.index === 2) { // 导入备份/恢复数据库的测试接口\n            await this.$request.switchApi('back_api', true).then(async res => {\n              if (res.status === 200) { // 关闭成功\n                taskLog[i].status = \"成功\"\n                await this.modifyTaskLog(this.taskLog, null, this.currentTask.id)\n              } else {\n                taskLog[i].status = \"error\" + res.data.message;\n                await this.modifyTaskLog(this.taskLog, \"error\", this.currentTask.id)\n              }\n            });\n          } else if (item.index === 3) { // 切换到测试环境\n            await this.$request.switchApi('test_env', true).then(async res => {\n              if (res.status === 200) { // 关闭成功\n                taskLog[i].status = \"成功\"\n                await this.modifyTaskLog(this.taskLog, null, this.currentTask.id)\n              } else {\n                taskLog[i].status = \"error\" + res.data.message;\n                await this.modifyTaskLog(this.taskLog, \"error\", this.currentTask.id)\n              }\n            });\n          } else if (item.index === 4) { // 执行postman测试，只执行一次\n            var currentTaskId = localStorage.getItem(\"run_postman_flag\");\n            if (currentTaskId != this.currentTask.id) {\n              const param = {\n                data: {\n                  task_id: this.currentTask.id\n                }\n              };\n              await this.$request.runNewman(param).then(async res => {\n                if (res.status === 200) { // 执行成功\n                  localStorage.setItem(\"run_postman_flag\", this.currentTask.id);\n                } else {\n                  taskLog[i].status = \"error\" + res.data.message;\n                  await this.modifyTaskLog(this.taskLog, \"error\", this.currentTask.id);\n                }\n              });\n            }\n          }\n          break;\n        }\n      }\n    },\n    // 更新日志及状态\n    async modifyTaskLog(log, status, id) {\n      var putParam = {data: {log: log, status: status, id: id}}\n      await this.$request.putNewmanTasksLog(putParam).then()\n    },\n    initTaskLog() {\n      this.taskLog = [...this.tempTaskLog]\n    }\n  }\n}\n</script>\n\n<style scoped>\n\n\n.my-n-button {\n  margin-top: 10px;\n  display: flex;\n  justify-content: space-between;\n}\n\n.my-n-table {\n  margin-top: 10px;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}