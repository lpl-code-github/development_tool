{"ast":null,"code":"import { getArticle } from '@/api/articleApi';\n\n/* 引入prismjs */\nimport prismjs from 'prismjs';\n/* 引入样式主题 */\nimport 'prismjs/themes/prism-okaidia.css';\n\n/* 如果要支持高亮java语言的话，需要引入这个，其它的语言需要引入prism-{language}\n   否则，无法处理java语言。 */\nimport 'prismjs/components/prism-java';\n\n/* 引入行号插件，对应的js和css都要引入, 然后在code或pre上添加line-numbers这个类名就行了 */\nimport 'prismjs/plugins/line-numbers/prism-line-numbers.js';\nimport 'prismjs/plugins/line-numbers/prism-line-numbers.css';\nimport 'prismjs/plugins/toolbar/prism-toolbar.js';\nimport 'prismjs/plugins/toolbar/prism-toolbar.css';\n/* 在引入拷贝到剪贴板这个插件之前，要先引入上面这个prism-toolbar.js和prism-toolbar.css\n   然后，代码的右上角在高亮操作之后，就会出现拷贝代码的按钮，不过是英文的，可以使用data-prismjs-copy等属性修改为中文 */\nimport 'prismjs/plugins/copy-to-clipboard/prism-copy-to-clipboard.js';\nconsole.log(Prism);\nconsole.log(Prism === prismjs); // true 说明它会全局注册一个Prism对象供我们使用\n\n/* 输出：// ['manual', 'disableWorkerMessageHandler', 'util', 'languages', 'plugins', 'highlightAll', 'highlightAllUnder', 'highlightElement', 'highlight', 'tokenize', 'hooks', 'Token', 'filename'] */\nconsole.log('Prism', Object.keys(Prism));\nconst code = `var data = 1;`;\nconst html = Prism.highlight(code, prismjs.languages.javascript, 'javascript'); // 它默认已经引入了css/javascript，不需要引入js语言\n/* 输出：<span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> */\nconsole.log(html);\nconst code2 = `SpringApplication.run(VueApp.class);`;\nconst html2 = Prism.highlight(code2, prismjs.languages.java, 'java'); // 如果未引入java语言，这里会报错：Error: The language \"java\" has no grammar.\n/* 输出： <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">VueApp</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>*/\nconsole.log(html2);\nexport default {\n  name: 'Code',\n  data() {\n    return {\n      htmlContent: '',\n      content: ''\n    };\n  },\n  created() {\n    getArticle(this.$route.params.articleId).then(data => {\n      this.htmlContent = data.htmlContent;\n      this.$nextTick(() => {\n        /* 给文章里的代码添加行号，否则只有前面写在html里的code才有行号 */\n        let preBlocks = document.querySelectorAll('pre');\n        preBlocks.forEach(preBlock => {\n          if (!preBlock.classList.contains('line-numbers')) {\n            preBlock.classList.add('line-numbers');\n          }\n        });\n\n        // 当渲染完成之后，高亮所有代码（注意，只有pre或code里带了language-xxx语言的才会处理）\n        Prism.highlightAll();\n      });\n    });\n  },\n  mounted() {\n    // 虽然在created里面已经发出请求了，这里获取的innerHTML是空的（不要被控制台的打印的this.$refs['artcileContentRef']迷惑了）\n    // 因为上面getArticle是用的Promise，是异步的。所以不能在这里去做高亮的操作。应该在created里面发出请求并且得到响应后的$nextTick中去做高亮操作\n    console.log('articleContentRef', this.$refs['artcileContentRef'], this.$refs['artcileContentRef'].innerHTML);\n  },\n  methods: {\n    doTest() {\n      let div01 = document.querySelector('#div01');\n      div01.innerHTML = `<pre id=\"pre04\" class=\"line-numbers language-java\"><code>@SpringBootApplication\n@MapperScan(\"com.zzhua.mapper\")\npublic class VueApp {\n    public static void main(String[] args) {\n        SpringApplication.run(VueApp.class);\n    }\n}</code></pre>`;\n      // Prism.highlightElement(div01) // 不能传入div01\n      // Prism.highlightElement(document.querySelector('#pre04')) // 不能传入pre,它会把code给删了，虽然代码内容拆了并且样式还在\n      Prism.highlightElement(document.querySelector('#pre04 code'));\n    }\n  },\n  components: {}\n};","map":{"version":3,"names":["getArticle","prismjs","console","log","Prism","Object","keys","code","html","highlight","languages","javascript","code2","html2","java","name","data","htmlContent","content","created","$route","params","articleId","then","$nextTick","preBlocks","document","querySelectorAll","forEach","preBlock","classList","contains","add","highlightAll","mounted","$refs","innerHTML","methods","doTest","div01","querySelector","highlightElement","components"],"sources":["src/components/code/Code.vue"],"sourcesContent":["<style lang=\"scss\">\n\nbody {\n  margin: 0;\n}\n\n/* 整个滚动条 */\n::-webkit-scrollbar {\n  width: 10px;\n  height: 10px;\n}\n\n/* 滚动条上的滚动滑块,参考： 滚动条样式修改->https://blog.csdn.net/coder_jxd/article/details/124213962 */\n::-webkit-scrollbar-thumb {\n  background-color: #49b1f5;\n  /* 关键代码 */\n  background-image: -webkit-linear-gradient(45deg,\n      rgba(255, 255, 255, 0.4) 25%,\n      transparent 25%,\n      transparent 50%,\n      rgba(255, 255, 255, 0.4) 50%,\n      rgba(255, 255, 255, 0.4) 75%,\n      transparent 75%,\n      transparent);\n  border-radius: 32px;\n}\n\n/* 滚动条样式，参考： */\n/* 滚动条轨道 */\n::-webkit-scrollbar-track {\n  background-color: #dbeffd;\n  border-radius: 32px;\n}\n\n\n\n\n\nul,\nli {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\n.article {\n\n  width: 800px;\n  margin: 0 auto;\n  margin-top: 50px;\n\n  .article-content {\n    padding: 15px;\n    border-radius: 5px;\n    box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.16);\n  }\n\n\n}\n</style>\n\n<template>\n  <div class=\"article \">\n\n    <div id=\"div01\"></div>\n\n    <el-button @click=\"doTest\">div01</el-button>\n\n    <!-- 需要在pre或code上，使用language-xxx类名指定xxx语言，否则，prismjs是不会拆掉code标签里的代码内容的\n         对于下面这3个已经预先写好的代码内容，在引入prismjs后，文档加载完后，前面2个就会自动拆掉的，第3个没有指定语言，因此不会拆 -->\n    <pre id=\"pre01\" class=\"language-java\"><code class=\"line-numbers\"  data-prismjs-copy=\"复制代码\" data-prismjs-copy-success=\"复制成功\" data-prismjs-copy-timeout=\"1000\">\n@SpringBootApplication\n@MapperScan(\"com.zzhua.mapper\")\npublic class VueApp {\n    public static void main(String[] args) {\n        SpringApplication.run(VueApp.class);\n    }\n}\n        </code></pre>\n    <pre id=\"pre02\" class=\"line-numbers\"><code class=\"language-java\">\n@SpringBootApplication\n@MapperScan(\"com.zzhua.mapper\")\npublic class VueApp {\n    public static void main(String[] args) {\n        SpringApplication.run(VueApp.class);\n    }\n}\n        </code></pre>\n    <pre id=\"pre03\" class=\"line-numbers\"><code>\n@SpringBootApplication\n@MapperScan(\"com.zzhua.mapper\")\npublic class VueApp {\n    public static void main(String[] args) {\n        SpringApplication.run(VueApp.class);\n    }\n}\n        </code></pre>\n\n\n\n\n    <div ref=\"artcileContentRef\" class=\"article-content\" id=\"article-content\" v-html=\"htmlContent\"></div>\n  </div>\n</template>\n\n<script>\nimport { getArticle } from '@/api/articleApi'\n\n/* 引入prismjs */\nimport prismjs from 'prismjs'\n/* 引入样式主题 */\nimport 'prismjs/themes/prism-okaidia.css'\n\n\n/* 如果要支持高亮java语言的话，需要引入这个，其它的语言需要引入prism-{language}\n   否则，无法处理java语言。 */\nimport 'prismjs/components/prism-java';\n\n/* 引入行号插件，对应的js和css都要引入, 然后在code或pre上添加line-numbers这个类名就行了 */\nimport 'prismjs/plugins/line-numbers/prism-line-numbers.js'\nimport 'prismjs/plugins/line-numbers/prism-line-numbers.css'\n\nimport 'prismjs/plugins/toolbar/prism-toolbar.js'\nimport 'prismjs/plugins/toolbar/prism-toolbar.css'\n/* 在引入拷贝到剪贴板这个插件之前，要先引入上面这个prism-toolbar.js和prism-toolbar.css\n   然后，代码的右上角在高亮操作之后，就会出现拷贝代码的按钮，不过是英文的，可以使用data-prismjs-copy等属性修改为中文 */\nimport 'prismjs/plugins/copy-to-clipboard/prism-copy-to-clipboard.js'\n\nconsole.log(Prism);\nconsole.log(Prism === prismjs); // true 说明它会全局注册一个Prism对象供我们使用\n\n/* 输出：// ['manual', 'disableWorkerMessageHandler', 'util', 'languages', 'plugins', 'highlightAll', 'highlightAllUnder', 'highlightElement', 'highlight', 'tokenize', 'hooks', 'Token', 'filename'] */\nconsole.log('Prism', Object.keys(Prism));\n\nconst code = `var data = 1;`;\nconst html = Prism.highlight(code, prismjs.languages.javascript, 'javascript'); // 它默认已经引入了css/javascript，不需要引入js语言\n/* 输出：<span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> */\nconsole.log(html);\n\nconst code2 = `SpringApplication.run(VueApp.class);`;\nconst html2 = Prism.highlight(code2, prismjs.languages.java, 'java'); // 如果未引入java语言，这里会报错：Error: The language \"java\" has no grammar.\n/* 输出： <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">VueApp</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>*/\nconsole.log(html2);\n\n\n\n\nexport default {\n  name: 'Code',\n  data() {\n    return {\n      htmlContent: '',\n      content: '',\n    }\n  },\n  created() {\n    getArticle(this.$route.params.articleId).then(data => {\n      this.htmlContent = data.htmlContent\n      this.$nextTick(()=>{\n\n        /* 给文章里的代码添加行号，否则只有前面写在html里的code才有行号 */\n        let preBlocks = document.querySelectorAll('pre')\n        preBlocks.forEach(preBlock => {\n          if(!preBlock.classList.contains('line-numbers')) {\n            preBlock.classList.add('line-numbers')\n          }\n        })\n\n        // 当渲染完成之后，高亮所有代码（注意，只有pre或code里带了language-xxx语言的才会处理）\n        Prism.highlightAll()\n      })\n    })\n  },\n  mounted() {\n    // 虽然在created里面已经发出请求了，这里获取的innerHTML是空的（不要被控制台的打印的this.$refs['artcileContentRef']迷惑了）\n    // 因为上面getArticle是用的Promise，是异步的。所以不能在这里去做高亮的操作。应该在created里面发出请求并且得到响应后的$nextTick中去做高亮操作\n    console.log('articleContentRef',this.$refs['artcileContentRef'],this.$refs['artcileContentRef'].innerHTML);\n  },\n  methods: {\n    doTest() {\n      let div01 = document.querySelector('#div01')\n      div01.innerHTML = `<pre id=\"pre04\" class=\"line-numbers language-java\"><code>@SpringBootApplication\n@MapperScan(\"com.zzhua.mapper\")\npublic class VueApp {\n    public static void main(String[] args) {\n        SpringApplication.run(VueApp.class);\n    }\n}</code></pre>`\n      // Prism.highlightElement(div01) // 不能传入div01\n      // Prism.highlightElement(document.querySelector('#pre04')) // 不能传入pre,它会把code给删了，虽然代码内容拆了并且样式还在\n      Prism.highlightElement(document.querySelector('#pre04 code'))\n\n    }\n\n\n  },\n  components: {\n  }\n}\n</script>\n"],"mappings":"AA0GA,SAAAA,UAAA;;AAEA;AACA,OAAAC,OAAA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEAC,OAAA,CAAAC,GAAA,CAAAC,KAAA;AACAF,OAAA,CAAAC,GAAA,CAAAC,KAAA,KAAAH,OAAA;;AAEA;AACAC,OAAA,CAAAC,GAAA,UAAAE,MAAA,CAAAC,IAAA,CAAAF,KAAA;AAEA,MAAAG,IAAA;AACA,MAAAC,IAAA,GAAAJ,KAAA,CAAAK,SAAA,CAAAF,IAAA,EAAAN,OAAA,CAAAS,SAAA,CAAAC,UAAA;AACA;AACAT,OAAA,CAAAC,GAAA,CAAAK,IAAA;AAEA,MAAAI,KAAA;AACA,MAAAC,KAAA,GAAAT,KAAA,CAAAK,SAAA,CAAAG,KAAA,EAAAX,OAAA,CAAAS,SAAA,CAAAI,IAAA;AACA;AACAZ,OAAA,CAAAC,GAAA,CAAAU,KAAA;AAKA;EACAE,IAAA;EACAC,KAAA;IACA;MACAC,WAAA;MACAC,OAAA;IACA;EACA;EACAC,QAAA;IACAnB,UAAA,MAAAoB,MAAA,CAAAC,MAAA,CAAAC,SAAA,EAAAC,IAAA,CAAAP,IAAA;MACA,KAAAC,WAAA,GAAAD,IAAA,CAAAC,WAAA;MACA,KAAAO,SAAA;QAEA;QACA,IAAAC,SAAA,GAAAC,QAAA,CAAAC,gBAAA;QACAF,SAAA,CAAAG,OAAA,CAAAC,QAAA;UACA,KAAAA,QAAA,CAAAC,SAAA,CAAAC,QAAA;YACAF,QAAA,CAAAC,SAAA,CAAAE,GAAA;UACA;QACA;;QAEA;QACA5B,KAAA,CAAA6B,YAAA;MACA;IACA;EACA;EACAC,QAAA;IACA;IACA;IACAhC,OAAA,CAAAC,GAAA,2BAAAgC,KAAA,4BAAAA,KAAA,sBAAAC,SAAA;EACA;EACAC,OAAA;IACAC,OAAA;MACA,IAAAC,KAAA,GAAAb,QAAA,CAAAc,aAAA;MACAD,KAAA,CAAAH,SAAA;AACA;AACA;AACA;AACA;AACA;AACA;MACA;MACA;MACAhC,KAAA,CAAAqC,gBAAA,CAAAf,QAAA,CAAAc,aAAA;IAEA;EAGA;EACAE,UAAA,GACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}