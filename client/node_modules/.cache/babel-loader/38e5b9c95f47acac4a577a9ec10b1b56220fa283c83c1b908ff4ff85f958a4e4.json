{"ast":null,"code":"import { conductCheck } from '../../vc-tree/utils/conductUtil';\nimport { shallowRef, watchEffect } from 'vue';\nexport default ((rawLabeledValues, rawHalfCheckedValues, treeConduction, keyEntities, maxLevel, levelEntities) => {\n  const newRawCheckedValues = shallowRef([]);\n  const newRawHalfCheckedValues = shallowRef([]);\n  watchEffect(() => {\n    let checkedKeys = rawLabeledValues.value.map(_ref => {\n      let {\n        value\n      } = _ref;\n      return value;\n    });\n    let halfCheckedKeys = rawHalfCheckedValues.value.map(_ref2 => {\n      let {\n        value\n      } = _ref2;\n      return value;\n    });\n    const missingValues = checkedKeys.filter(key => !keyEntities.value[key]);\n    if (treeConduction.value) {\n      ({\n        checkedKeys,\n        halfCheckedKeys\n      } = conductCheck(checkedKeys, true, keyEntities.value, maxLevel.value, levelEntities.value));\n    }\n    newRawCheckedValues.value = Array.from(new Set([...missingValues, ...checkedKeys]));\n    newRawHalfCheckedValues.value = halfCheckedKeys;\n  });\n  return [newRawCheckedValues, newRawHalfCheckedValues];\n});","map":{"version":3,"names":["conductCheck","shallowRef","watchEffect","rawLabeledValues","rawHalfCheckedValues","treeConduction","keyEntities","maxLevel","levelEntities","newRawCheckedValues","newRawHalfCheckedValues","checkedKeys","value","map","_ref","halfCheckedKeys","_ref2","missingValues","filter","key","Array","from","Set"],"sources":["/Users/lpl/工作/Teamsupport/develop_help/node_modules/ant-design-vue/es/vc-tree-select/hooks/useCheckedKeys.js"],"sourcesContent":["import { conductCheck } from '../../vc-tree/utils/conductUtil';\nimport { shallowRef, watchEffect } from 'vue';\nexport default ((rawLabeledValues, rawHalfCheckedValues, treeConduction, keyEntities, maxLevel, levelEntities) => {\n  const newRawCheckedValues = shallowRef([]);\n  const newRawHalfCheckedValues = shallowRef([]);\n  watchEffect(() => {\n    let checkedKeys = rawLabeledValues.value.map(_ref => {\n      let {\n        value\n      } = _ref;\n      return value;\n    });\n    let halfCheckedKeys = rawHalfCheckedValues.value.map(_ref2 => {\n      let {\n        value\n      } = _ref2;\n      return value;\n    });\n    const missingValues = checkedKeys.filter(key => !keyEntities.value[key]);\n    if (treeConduction.value) {\n      ({\n        checkedKeys,\n        halfCheckedKeys\n      } = conductCheck(checkedKeys, true, keyEntities.value, maxLevel.value, levelEntities.value));\n    }\n    newRawCheckedValues.value = Array.from(new Set([...missingValues, ...checkedKeys]));\n    newRawHalfCheckedValues.value = halfCheckedKeys;\n  });\n  return [newRawCheckedValues, newRawHalfCheckedValues];\n});"],"mappings":"AAAA,SAASA,YAAY,QAAQ,iCAAiC;AAC9D,SAASC,UAAU,EAAEC,WAAW,QAAQ,KAAK;AAC7C,gBAAgB,CAACC,gBAAgB,EAAEC,oBAAoB,EAAEC,cAAc,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,aAAa,KAAK;EAChH,MAAMC,mBAAmB,GAAGR,UAAU,CAAC,EAAE,CAAC;EAC1C,MAAMS,uBAAuB,GAAGT,UAAU,CAAC,EAAE,CAAC;EAC9CC,WAAW,CAAC,MAAM;IAChB,IAAIS,WAAW,GAAGR,gBAAgB,CAACS,KAAK,CAACC,GAAG,CAACC,IAAI,IAAI;MACnD,IAAI;QACFF;MACF,CAAC,GAAGE,IAAI;MACR,OAAOF,KAAK;IACd,CAAC,CAAC;IACF,IAAIG,eAAe,GAAGX,oBAAoB,CAACQ,KAAK,CAACC,GAAG,CAACG,KAAK,IAAI;MAC5D,IAAI;QACFJ;MACF,CAAC,GAAGI,KAAK;MACT,OAAOJ,KAAK;IACd,CAAC,CAAC;IACF,MAAMK,aAAa,GAAGN,WAAW,CAACO,MAAM,CAACC,GAAG,IAAI,CAACb,WAAW,CAACM,KAAK,CAACO,GAAG,CAAC,CAAC;IACxE,IAAId,cAAc,CAACO,KAAK,EAAE;MACxB,CAAC;QACCD,WAAW;QACXI;MACF,CAAC,GAAGf,YAAY,CAACW,WAAW,EAAE,IAAI,EAAEL,WAAW,CAACM,KAAK,EAAEL,QAAQ,CAACK,KAAK,EAAEJ,aAAa,CAACI,KAAK,CAAC;IAC7F;IACAH,mBAAmB,CAACG,KAAK,GAAGQ,KAAK,CAACC,IAAI,CAAC,IAAIC,GAAG,CAAC,CAAC,GAAGL,aAAa,EAAE,GAAGN,WAAW,CAAC,CAAC,CAAC;IACnFD,uBAAuB,CAACE,KAAK,GAAGG,eAAe;EACjD,CAAC,CAAC;EACF,OAAO,CAACN,mBAAmB,EAAEC,uBAAuB,CAAC;AACvD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}