{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode } from \"vue\";\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { warning } from '../../vc-util/warning';\nimport { renderSlot, computed, watchEffect } from 'vue';\nimport { INTERNAL_COL_DEFINE } from '../utils/legacyUtil';\nimport { EXPAND_COLUMN } from '../constant';\nimport { useInjectSlots } from '../../table/context';\nfunction flatColumns(columns) {\n  return columns.reduce((list, column) => {\n    const {\n      fixed\n    } = column;\n    // Convert `fixed='true'` to `fixed='left'` instead\n    const parsedFixed = fixed === true ? 'left' : fixed;\n    const subColumns = column.children;\n    if (subColumns && subColumns.length > 0) {\n      return [...list, ...flatColumns(subColumns).map(subColum => _extends({\n        fixed: parsedFixed\n      }, subColum))];\n    }\n    return [...list, _extends(_extends({}, column), {\n      fixed: parsedFixed\n    })];\n  }, []);\n}\nfunction warningFixed(flattenColumns) {\n  let allFixLeft = true;\n  for (let i = 0; i < flattenColumns.length; i += 1) {\n    const col = flattenColumns[i];\n    if (allFixLeft && col.fixed !== 'left') {\n      allFixLeft = false;\n    } else if (!allFixLeft && col.fixed === 'left') {\n      warning(false, `Index ${i - 1} of \\`columns\\` missing \\`fixed='left'\\` prop.`);\n      break;\n    }\n  }\n  let allFixRight = true;\n  for (let i = flattenColumns.length - 1; i >= 0; i -= 1) {\n    const col = flattenColumns[i];\n    if (allFixRight && col.fixed !== 'right') {\n      allFixRight = false;\n    } else if (!allFixRight && col.fixed === 'right') {\n      warning(false, `Index ${i + 1} of \\`columns\\` missing \\`fixed='right'\\` prop.`);\n      break;\n    }\n  }\n}\nfunction revertForRtl(columns) {\n  return columns.map(column => {\n    const {\n        fixed\n      } = column,\n      restProps = __rest(column, [\"fixed\"]);\n    // Convert `fixed='left'` to `fixed='right'` instead\n    let parsedFixed = fixed;\n    if (fixed === 'left') {\n      parsedFixed = 'right';\n    } else if (fixed === 'right') {\n      parsedFixed = 'left';\n    }\n    return _extends({\n      fixed: parsedFixed\n    }, restProps);\n  });\n}\n/**\n * Parse `columns` & `children` into `columns`.\n */\nfunction useColumns(_ref, transformColumns) {\n  let {\n    prefixCls,\n    columns: baseColumns,\n    // children,\n    expandable,\n    expandedKeys,\n    getRowKey,\n    onTriggerExpand,\n    expandIcon,\n    rowExpandable,\n    expandIconColumnIndex,\n    direction,\n    expandRowByClick,\n    expandColumnWidth,\n    expandFixed\n  } = _ref;\n  const contextSlots = useInjectSlots();\n  // Add expand column\n  const withExpandColumns = computed(() => {\n    if (expandable.value) {\n      let cloneColumns = baseColumns.value.slice();\n      // >>> Warning if use `expandIconColumnIndex`\n      if (process.env.NODE_ENV !== 'production' && expandIconColumnIndex.value >= 0) {\n        warning(false, '`expandIconColumnIndex` is deprecated. Please use `Table.EXPAND_COLUMN` in `columns` instead.');\n      }\n      // >>> Insert expand column if not exist\n      if (!cloneColumns.includes(EXPAND_COLUMN)) {\n        const expandColIndex = expandIconColumnIndex.value || 0;\n        if (expandColIndex >= 0) {\n          cloneColumns.splice(expandColIndex, 0, EXPAND_COLUMN);\n        }\n      }\n      // >>> Deduplicate additional expand column\n      if (process.env.NODE_ENV !== 'production' && cloneColumns.filter(c => c === EXPAND_COLUMN).length > 1) {\n        warning(false, 'There exist more than one `EXPAND_COLUMN` in `columns`.');\n      }\n      const expandColumnIndex = cloneColumns.indexOf(EXPAND_COLUMN);\n      cloneColumns = cloneColumns.filter((column, index) => column !== EXPAND_COLUMN || index === expandColumnIndex);\n      // >>> Check if expand column need to fixed\n      const prevColumn = baseColumns.value[expandColumnIndex];\n      let fixedColumn;\n      if ((expandFixed.value === 'left' || expandFixed.value) && !expandIconColumnIndex.value) {\n        fixedColumn = 'left';\n      } else if ((expandFixed.value === 'right' || expandFixed.value) && expandIconColumnIndex.value === baseColumns.value.length) {\n        fixedColumn = 'right';\n      } else {\n        fixedColumn = prevColumn ? prevColumn.fixed : null;\n      }\n      const expandedKeysValue = expandedKeys.value;\n      const rowExpandableValue = rowExpandable.value;\n      const expandIconValue = expandIcon.value;\n      const prefixClsValue = prefixCls.value;\n      const expandRowByClickValue = expandRowByClick.value;\n      // >>> Create expandable column\n      const expandColumn = {\n        [INTERNAL_COL_DEFINE]: {\n          class: `${prefixCls.value}-expand-icon-col`,\n          columnType: 'EXPAND_COLUMN'\n        },\n        title: renderSlot(contextSlots.value, 'expandColumnTitle', {}, () => ['']),\n        fixed: fixedColumn,\n        class: `${prefixCls.value}-row-expand-icon-cell`,\n        width: expandColumnWidth.value,\n        customRender: _ref2 => {\n          let {\n            record,\n            index\n          } = _ref2;\n          const rowKey = getRowKey.value(record, index);\n          const expanded = expandedKeysValue.has(rowKey);\n          const recordExpandable = rowExpandableValue ? rowExpandableValue(record) : true;\n          const icon = expandIconValue({\n            prefixCls: prefixClsValue,\n            expanded,\n            expandable: recordExpandable,\n            record,\n            onExpand: onTriggerExpand\n          });\n          if (expandRowByClickValue) {\n            return _createVNode(\"span\", {\n              \"onClick\": e => e.stopPropagation()\n            }, [icon]);\n          }\n          return icon;\n        }\n      };\n      return cloneColumns.map(col => col === EXPAND_COLUMN ? expandColumn : col);\n    }\n    if (process.env.NODE_ENV !== 'production' && baseColumns.value.includes(EXPAND_COLUMN)) {\n      warning(false, '`expandable` is not config but there exist `EXPAND_COLUMN` in `columns`.');\n    }\n    return baseColumns.value.filter(col => col !== EXPAND_COLUMN);\n  });\n  const mergedColumns = computed(() => {\n    let finalColumns = withExpandColumns.value;\n    if (transformColumns.value) {\n      finalColumns = transformColumns.value(finalColumns);\n    }\n    // Always provides at least one column for table display\n    if (!finalColumns.length) {\n      finalColumns = [{\n        customRender: () => null\n      }];\n    }\n    return finalColumns;\n  });\n  const flattenColumns = computed(() => {\n    if (direction.value === 'rtl') {\n      return revertForRtl(flatColumns(mergedColumns.value));\n    }\n    return flatColumns(mergedColumns.value);\n  });\n  // Only check out of production since it's waste for each render\n  if (process.env.NODE_ENV !== 'production') {\n    watchEffect(() => {\n      setTimeout(() => {\n        warningFixed(flattenColumns.value);\n      });\n    });\n  }\n  return [mergedColumns, flattenColumns];\n}\nexport default useColumns;","map":{"version":3,"names":["_extends","createVNode","_createVNode","__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","warning","renderSlot","computed","watchEffect","INTERNAL_COL_DEFINE","EXPAND_COLUMN","useInjectSlots","flatColumns","columns","reduce","list","column","fixed","parsedFixed","subColumns","children","map","subColum","warningFixed","flattenColumns","allFixLeft","col","allFixRight","revertForRtl","restProps","useColumns","_ref","transformColumns","prefixCls","baseColumns","expandable","expandedKeys","getRowKey","onTriggerExpand","expandIcon","rowExpandable","expandIconColumnIndex","direction","expandRowByClick","expandColumnWidth","expandFixed","contextSlots","withExpandColumns","value","cloneColumns","slice","process","env","NODE_ENV","includes","expandColIndex","splice","filter","c","expandColumnIndex","index","prevColumn","fixedColumn","expandedKeysValue","rowExpandableValue","expandIconValue","prefixClsValue","expandRowByClickValue","expandColumn","class","columnType","title","width","customRender","_ref2","record","rowKey","expanded","has","recordExpandable","icon","onExpand","stopPropagation","mergedColumns","finalColumns","setTimeout"],"sources":["/Users/lpl/工作/Teamsupport/develop_help/node_modules/ant-design-vue/es/vc-table/hooks/useColumns.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createVNode as _createVNode } from \"vue\";\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { warning } from '../../vc-util/warning';\nimport { renderSlot, computed, watchEffect } from 'vue';\nimport { INTERNAL_COL_DEFINE } from '../utils/legacyUtil';\nimport { EXPAND_COLUMN } from '../constant';\nimport { useInjectSlots } from '../../table/context';\nfunction flatColumns(columns) {\n  return columns.reduce((list, column) => {\n    const {\n      fixed\n    } = column;\n    // Convert `fixed='true'` to `fixed='left'` instead\n    const parsedFixed = fixed === true ? 'left' : fixed;\n    const subColumns = column.children;\n    if (subColumns && subColumns.length > 0) {\n      return [...list, ...flatColumns(subColumns).map(subColum => _extends({\n        fixed: parsedFixed\n      }, subColum))];\n    }\n    return [...list, _extends(_extends({}, column), {\n      fixed: parsedFixed\n    })];\n  }, []);\n}\nfunction warningFixed(flattenColumns) {\n  let allFixLeft = true;\n  for (let i = 0; i < flattenColumns.length; i += 1) {\n    const col = flattenColumns[i];\n    if (allFixLeft && col.fixed !== 'left') {\n      allFixLeft = false;\n    } else if (!allFixLeft && col.fixed === 'left') {\n      warning(false, `Index ${i - 1} of \\`columns\\` missing \\`fixed='left'\\` prop.`);\n      break;\n    }\n  }\n  let allFixRight = true;\n  for (let i = flattenColumns.length - 1; i >= 0; i -= 1) {\n    const col = flattenColumns[i];\n    if (allFixRight && col.fixed !== 'right') {\n      allFixRight = false;\n    } else if (!allFixRight && col.fixed === 'right') {\n      warning(false, `Index ${i + 1} of \\`columns\\` missing \\`fixed='right'\\` prop.`);\n      break;\n    }\n  }\n}\nfunction revertForRtl(columns) {\n  return columns.map(column => {\n    const {\n        fixed\n      } = column,\n      restProps = __rest(column, [\"fixed\"]);\n    // Convert `fixed='left'` to `fixed='right'` instead\n    let parsedFixed = fixed;\n    if (fixed === 'left') {\n      parsedFixed = 'right';\n    } else if (fixed === 'right') {\n      parsedFixed = 'left';\n    }\n    return _extends({\n      fixed: parsedFixed\n    }, restProps);\n  });\n}\n/**\n * Parse `columns` & `children` into `columns`.\n */\nfunction useColumns(_ref, transformColumns) {\n  let {\n    prefixCls,\n    columns: baseColumns,\n    // children,\n    expandable,\n    expandedKeys,\n    getRowKey,\n    onTriggerExpand,\n    expandIcon,\n    rowExpandable,\n    expandIconColumnIndex,\n    direction,\n    expandRowByClick,\n    expandColumnWidth,\n    expandFixed\n  } = _ref;\n  const contextSlots = useInjectSlots();\n  // Add expand column\n  const withExpandColumns = computed(() => {\n    if (expandable.value) {\n      let cloneColumns = baseColumns.value.slice();\n      // >>> Warning if use `expandIconColumnIndex`\n      if (process.env.NODE_ENV !== 'production' && expandIconColumnIndex.value >= 0) {\n        warning(false, '`expandIconColumnIndex` is deprecated. Please use `Table.EXPAND_COLUMN` in `columns` instead.');\n      }\n      // >>> Insert expand column if not exist\n      if (!cloneColumns.includes(EXPAND_COLUMN)) {\n        const expandColIndex = expandIconColumnIndex.value || 0;\n        if (expandColIndex >= 0) {\n          cloneColumns.splice(expandColIndex, 0, EXPAND_COLUMN);\n        }\n      }\n      // >>> Deduplicate additional expand column\n      if (process.env.NODE_ENV !== 'production' && cloneColumns.filter(c => c === EXPAND_COLUMN).length > 1) {\n        warning(false, 'There exist more than one `EXPAND_COLUMN` in `columns`.');\n      }\n      const expandColumnIndex = cloneColumns.indexOf(EXPAND_COLUMN);\n      cloneColumns = cloneColumns.filter((column, index) => column !== EXPAND_COLUMN || index === expandColumnIndex);\n      // >>> Check if expand column need to fixed\n      const prevColumn = baseColumns.value[expandColumnIndex];\n      let fixedColumn;\n      if ((expandFixed.value === 'left' || expandFixed.value) && !expandIconColumnIndex.value) {\n        fixedColumn = 'left';\n      } else if ((expandFixed.value === 'right' || expandFixed.value) && expandIconColumnIndex.value === baseColumns.value.length) {\n        fixedColumn = 'right';\n      } else {\n        fixedColumn = prevColumn ? prevColumn.fixed : null;\n      }\n      const expandedKeysValue = expandedKeys.value;\n      const rowExpandableValue = rowExpandable.value;\n      const expandIconValue = expandIcon.value;\n      const prefixClsValue = prefixCls.value;\n      const expandRowByClickValue = expandRowByClick.value;\n      // >>> Create expandable column\n      const expandColumn = {\n        [INTERNAL_COL_DEFINE]: {\n          class: `${prefixCls.value}-expand-icon-col`,\n          columnType: 'EXPAND_COLUMN'\n        },\n        title: renderSlot(contextSlots.value, 'expandColumnTitle', {}, () => ['']),\n        fixed: fixedColumn,\n        class: `${prefixCls.value}-row-expand-icon-cell`,\n        width: expandColumnWidth.value,\n        customRender: _ref2 => {\n          let {\n            record,\n            index\n          } = _ref2;\n          const rowKey = getRowKey.value(record, index);\n          const expanded = expandedKeysValue.has(rowKey);\n          const recordExpandable = rowExpandableValue ? rowExpandableValue(record) : true;\n          const icon = expandIconValue({\n            prefixCls: prefixClsValue,\n            expanded,\n            expandable: recordExpandable,\n            record,\n            onExpand: onTriggerExpand\n          });\n          if (expandRowByClickValue) {\n            return _createVNode(\"span\", {\n              \"onClick\": e => e.stopPropagation()\n            }, [icon]);\n          }\n          return icon;\n        }\n      };\n      return cloneColumns.map(col => col === EXPAND_COLUMN ? expandColumn : col);\n    }\n    if (process.env.NODE_ENV !== 'production' && baseColumns.value.includes(EXPAND_COLUMN)) {\n      warning(false, '`expandable` is not config but there exist `EXPAND_COLUMN` in `columns`.');\n    }\n    return baseColumns.value.filter(col => col !== EXPAND_COLUMN);\n  });\n  const mergedColumns = computed(() => {\n    let finalColumns = withExpandColumns.value;\n    if (transformColumns.value) {\n      finalColumns = transformColumns.value(finalColumns);\n    }\n    // Always provides at least one column for table display\n    if (!finalColumns.length) {\n      finalColumns = [{\n        customRender: () => null\n      }];\n    }\n    return finalColumns;\n  });\n  const flattenColumns = computed(() => {\n    if (direction.value === 'rtl') {\n      return revertForRtl(flatColumns(mergedColumns.value));\n    }\n    return flatColumns(mergedColumns.value);\n  });\n  // Only check out of production since it's waste for each render\n  if (process.env.NODE_ENV !== 'production') {\n    watchEffect(() => {\n      setTimeout(() => {\n        warningFixed(flattenColumns.value);\n      });\n    });\n  }\n  return [mergedColumns, flattenColumns];\n}\nexport default useColumns;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}