{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { createVNode as _createVNode } from \"vue\";\n/* eslint-disable no-lonely-if */\n/**\n * Legacy code. Should avoid to use if you are new to import these code.\n */\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport TreeNode from './TreeNode';\nimport { warning } from '../vc-util/warning';\nexport function arrDel(list, value) {\n  if (!list) return [];\n  const clone = list.slice();\n  const index = clone.indexOf(value);\n  if (index >= 0) {\n    clone.splice(index, 1);\n  }\n  return clone;\n}\nexport function arrAdd(list, value) {\n  const clone = (list || []).slice();\n  if (clone.indexOf(value) === -1) {\n    clone.push(value);\n  }\n  return clone;\n}\nexport function posToArr(pos) {\n  return pos.split('-');\n}\nexport function getPosition(level, index) {\n  return `${level}-${index}`;\n}\nexport function isTreeNode(node) {\n  return node && node.type && node.type.isTreeNode;\n}\nexport function getDragChildrenKeys(dragNodeKey, keyEntities) {\n  // not contains self\n  // self for left or right drag\n  const dragChildrenKeys = [];\n  const entity = keyEntities[dragNodeKey];\n  function dig() {\n    let list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    list.forEach(_ref => {\n      let {\n        key,\n        children\n      } = _ref;\n      dragChildrenKeys.push(key);\n      dig(children);\n    });\n  }\n  dig(entity.children);\n  return dragChildrenKeys;\n}\nexport function isLastChild(treeNodeEntity) {\n  if (treeNodeEntity.parent) {\n    const posArr = posToArr(treeNodeEntity.pos);\n    return Number(posArr[posArr.length - 1]) === treeNodeEntity.parent.children.length - 1;\n  }\n  return false;\n}\nexport function isFirstChild(treeNodeEntity) {\n  const posArr = posToArr(treeNodeEntity.pos);\n  return Number(posArr[posArr.length - 1]) === 0;\n}\n// Only used when drag, not affect SSR.\nexport function calcDropPosition(event, dragNode, targetNode, indent, startMousePosition, allowDrop, flattenedNodes, keyEntities, expandKeysSet, direction) {\n  var _a;\n  const {\n    clientX,\n    clientY\n  } = event;\n  const {\n    top,\n    height\n  } = event.target.getBoundingClientRect();\n  // optional chain for testing\n  const horizontalMouseOffset = (direction === 'rtl' ? -1 : 1) * (((startMousePosition === null || startMousePosition === void 0 ? void 0 : startMousePosition.x) || 0) - clientX);\n  const rawDropLevelOffset = (horizontalMouseOffset - 12) / indent;\n  // find abstract drop node by horizontal offset\n  let abstractDropNodeEntity = keyEntities[targetNode.eventKey];\n  if (clientY < top + height / 2) {\n    // first half, set abstract drop node to previous node\n    const nodeIndex = flattenedNodes.findIndex(flattenedNode => flattenedNode.key === abstractDropNodeEntity.key);\n    const prevNodeIndex = nodeIndex <= 0 ? 0 : nodeIndex - 1;\n    const prevNodeKey = flattenedNodes[prevNodeIndex].key;\n    abstractDropNodeEntity = keyEntities[prevNodeKey];\n  }\n  const initialAbstractDropNodeKey = abstractDropNodeEntity.key;\n  const abstractDragOverEntity = abstractDropNodeEntity;\n  const dragOverNodeKey = abstractDropNodeEntity.key;\n  let dropPosition = 0;\n  let dropLevelOffset = 0;\n  // Only allow cross level drop when dragging on a non-expanded node\n  if (!expandKeysSet.has(initialAbstractDropNodeKey)) {\n    for (let i = 0; i < rawDropLevelOffset; i += 1) {\n      if (isLastChild(abstractDropNodeEntity)) {\n        abstractDropNodeEntity = abstractDropNodeEntity.parent;\n        dropLevelOffset += 1;\n      } else {\n        break;\n      }\n    }\n  }\n  const abstractDragDataNode = dragNode.eventData;\n  const abstractDropDataNode = abstractDropNodeEntity.node;\n  let dropAllowed = true;\n  if (isFirstChild(abstractDropNodeEntity) && abstractDropNodeEntity.level === 0 && clientY < top + height / 2 && allowDrop({\n    dragNode: abstractDragDataNode,\n    dropNode: abstractDropDataNode,\n    dropPosition: -1\n  }) && abstractDropNodeEntity.key === targetNode.eventKey) {\n    // first half of first node in first level\n    dropPosition = -1;\n  } else if ((abstractDragOverEntity.children || []).length && expandKeysSet.has(dragOverNodeKey)) {\n    // drop on expanded node\n    // only allow drop inside\n    if (allowDrop({\n      dragNode: abstractDragDataNode,\n      dropNode: abstractDropDataNode,\n      dropPosition: 0\n    })) {\n      dropPosition = 0;\n    } else {\n      dropAllowed = false;\n    }\n  } else if (dropLevelOffset === 0) {\n    if (rawDropLevelOffset > -1.5) {\n      // | Node     | <- abstractDropNode\n      // | -^-===== | <- mousePosition\n      // 1. try drop after\n      // 2. do not allow drop\n      if (allowDrop({\n        dragNode: abstractDragDataNode,\n        dropNode: abstractDropDataNode,\n        dropPosition: 1\n      })) {\n        dropPosition = 1;\n      } else {\n        dropAllowed = false;\n      }\n    } else {\n      // | Node     | <- abstractDropNode\n      // | ---==^== | <- mousePosition\n      // whether it has children or doesn't has children\n      // always\n      // 1. try drop inside\n      // 2. try drop after\n      // 3. do not allow drop\n      if (allowDrop({\n        dragNode: abstractDragDataNode,\n        dropNode: abstractDropDataNode,\n        dropPosition: 0\n      })) {\n        dropPosition = 0;\n      } else if (allowDrop({\n        dragNode: abstractDragDataNode,\n        dropNode: abstractDropDataNode,\n        dropPosition: 1\n      })) {\n        dropPosition = 1;\n      } else {\n        dropAllowed = false;\n      }\n    }\n  } else {\n    // | Node1 | <- abstractDropNode\n    //      |  Node2  |\n    // --^--|----=====| <- mousePosition\n    // 1. try insert after Node1\n    // 2. do not allow drop\n    if (allowDrop({\n      dragNode: abstractDragDataNode,\n      dropNode: abstractDropDataNode,\n      dropPosition: 1\n    })) {\n      dropPosition = 1;\n    } else {\n      dropAllowed = false;\n    }\n  }\n  return {\n    dropPosition,\n    dropLevelOffset,\n    dropTargetKey: abstractDropNodeEntity.key,\n    dropTargetPos: abstractDropNodeEntity.pos,\n    dragOverNodeKey,\n    dropContainerKey: dropPosition === 0 ? null : ((_a = abstractDropNodeEntity.parent) === null || _a === void 0 ? void 0 : _a.key) || null,\n    dropAllowed\n  };\n}\n/**\n * Return selectedKeys according with multiple prop\n * @param selectedKeys\n * @param props\n * @returns [string]\n */\nexport function calcSelectedKeys(selectedKeys, props) {\n  if (!selectedKeys) return undefined;\n  const {\n    multiple\n  } = props;\n  if (multiple) {\n    return selectedKeys.slice();\n  }\n  if (selectedKeys.length) {\n    return [selectedKeys[0]];\n  }\n  return selectedKeys;\n}\nconst internalProcessProps = props => props;\nexport function convertDataToTree(treeData, processor) {\n  if (!treeData) return [];\n  const {\n    processProps = internalProcessProps\n  } = processor || {};\n  const list = Array.isArray(treeData) ? treeData : [treeData];\n  return list.map(_a => {\n    var {\n        children\n      } = _a,\n      props = __rest(_a, [\"children\"]);\n    const childrenNodes = convertDataToTree(children, processor);\n    return _createVNode(TreeNode, _objectSpread({\n      \"key\": props.key\n    }, processProps(props)), {\n      default: () => [childrenNodes]\n    });\n  });\n}\n/**\n * Parse `checkedKeys` to { checkedKeys, halfCheckedKeys } style\n */\nexport function parseCheckedKeys(keys) {\n  if (!keys) {\n    return null;\n  }\n  // Convert keys to object format\n  let keyProps;\n  if (Array.isArray(keys)) {\n    // [Legacy] Follow the api doc\n    keyProps = {\n      checkedKeys: keys,\n      halfCheckedKeys: undefined\n    };\n  } else if (typeof keys === 'object') {\n    keyProps = {\n      checkedKeys: keys.checked || undefined,\n      halfCheckedKeys: keys.halfChecked || undefined\n    };\n  } else {\n    warning(false, '`checkedKeys` is not an array or an object');\n    return null;\n  }\n  return keyProps;\n}\n/**\n * If user use `autoExpandParent` we should get the list of parent node\n * @param keyList\n * @param keyEntities\n */\nexport function conductExpandParent(keyList, keyEntities) {\n  const expandedKeys = new Set();\n  function conductUp(key) {\n    if (expandedKeys.has(key)) return;\n    const entity = keyEntities[key];\n    if (!entity) return;\n    expandedKeys.add(key);\n    const {\n      parent,\n      node\n    } = entity;\n    if (node.disabled) return;\n    if (parent) {\n      conductUp(parent.key);\n    }\n  }\n  (keyList || []).forEach(key => {\n    conductUp(key);\n  });\n  return [...expandedKeys];\n}","map":{"version":3,"names":["_objectSpread","createVNode","_createVNode","__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","TreeNode","warning","arrDel","list","value","clone","slice","index","splice","arrAdd","push","posToArr","pos","split","getPosition","level","isTreeNode","node","type","getDragChildrenKeys","dragNodeKey","keyEntities","dragChildrenKeys","entity","dig","arguments","undefined","forEach","_ref","key","children","isLastChild","treeNodeEntity","parent","posArr","Number","isFirstChild","calcDropPosition","event","dragNode","targetNode","indent","startMousePosition","allowDrop","flattenedNodes","expandKeysSet","direction","_a","clientX","clientY","top","height","target","getBoundingClientRect","horizontalMouseOffset","x","rawDropLevelOffset","abstractDropNodeEntity","eventKey","nodeIndex","findIndex","flattenedNode","prevNodeIndex","prevNodeKey","initialAbstractDropNodeKey","abstractDragOverEntity","dragOverNodeKey","dropPosition","dropLevelOffset","has","abstractDragDataNode","eventData","abstractDropDataNode","dropAllowed","dropNode","dropTargetKey","dropTargetPos","dropContainerKey","calcSelectedKeys","selectedKeys","props","multiple","internalProcessProps","convertDataToTree","treeData","processor","processProps","Array","isArray","map","childrenNodes","default","parseCheckedKeys","keys","keyProps","checkedKeys","halfCheckedKeys","checked","halfChecked","conductExpandParent","keyList","expandedKeys","Set","conductUp","add","disabled"],"sources":["/Users/lpl/工作/Teamsupport/develop_help/node_modules/ant-design-vue/es/vc-tree/util.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { createVNode as _createVNode } from \"vue\";\n/* eslint-disable no-lonely-if */\n/**\n * Legacy code. Should avoid to use if you are new to import these code.\n */\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport TreeNode from './TreeNode';\nimport { warning } from '../vc-util/warning';\nexport function arrDel(list, value) {\n  if (!list) return [];\n  const clone = list.slice();\n  const index = clone.indexOf(value);\n  if (index >= 0) {\n    clone.splice(index, 1);\n  }\n  return clone;\n}\nexport function arrAdd(list, value) {\n  const clone = (list || []).slice();\n  if (clone.indexOf(value) === -1) {\n    clone.push(value);\n  }\n  return clone;\n}\nexport function posToArr(pos) {\n  return pos.split('-');\n}\nexport function getPosition(level, index) {\n  return `${level}-${index}`;\n}\nexport function isTreeNode(node) {\n  return node && node.type && node.type.isTreeNode;\n}\nexport function getDragChildrenKeys(dragNodeKey, keyEntities) {\n  // not contains self\n  // self for left or right drag\n  const dragChildrenKeys = [];\n  const entity = keyEntities[dragNodeKey];\n  function dig() {\n    let list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    list.forEach(_ref => {\n      let {\n        key,\n        children\n      } = _ref;\n      dragChildrenKeys.push(key);\n      dig(children);\n    });\n  }\n  dig(entity.children);\n  return dragChildrenKeys;\n}\nexport function isLastChild(treeNodeEntity) {\n  if (treeNodeEntity.parent) {\n    const posArr = posToArr(treeNodeEntity.pos);\n    return Number(posArr[posArr.length - 1]) === treeNodeEntity.parent.children.length - 1;\n  }\n  return false;\n}\nexport function isFirstChild(treeNodeEntity) {\n  const posArr = posToArr(treeNodeEntity.pos);\n  return Number(posArr[posArr.length - 1]) === 0;\n}\n// Only used when drag, not affect SSR.\nexport function calcDropPosition(event, dragNode, targetNode, indent, startMousePosition, allowDrop, flattenedNodes, keyEntities, expandKeysSet, direction) {\n  var _a;\n  const {\n    clientX,\n    clientY\n  } = event;\n  const {\n    top,\n    height\n  } = event.target.getBoundingClientRect();\n  // optional chain for testing\n  const horizontalMouseOffset = (direction === 'rtl' ? -1 : 1) * (((startMousePosition === null || startMousePosition === void 0 ? void 0 : startMousePosition.x) || 0) - clientX);\n  const rawDropLevelOffset = (horizontalMouseOffset - 12) / indent;\n  // find abstract drop node by horizontal offset\n  let abstractDropNodeEntity = keyEntities[targetNode.eventKey];\n  if (clientY < top + height / 2) {\n    // first half, set abstract drop node to previous node\n    const nodeIndex = flattenedNodes.findIndex(flattenedNode => flattenedNode.key === abstractDropNodeEntity.key);\n    const prevNodeIndex = nodeIndex <= 0 ? 0 : nodeIndex - 1;\n    const prevNodeKey = flattenedNodes[prevNodeIndex].key;\n    abstractDropNodeEntity = keyEntities[prevNodeKey];\n  }\n  const initialAbstractDropNodeKey = abstractDropNodeEntity.key;\n  const abstractDragOverEntity = abstractDropNodeEntity;\n  const dragOverNodeKey = abstractDropNodeEntity.key;\n  let dropPosition = 0;\n  let dropLevelOffset = 0;\n  // Only allow cross level drop when dragging on a non-expanded node\n  if (!expandKeysSet.has(initialAbstractDropNodeKey)) {\n    for (let i = 0; i < rawDropLevelOffset; i += 1) {\n      if (isLastChild(abstractDropNodeEntity)) {\n        abstractDropNodeEntity = abstractDropNodeEntity.parent;\n        dropLevelOffset += 1;\n      } else {\n        break;\n      }\n    }\n  }\n  const abstractDragDataNode = dragNode.eventData;\n  const abstractDropDataNode = abstractDropNodeEntity.node;\n  let dropAllowed = true;\n  if (isFirstChild(abstractDropNodeEntity) && abstractDropNodeEntity.level === 0 && clientY < top + height / 2 && allowDrop({\n    dragNode: abstractDragDataNode,\n    dropNode: abstractDropDataNode,\n    dropPosition: -1\n  }) && abstractDropNodeEntity.key === targetNode.eventKey) {\n    // first half of first node in first level\n    dropPosition = -1;\n  } else if ((abstractDragOverEntity.children || []).length && expandKeysSet.has(dragOverNodeKey)) {\n    // drop on expanded node\n    // only allow drop inside\n    if (allowDrop({\n      dragNode: abstractDragDataNode,\n      dropNode: abstractDropDataNode,\n      dropPosition: 0\n    })) {\n      dropPosition = 0;\n    } else {\n      dropAllowed = false;\n    }\n  } else if (dropLevelOffset === 0) {\n    if (rawDropLevelOffset > -1.5) {\n      // | Node     | <- abstractDropNode\n      // | -^-===== | <- mousePosition\n      // 1. try drop after\n      // 2. do not allow drop\n      if (allowDrop({\n        dragNode: abstractDragDataNode,\n        dropNode: abstractDropDataNode,\n        dropPosition: 1\n      })) {\n        dropPosition = 1;\n      } else {\n        dropAllowed = false;\n      }\n    } else {\n      // | Node     | <- abstractDropNode\n      // | ---==^== | <- mousePosition\n      // whether it has children or doesn't has children\n      // always\n      // 1. try drop inside\n      // 2. try drop after\n      // 3. do not allow drop\n      if (allowDrop({\n        dragNode: abstractDragDataNode,\n        dropNode: abstractDropDataNode,\n        dropPosition: 0\n      })) {\n        dropPosition = 0;\n      } else if (allowDrop({\n        dragNode: abstractDragDataNode,\n        dropNode: abstractDropDataNode,\n        dropPosition: 1\n      })) {\n        dropPosition = 1;\n      } else {\n        dropAllowed = false;\n      }\n    }\n  } else {\n    // | Node1 | <- abstractDropNode\n    //      |  Node2  |\n    // --^--|----=====| <- mousePosition\n    // 1. try insert after Node1\n    // 2. do not allow drop\n    if (allowDrop({\n      dragNode: abstractDragDataNode,\n      dropNode: abstractDropDataNode,\n      dropPosition: 1\n    })) {\n      dropPosition = 1;\n    } else {\n      dropAllowed = false;\n    }\n  }\n  return {\n    dropPosition,\n    dropLevelOffset,\n    dropTargetKey: abstractDropNodeEntity.key,\n    dropTargetPos: abstractDropNodeEntity.pos,\n    dragOverNodeKey,\n    dropContainerKey: dropPosition === 0 ? null : ((_a = abstractDropNodeEntity.parent) === null || _a === void 0 ? void 0 : _a.key) || null,\n    dropAllowed\n  };\n}\n/**\n * Return selectedKeys according with multiple prop\n * @param selectedKeys\n * @param props\n * @returns [string]\n */\nexport function calcSelectedKeys(selectedKeys, props) {\n  if (!selectedKeys) return undefined;\n  const {\n    multiple\n  } = props;\n  if (multiple) {\n    return selectedKeys.slice();\n  }\n  if (selectedKeys.length) {\n    return [selectedKeys[0]];\n  }\n  return selectedKeys;\n}\nconst internalProcessProps = props => props;\nexport function convertDataToTree(treeData, processor) {\n  if (!treeData) return [];\n  const {\n    processProps = internalProcessProps\n  } = processor || {};\n  const list = Array.isArray(treeData) ? treeData : [treeData];\n  return list.map(_a => {\n    var {\n        children\n      } = _a,\n      props = __rest(_a, [\"children\"]);\n    const childrenNodes = convertDataToTree(children, processor);\n    return _createVNode(TreeNode, _objectSpread({\n      \"key\": props.key\n    }, processProps(props)), {\n      default: () => [childrenNodes]\n    });\n  });\n}\n/**\n * Parse `checkedKeys` to { checkedKeys, halfCheckedKeys } style\n */\nexport function parseCheckedKeys(keys) {\n  if (!keys) {\n    return null;\n  }\n  // Convert keys to object format\n  let keyProps;\n  if (Array.isArray(keys)) {\n    // [Legacy] Follow the api doc\n    keyProps = {\n      checkedKeys: keys,\n      halfCheckedKeys: undefined\n    };\n  } else if (typeof keys === 'object') {\n    keyProps = {\n      checkedKeys: keys.checked || undefined,\n      halfCheckedKeys: keys.halfChecked || undefined\n    };\n  } else {\n    warning(false, '`checkedKeys` is not an array or an object');\n    return null;\n  }\n  return keyProps;\n}\n/**\n * If user use `autoExpandParent` we should get the list of parent node\n * @param keyList\n * @param keyEntities\n */\nexport function conductExpandParent(keyList, keyEntities) {\n  const expandedKeys = new Set();\n  function conductUp(key) {\n    if (expandedKeys.has(key)) return;\n    const entity = keyEntities[key];\n    if (!entity) return;\n    expandedKeys.add(key);\n    const {\n      parent,\n      node\n    } = entity;\n    if (node.disabled) return;\n    if (parent) {\n      conductUp(parent.key);\n    }\n  }\n  (keyList || []).forEach(key => {\n    conductUp(key);\n  });\n  return [...expandedKeys];\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}