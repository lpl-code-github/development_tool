{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Code from \"@/components/code/Code\";\nexport default {\n  name: \"Statistics\",\n  components: {\n    Code\n  },\n  props: {\n    openFlag: {\n      type: Boolean,\n      required: true\n    },\n    systemStatus: {\n      type: Object,\n      required: true\n    },\n    top5ps: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      echartsStyles: {\n        width: '100%',\n        height: \"100%\"\n      },\n      myChart: null,\n      visible: false,\n      apiInfo: null,\n      apiCountInfo: [{\n        value: 0,\n        name: 'Demo'\n      }]\n    };\n  },\n  watch: {\n    openFlag: {\n      handler: function (newVal, oldVal) {\n        if (newVal === true) {\n          this.getApiInfo();\n          this.echarts();\n        } else {\n          this.visible = newVal;\n        }\n      },\n      // 深度观察监听\n      deep: true\n    }\n  },\n  computed: {\n    // 对cpu、内存占用率值判断 设置对应的颜色\n    computedColor() {\n      return function (item) {\n        if (item <= 30) {\n          return '#139606';\n        }\n        if (item > 30 && item <= 80) {\n          return '#e55013';\n        }\n        return '#cf1322';\n      };\n    }\n  },\n  mounted() {\n    this.visible = this.openFlag;\n  },\n  methods: {\n    // 抽屉关闭\n    onClose() {\n      // 向父组件发送状态\n      this.$emit('updateDrawerStatus', false);\n    },\n    /*\n      一些请求事件\n     */\n    // 获取api信息并打开渲染echarts图表\n    async getApiInfo() {\n      await this.$request.getR1Api().then(res => {\n        if (res.status !== 200) {\n          this.$emit('updateDrawerStatus', false);\n        } else {\n          var data = res.data.data;\n          this.visible = true;\n          this.apiInfo = data;\n          var temp = [];\n          for (var key in data.sum.detail) {\n            var newObj = {\n              value: data.sum.detail[key],\n              name: key\n            };\n            temp.push(newObj);\n          }\n          this.apiCountInfo = temp;\n        }\n      });\n      this.echarts();\n    },\n    echarts() {\n      if (this.myChart != null && this.myChart !== \"\" && this.myChart !== undefined) {\n        this.myChart.dispose();\n      }\n      this.myChart = this.$echarts.init(document.getElementById('main'));\n      this.myChart.setOption({\n        tooltip: {\n          trigger: 'item'\n        },\n        series: [{\n          name: 'Access From',\n          type: 'pie',\n          radius: ['40%', '70%'],\n          // adjust the start angle\n          startAngle: 180,\n          label: {\n            show: true,\n            formatter(param) {\n              // correct the percentage\n              return param.name + ' (' + param.percent + '%)';\n            }\n          },\n          data: this.apiCountInfo\n        }]\n      });\n\n      // 让图表跟随屏幕自动的去适应\n      window.addEventListener('resize', () => {\n        this.myChart.resize();\n      });\n    },\n    afterVisibleChange(val) {\n      console.log('visible', val);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}