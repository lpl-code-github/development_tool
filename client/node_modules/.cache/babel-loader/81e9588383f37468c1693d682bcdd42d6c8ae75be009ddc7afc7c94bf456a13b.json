{"ast":null,"code":"import infiniteScroll from 'vue-infinite-scroll';\nexport default {\n  name: \"InfiniteScroll\",\n  props: {\n    sourceData: {\n      type: Array,\n      required: true\n    }\n  },\n  directives: {\n    infiniteScroll\n  },\n  data() {\n    return {\n      loading: false,\n      busy: false,\n      listData: [],\n      showData: [],\n      loadedCount: 0,\n      // 已经加载的数据数量\n      perPage: 10 // 每页的数据数量\n    };\n  },\n\n  computed: {\n    splitTime() {\n      return function (item) {\n        const [date, time] = item.split(' ');\n        return time;\n      };\n    }\n  },\n  watch: {\n    sourceData: {\n      handler: function (newVal, oldVal) {},\n      // 深度观察监听\n      deep: true\n    }\n  },\n  mounted() {\n    this.loadedCount = 0;\n    this.showData = [];\n    this.listData = this.sourceData;\n    const startIndex = this.loadedCount;\n    const endIndex = this.loadedCount + this.perPage;\n\n    // 根据需要加载的数据范围从数据源中截取数据\n    const newData = this.listData.slice(startIndex, endIndex);\n\n    // 将新加载的数据添加到已有数据列表中\n    this.showData = [...this.showData, ...newData];\n    // 更新已加载数据的数量\n    this.loadedCount = endIndex;\n    console.log(this.showData);\n  },\n  methods: {\n    handleInfiniteOnLoad() {\n      // 开始加载\n      this.loading = true;\n\n      // 模拟异步加载数据\n      setTimeout(() => {\n        const startIndex = this.loadedCount;\n        const endIndex = this.loadedCount + this.perPage;\n\n        // 根据需要加载的数据范围从数据源中截取数据\n        const newData = this.listData.slice(startIndex, endIndex);\n\n        // 将新加载的数据添加到已有数据列表中\n        this.showData = [...this.showData, ...newData];\n\n        // 更新已加载数据的数量\n        this.loadedCount = endIndex;\n\n        // 加载结束\n\n        this.loading = false;\n        if (newData.length < this.perPage) {\n          // 如果新加载的数据少于 perPage 条，说明已经加载完全部数据，隐藏加载更多按钮\n          this.busy = true;\n        } else {\n          this.busy = false;\n        }\n      }, 2000);\n    }\n  }\n};","map":{"version":3,"names":["infiniteScroll","name","props","sourceData","type","Array","required","directives","data","loading","busy","listData","showData","loadedCount","perPage","computed","splitTime","item","date","time","split","watch","handler","newVal","oldVal","deep","mounted","startIndex","endIndex","newData","slice","console","log","methods","handleInfiniteOnLoad","setTimeout","length"],"sources":["src/components/log/InfiniteScroll.vue"],"sourcesContent":["<template>\n  <div\n      v-infinite-scroll=\"handleInfiniteOnLoad\"\n      class=\"demo-infinite-container\"\n      :infinite-scroll-disabled=\"busy\"\n      :infinite-scroll-distance=\"10\"\n  >\n    <a-list\n        item-layout=\"horizontal\"\n        :data-source=\"showData\"\n    >\n\n      <!--          <div-->\n      <!--              v-if=\"showLoadingMore\"-->\n      <!--              slot=\"loadMore\"-->\n      <!--              :style=\"{ textAlign: 'center', marginTop: '12px', height: '32px', lineHeight: '32px' }\"-->\n      <!--          >-->\n      <!--            <a-spin v-if=\"loadingMore\"/>-->\n      <!--            <a-button v-else @click=\"onLoadMore\">-->\n      <!--              loading more-->\n      <!--            </a-button>-->\n      <!--          </div>-->\n\n      <a-list-item slot=\"renderItem\" slot-scope=\"item, index\">\n        <a-popover placement=\"bottom\" slot=\"actions\">\n          <template slot=\"content\">\n            <p>{{ item.message ? item.message : '没有记录' }}</p>\n          </template>\n          <a v-if=\"item.status_code !== 200\" size=\"small\">\n            报错信息\n          </a>\n        </a-popover>\n        <a-list-item-meta>\n              <span slot=\"title\" style=\"display: flex;justify-content: space-between\">\n                <span>\n                   <a-tag :color=\"item.status_code === 200? '#1ba81e' :'#f50' \">\n                  {{ item.status_code }}\n                  </a-tag>\n\n                  <span>{{ item.type }}</span>\n                </span>\n                <span style=\"color: #a6a3a3\">\n                    {{ splitTime(item.created_at) }}\n                </span>\n              </span>\n        </a-list-item-meta>\n        {{ item.name }}\n      </a-list-item>\n      <div v-if=\"loading && !busy\" class=\"demo-loading-container\">\n        <a-spin/>\n      </div>\n    </a-list>\n\n  </div>\n</template>\n\n<script>\nimport infiniteScroll from 'vue-infinite-scroll';\nexport default {\n  name: \"InfiniteScroll\",\n  props: {\n    sourceData: {\n      type: Array,\n      required: true\n    }\n  },\n  directives: {infiniteScroll},\n  data(){\n    return{\n      loading: false,\n      busy: false,\n      listData: [],\n      showData: [],\n      loadedCount: 0, // 已经加载的数据数量\n      perPage: 10, // 每页的数据数量\n    }\n  },\n  computed: {\n    splitTime() {\n      return function (item) {\n        const [date, time] = item.split(' ');\n        return time;\n      }\n    }\n  },\n  watch: {\n    sourceData: {\n      handler: function (newVal, oldVal) {\n\n      },\n      // 深度观察监听\n      deep: true\n    },\n  },\n  mounted() {\n    this.loadedCount = 0\n    this.showData = []\n    this.listData = this.sourceData\n\n    const startIndex = this.loadedCount;\n    const endIndex = this.loadedCount + this.perPage;\n\n    // 根据需要加载的数据范围从数据源中截取数据\n    const newData = this.listData.slice(startIndex, endIndex);\n\n    // 将新加载的数据添加到已有数据列表中\n    this.showData = [...this.showData, ...newData];\n    // 更新已加载数据的数量\n    this.loadedCount = endIndex;\n\n    console.log(this.showData)\n  },\n  methods:{\n    handleInfiniteOnLoad() {\n      // 开始加载\n      this.loading = true;\n\n      // 模拟异步加载数据\n      setTimeout(() => {\n        const startIndex = this.loadedCount;\n        const endIndex = this.loadedCount + this.perPage;\n\n        // 根据需要加载的数据范围从数据源中截取数据\n        const newData = this.listData.slice(startIndex, endIndex);\n\n        // 将新加载的数据添加到已有数据列表中\n        this.showData = [...this.showData, ...newData];\n\n        // 更新已加载数据的数量\n        this.loadedCount = endIndex;\n\n        // 加载结束\n\n        this.loading = false;\n\n        if (newData.length < this.perPage) {\n          // 如果新加载的数据少于 perPage 条，说明已经加载完全部数据，隐藏加载更多按钮\n          this.busy = true;\n        } else {\n          this.busy = false;\n        }\n      }, 2000);\n    },\n  }\n}\n</script>\n\n<style scoped>\n.demo-infinite-container {\n  border: 1px solid #e8e8e8;\n  border-radius: 4px;\n  overflow: auto;\n  padding: 8px 24px;\n  height: 300px;\n}\n\n.demo-loading-container {\n  position: absolute;\n  bottom: 40px;\n  width: 100%;\n  text-align: center;\n}\n</style>\n"],"mappings":"AAyDA,OAAAA,cAAA;AACA;EACAC,IAAA;EACAC,KAAA;IACAC,UAAA;MACAC,IAAA,EAAAC,KAAA;MACAC,QAAA;IACA;EACA;EACAC,UAAA;IAAAP;EAAA;EACAQ,KAAA;IACA;MACAC,OAAA;MACAC,IAAA;MACAC,QAAA;MACAC,QAAA;MACAC,WAAA;MAAA;MACAC,OAAA;IACA;EACA;;EACAC,QAAA;IACAC,UAAA;MACA,iBAAAC,IAAA;QACA,OAAAC,IAAA,EAAAC,IAAA,IAAAF,IAAA,CAAAG,KAAA;QACA,OAAAD,IAAA;MACA;IACA;EACA;EACAE,KAAA;IACAlB,UAAA;MACAmB,OAAA,WAAAA,CAAAC,MAAA,EAAAC,MAAA,GAEA;MACA;MACAC,IAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAb,WAAA;IACA,KAAAD,QAAA;IACA,KAAAD,QAAA,QAAAR,UAAA;IAEA,MAAAwB,UAAA,QAAAd,WAAA;IACA,MAAAe,QAAA,QAAAf,WAAA,QAAAC,OAAA;;IAEA;IACA,MAAAe,OAAA,QAAAlB,QAAA,CAAAmB,KAAA,CAAAH,UAAA,EAAAC,QAAA;;IAEA;IACA,KAAAhB,QAAA,YAAAA,QAAA,KAAAiB,OAAA;IACA;IACA,KAAAhB,WAAA,GAAAe,QAAA;IAEAG,OAAA,CAAAC,GAAA,MAAApB,QAAA;EACA;EACAqB,OAAA;IACAC,qBAAA;MACA;MACA,KAAAzB,OAAA;;MAEA;MACA0B,UAAA;QACA,MAAAR,UAAA,QAAAd,WAAA;QACA,MAAAe,QAAA,QAAAf,WAAA,QAAAC,OAAA;;QAEA;QACA,MAAAe,OAAA,QAAAlB,QAAA,CAAAmB,KAAA,CAAAH,UAAA,EAAAC,QAAA;;QAEA;QACA,KAAAhB,QAAA,YAAAA,QAAA,KAAAiB,OAAA;;QAEA;QACA,KAAAhB,WAAA,GAAAe,QAAA;;QAEA;;QAEA,KAAAnB,OAAA;QAEA,IAAAoB,OAAA,CAAAO,MAAA,QAAAtB,OAAA;UACA;UACA,KAAAJ,IAAA;QACA;UACA,KAAAA,IAAA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}